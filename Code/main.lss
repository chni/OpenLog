
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800100  00006058  000060ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006058  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005b5  008001ae  008001ae  0000619a  2**0
                  ALLOC
  3 .stab         000023f4  00000000  00000000  0000619c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000efb  00000000  00000000  00008590  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  0000948b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000005f5  00000000  00000000  0000952b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000048c8  00000000  00000000  00009b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a65  00000000  00000000  0000e3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003652  00000000  00000000  0000ee4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000570  00000000  00000000  000124a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f68  00000000  00000000  00012a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004422  00000000  00000000  00013978  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000278  00000000  00000000  00017d9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__ctors_end>
       4:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
       8:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
       c:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      10:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      14:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      18:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      1c:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      20:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      24:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      28:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      2c:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      30:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      34:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      38:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      3c:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      40:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      44:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      48:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__vector_18>
      4c:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      50:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      54:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      58:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      5c:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      60:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>
      64:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__bad_interrupt>

00000068 <__c.3068>:
      68:	29 3a 20 00                                         ): .

0000006c <__c.3066>:
      6c:	74 6f 6f 20 6d 61 6e 79 20 61 72 67 75 6d 65 6e     too many argumen
      7c:	74 73 28 00                                         ts(.

00000080 <__c.2993>:
      80:	45 78 69 74 69 6e 67 0a 00                          Exiting..

00000089 <__c.2991>:
      89:	78 00                                               x.

0000008b <__c.2989>:
      8b:	0a 00                                               ..

0000008d <__c.2987>:
      8d:	0a 4e 75 6d 62 65 72 20 6f 66 20 65 73 63 61 70     .Number of escap
      9d:	65 20 63 68 61 72 61 63 74 65 72 73 20 6e 65 65     e characters nee
      ad:	64 65 64 3a 20 00                                   ded: .

000000b3 <__c.2982>:
      b3:	45 6e 74 65 72 20 6e 75 6d 62 65 72 20 6f 66 20     Enter number of 
      c3:	65 73 63 61 70 65 20 63 68 61 72 61 63 74 65 72     escape character
      d3:	73 20 74 6f 20 6c 6f 6f 6b 20 66 6f 72 3a 20 00     s to look for: .

000000e3 <__c.2979>:
      e3:	36 00                                               6.

000000e5 <__c.2977>:
      e5:	0a 00                                               ..

000000e7 <__c.2975>:
      e7:	0a 4e 65 77 20 65 73 63 61 70 65 20 63 68 61 72     .New escape char
      f7:	61 63 74 65 72 3a 20 00                             acter: .

000000ff <__c.2973>:
      ff:	45 6e 74 65 72 20 61 20 6e 65 77 20 65 73 63 61     Enter a new esca
     10f:	70 65 20 63 68 61 72 61 63 74 65 72 3a 20 00        pe character: .

0000011e <__c.2971>:
     11e:	35 00                                               5.

00000120 <__c.2969>:
     120:	4e 65 77 20 66 69 6c 65 20 6e 75 6d 62 65 72 20     New file number 
     130:	72 65 73 65 74 20 74 6f 20 7a 65 72 6f 0a 00        reset to zero..

0000013f <__c.2967>:
     13f:	34 00                                               4.

00000141 <__c.2965>:
     141:	43 6f 6d 6d 61 6e 64 20 70 72 6f 6d 70 74 0a 00     Command prompt..

00000151 <__c.2963>:
     151:	33 00                                               3.

00000153 <__c.2961>:
     153:	41 70 70 65 6e 64 20 66 69 6c 65 20 6c 6f 67 67     Append file logg
     163:	69 6e 67 0a 00                                      ing..

00000168 <__c.2959>:
     168:	32 00                                               2.

0000016a <__c.2957>:
     16a:	4e 65 77 20 66 69 6c 65 20 6c 6f 67 67 69 6e 67     New file logging
     17a:	0a 00                                               ..

0000017c <__c.2955>:
     17c:	31 00                                               1.

0000017e <__c.2951>:
     17e:	78 29 20 45 78 69 74 0a 00                          x) Exit..

00000187 <__c.2949>:
     187:	36 29 20 4e 75 6d 62 65 72 20 6f 66 20 65 73 63     6) Number of esc
     197:	61 70 65 20 63 68 61 72 61 63 74 65 72 73 0a 00     ape characters..

000001a7 <__c.2947>:
     1a7:	35 29 20 4e 65 77 20 65 73 63 61 70 65 20 63 68     5) New escape ch
     1b7:	61 72 61 63 74 65 72 0a 00                          aracter..

000001c0 <__c.2945>:
     1c0:	34 29 20 52 65 73 65 74 20 6e 65 77 20 66 69 6c     4) Reset new fil
     1d0:	65 20 6e 75 6d 62 65 72 0a 00                       e number..

000001da <__c.2943>:
     1da:	33 29 20 43 6f 6d 6d 61 6e 64 20 70 72 6f 6d 70     3) Command promp
     1ea:	74 0a 00                                            t..

000001ed <__c.2941>:
     1ed:	32 29 20 41 70 70 65 6e 64 20 66 69 6c 65 20 6c     2) Append file l
     1fd:	6f 67 67 69 6e 67 0a 00                             ogging..

00000205 <__c.2939>:
     205:	31 29 20 4e 65 77 20 66 69 6c 65 20 6c 6f 67 67     1) New file logg
     215:	69 6e 67 0a 00                                      ing..

0000021a <__c.2937>:
     21a:	43 68 61 6e 67 65 20 74 6f 3a 0a 00                 Change to:..

00000226 <__c.2935>:
     226:	0a 00                                               ..

00000228 <__c.2933>:
     228:	20 78 20 00                                          x .

0000022c <__c.2931>:
     22c:	43 75 72 72 65 6e 74 20 65 73 63 61 70 65 20 63     Current escape c
     23c:	68 61 72 61 63 74 65 72 20 61 6e 64 20 61 6d 6f     haracter and amo
     24c:	75 6e 74 3a 20 00                                   unt: .

00000252 <__c.2929>:
     252:	0a 00                                               ..

00000254 <__c.2927>:
     254:	43 6f 6d 6d 61 6e 64 00                             Command.

0000025c <__c.2925>:
     25c:	41 70 70 65 6e 64 20 66 69 6c 65 00                 Append file.

00000268 <__c.2923>:
     268:	4e 65 77 20 66 69 6c 65 00                          New file.

00000271 <__c.2921>:
     271:	43 75 72 72 65 6e 74 20 62 6f 6f 74 20 6d 6f 64     Current boot mod
     281:	65 3a 20 00                                         e: .

00000285 <__c.2919>:
     285:	0a 53 79 73 74 65 6d 20 43 6f 6e 66 69 67 75 72     .System Configur
     295:	61 74 69 6f 6e 0a 00                                ation..

0000029c <__c.2902>:
     29c:	0a 45 78 69 74 69 6e 67 0a 00                       .Exiting..

000002a6 <__c.2900>:
     2a6:	78 00                                               x.

000002a8 <__c.2898>:
     2a8:	0a 47 6f 69 6e 67 20 74 6f 20 31 31 35 32 30 30     .Going to 115200
     2b8:	62 70 73 2e 2e 2e 0a 00                             bps.....

000002c0 <__c.2896>:
     2c0:	36 00                                               6.

000002c2 <__c.2894>:
     2c2:	0a 47 6f 69 6e 67 20 74 6f 20 35 37 36 30 30 62     .Going to 57600b
     2d2:	70 73 2e 2e 2e 0a 00                                ps.....

000002d9 <__c.2892>:
     2d9:	35 00                                               5.

000002db <__c.2890>:
     2db:	0a 47 6f 69 6e 67 20 74 6f 20 31 39 32 30 30 62     .Going to 19200b
     2eb:	70 73 2e 2e 2e 0a 00                                ps.....

000002f2 <__c.2888>:
     2f2:	34 00                                               4.

000002f4 <__c.2886>:
     2f4:	0a 47 6f 69 6e 67 20 74 6f 20 39 36 30 30 62 70     .Going to 9600bp
     304:	73 2e 2e 2e 0a 00                                   s.....

0000030a <__c.2884>:
     30a:	33 00                                               3.

0000030c <__c.2882>:
     30c:	0a 47 6f 69 6e 67 20 74 6f 20 34 38 30 30 62 70     .Going to 4800bp
     31c:	73 2e 2e 2e 0a 00                                   s.....

00000322 <__c.2880>:
     322:	32 00                                               2.

00000324 <__c.2878>:
     324:	0a 47 6f 69 6e 67 20 74 6f 20 32 34 30 30 62 70     .Going to 2400bp
     334:	73 2e 2e 2e 0a 00                                   s.....

0000033a <__c.2876>:
     33a:	31 00                                               1.

0000033c <__c.2872>:
     33c:	78 29 20 45 78 69 74 0a 00                          x) Exit..

00000345 <__c.2870>:
     345:	36 29 20 31 31 35 32 30 30 20 62 70 73 0a 00        6) 115200 bps..

00000354 <__c.2868>:
     354:	35 29 20 35 37 36 30 30 20 62 70 73 0a 00           5) 57600 bps..

00000362 <__c.2866>:
     362:	34 29 20 31 39 32 30 30 20 62 70 73 0a 00           4) 19200 bps..

00000370 <__c.2864>:
     370:	33 29 20 39 36 30 30 20 62 70 73 0a 00              3) 9600 bps..

0000037d <__c.2862>:
     37d:	32 29 20 34 38 30 30 20 62 70 73 0a 00              2) 4800 bps..

0000038a <__c.2860>:
     38a:	31 29 20 32 34 30 30 20 62 70 73 0a 00              1) 2400 bps..

00000397 <__c.2858>:
     397:	43 68 61 6e 67 65 20 74 6f 3a 0a 00                 Change to:..

000003a3 <__c.2856>:
     3a3:	30 30 20 62 70 73 0a 00                             00 bps..

000003ab <__c.2854>:
     3ab:	31 31 35 32 00                                      1152.

000003b0 <__c.2852>:
     3b0:	35 37 36 00                                         576.

000003b4 <__c.2850>:
     3b4:	31 39 32 00                                         192.

000003b8 <__c.2848>:
     3b8:	39 36 00                                            96.

000003bb <__c.2846>:
     3bb:	32 34 00                                            24.

000003be <__c.2844>:
     3be:	34 38 00                                            48.

000003c1 <__c.2842>:
     3c1:	43 75 72 72 65 6e 74 3a 20 00                       Current: .

000003cb <__c.2840>:
     3cb:	0a 42 61 75 64 20 43 6f 6e 66 69 67 75 72 61 74     .Baud Configurat
     3db:	69 6f 6e 3a 0a 00                                   ion:..

000003e1 <__c.2833>:
     3e1:	62 61 75 64 09 09 09 3a 20 4d 65 6e 75 20 74 6f     baud...: Menu to
     3f1:	20 63 6f 6e 66 69 67 75 72 65 20 62 61 75 64 20      configure baud 
     401:	72 61 74 65 0a 00                                   rate..

00000407 <__c.2831>:
     407:	73 65 74 09 09 09 3a 20 4d 65 6e 75 20 74 6f 20     set...: Menu to 
     417:	63 6f 6e 66 69 67 75 72 65 20 73 79 73 74 65 6d     configure system
     427:	20 62 6f 6f 74 20 6d 6f 64 65 0a 00                  boot mode..

00000433 <__c.2829>:
     433:	0a 4d 65 6e 75 73 3a 0a 00                          .Menus:..

0000043c <__c.2827>:
     43c:	73 79 6e 63 09 09 09 3a 20 45 6e 73 75 72 65 73     sync...: Ensures
     44c:	20 61 6c 6c 20 62 75 66 66 65 72 65 64 20 64 61      all buffered da
     45c:	74 61 20 69 73 20 77 72 69 74 74 65 6e 20 74 6f     ta is written to
     46c:	20 74 68 65 20 63 61 72 64 0a 00                     the card..

00000477 <__c.2825>:
     477:	69 6e 69 74 09 09 09 3a 20 52 65 69 6e 69 74 69     init...: Reiniti
     487:	61 6c 69 7a 65 73 20 61 6e 64 20 72 65 6f 70 65     alizes and reope
     497:	6e 73 20 74 68 65 20 6d 65 6d 6f 72 79 20 63 61     ns the memory ca
     4a7:	72 64 0a 00                                         rd..

000004ab <__c.2823>:
     4ab:	64 69 73 6b 09 09 09 3a 20 53 68 6f 77 73 20 63     disk...: Shows c
     4bb:	61 72 64 20 6d 61 6e 75 66 61 63 74 75 72 65 72     ard manufacturer
     4cb:	2c 20 73 74 61 74 75 73 2c 20 66 69 6c 65 73 79     , status, filesy
     4db:	73 74 65 6d 20 63 61 70 61 63 69 74 79 20 61 6e     stem capacity an
     4eb:	64 20 66 72 65 65 20 73 74 6f 72 61 67 65 20 73     d free storage s
     4fb:	70 61 63 65 0a 00                                   pace..

00000501 <__c.2821>:
     501:	73 69 7a 65 20 3c 66 69 6c 65 3e 09 09 3a 20 57     size <file>..: W
     511:	72 69 74 65 20 73 69 7a 65 20 6f 66 20 66 69 6c     rite size of fil
     521:	65 20 74 6f 20 74 65 72 6d 69 6e 61 6c 0a 00        e to terminal..

00000530 <__c.2819>:
     530:	72 65 61 64 20 3c 66 69 6c 65 3e 20 3c 73 74 61     read <file> <sta
     540:	72 74 3e 20 3c 6c 65 6e 67 74 68 3e 09 09 3a 20     rt> <length>..: 
     550:	57 72 69 74 65 73 20 41 53 43 49 49 20 3c 6c 65     Writes ASCII <le
     560:	6e 67 74 68 3e 20 70 61 72 74 73 20 6f 66 20 3c     ngth> parts of <
     570:	66 69 6c 65 3e 20 74 6f 20 74 68 65 20 74 65 72     file> to the ter
     580:	6d 69 6e 61 6c 20 73 74 61 72 74 69 6e 67 20 61     minal starting a
     590:	74 20 3c 73 74 61 72 74 3e 2e 20 4f 6d 6d 69 74     t <start>. Ommit
     5a0:	20 3c 73 74 61 72 74 3e 20 61 6e 64 20 3c 6c 65      <start> and <le
     5b0:	6e 67 74 68 3e 20 74 6f 20 72 65 61 64 20 77 68     ngth> to read wh
     5c0:	6f 6c 65 20 66 69 6c 65 0a 00                       ole file..

000005ca <__c.2817>:
     5ca:	63 61 74 20 3c 66 69 6c 65 3e 09 09 3a 20 57 72     cat <file>..: Wr
     5da:	69 74 65 73 20 61 20 68 65 78 64 75 6d 70 20 6f     ites a hexdump o
     5ea:	66 20 3c 66 69 6c 65 3e 20 74 6f 20 74 68 65 20     f <file> to the 
     5fa:	74 65 72 6d 69 6e 61 6c 0a 00                       terminal..

00000604 <__c.2815>:
     604:	6c 73 09 09 09 3a 20 53 68 6f 77 73 20 74 68 65     ls...: Shows the
     614:	20 63 6f 6e 74 65 6e 74 20 6f 66 20 74 68 65 20      content of the 
     624:	63 75 72 72 65 6e 74 20 64 69 72 65 63 74 6f 72     current director
     634:	79 2e 20 55 73 65 20 77 69 6c 64 63 61 72 64 20     y. Use wildcard 
     644:	74 6f 20 64 6f 20 61 20 77 69 6c 64 63 61 72 64     to do a wildcard
     654:	20 6c 69 73 74 69 6e 67 20 6f 66 20 66 69 6c 65      listing of file
     664:	73 20 69 6e 20 63 75 72 72 65 6e 74 20 64 69 72     s in current dir
     674:	65 63 74 6f 72 79 0a 00                             ectory..

0000067c <__c.2813>:
     67c:	63 64 20 2e 2e 09 09 3a 20 43 68 61 6e 67 65 73     cd ....: Changes
     68c:	20 74 6f 20 6c 6f 77 65 72 20 64 69 72 65 63 74      to lower direct
     69c:	6f 72 79 20 69 6e 20 74 72 65 65 0a 00              ory in tree..

000006a9 <__c.2811>:
     6a9:	63 64 20 3c 64 69 72 65 63 74 6f 72 79 3e 09 09     cd <directory>..
     6b9:	3a 20 43 68 61 6e 67 65 73 20 63 75 72 72 65 6e     : Changes curren
     6c9:	74 20 77 6f 72 6b 69 6e 67 20 64 69 72 65 63 74     t working direct
     6d9:	6f 72 79 20 74 6f 20 3c 64 69 72 65 63 74 6f 72     ory to <director
     6e9:	79 3e 0a 00                                         y>..

000006ed <__c.2809>:
     6ed:	6d 64 20 3c 64 69 72 65 63 74 6f 72 79 3e 09 3a     md <directory>.:
     6fd:	20 43 72 65 61 74 65 73 20 61 20 64 69 72 65 63      Creates a direc
     70d:	74 6f 72 79 20 63 61 6c 6c 65 64 20 3c 64 69 72     tory called <dir
     71d:	65 63 74 6f 72 79 3e 0a 00                          ectory>..

00000726 <__c.2807>:
     726:	72 6d 20 3c 66 69 6c 65 3e 09 09 3a 20 44 65 6c     rm <file>..: Del
     736:	65 74 65 73 20 3c 66 69 6c 65 3e 2e 20 55 73 65     etes <file>. Use
     746:	20 77 69 6c 64 63 61 72 64 20 74 6f 20 64 6f 20      wildcard to do 
     756:	61 20 77 69 6c 64 63 61 72 64 20 72 65 6d 6f 76     a wildcard remov
     766:	61 6c 20 6f 66 20 66 69 6c 65 73 0a 00              al of files..

00000773 <__c.2805>:
     773:	77 72 69 74 65 20 3c 66 69 6c 65 3e 20 3c 6f 66     write <file> <of
     783:	66 73 65 74 3e 09 3a 20 57 72 69 74 65 73 20 74     fset>.: Writes t
     793:	65 78 74 20 74 6f 20 3c 66 69 6c 65 3e 2c 20 73     ext to <file>, s
     7a3:	74 61 72 74 69 6e 67 20 66 72 6f 6d 20 3c 6f 66     tarting from <of
     7b3:	66 73 65 74 3e 2e 20 54 68 65 20 74 65 78 74 20     fset>. The text 
     7c3:	69 73 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65     is read from the
     7d3:	20 55 41 52 54 2c 20 6c 69 6e 65 20 62 79 20 6c      UART, line by l
     7e3:	69 6e 65 2e 20 46 69 6e 69 73 68 20 77 69 74 68     ine. Finish with
     7f3:	20 61 6e 20 65 6d 70 74 79 20 6c 69 6e 65 0a 00      an empty line..

00000803 <__c.2803>:
     803:	61 70 70 65 6e 64 20 3c 66 69 6c 65 3e 09 09 3a     append <file>..:
     813:	20 41 70 70 65 6e 64 73 20 74 65 78 74 20 74 6f      Appends text to
     823:	20 65 6e 64 20 6f 66 20 3c 66 69 6c 65 3e 2e 20      end of <file>. 
     833:	54 68 65 20 74 65 78 74 20 69 73 20 72 65 61 64     The text is read
     843:	20 66 72 6f 6d 20 74 68 65 20 55 41 52 54 20 69      from the UART i
     853:	6e 20 61 20 73 74 72 65 61 6d 20 61 6e 64 20 69     n a stream and i
     863:	73 20 6e 6f 74 20 65 63 68 6f 65 64 2e 20 46 69     s not echoed. Fi
     873:	6e 69 73 68 20 62 79 20 73 65 6e 64 69 6e 67 20     nish by sending 
     883:	43 74 72 6c 2b 7a 20 28 41 53 43 49 49 20 32 36     Ctrl+z (ASCII 26
     893:	29 0a 00                                            )..

00000896 <__c.2801>:
     896:	6e 65 77 20 3c 66 69 6c 65 3e 09 09 3a 20 43 72     new <file>..: Cr
     8a6:	65 61 74 65 73 20 3c 66 69 6c 65 3e 0a 00           eates <file>..

000008b4 <__c.2799>:
     8b4:	41 76 61 69 6c 61 62 6c 65 20 63 6f 6d 6d 61 6e     Available comman
     8c4:	64 73 3a 0a 00                                      ds:..

000008c9 <__c.2797>:
     8c9:	0a 4f 70 65 6e 4c 6f 67 20 76 31 2e 36 31 0a 00     .OpenLog v1.61..

000008d9 <__c.2502>:
     8d9:	7e 00                                               ~.

000008db <__c.2500>:
     8db:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     8eb:	20 66 69 6c 65 0a 00                                 file..

000008f2 <__c.2498>:
     8f2:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     902:	20 66 69 6c 65 0a 00                                 file..

00000909 <__c.2495>:
     909:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     919:	20 66 69 6c 65 0a 00                                 file..

00000920 <__c.2492>:
     920:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     930:	20 66 69 6c 65 0a 00                                 file..

00000937 <__c.2479>:
     937:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     947:	20 66 69 6c 65 0a 00                                 file..

0000094e <__c.2477>:
     94e:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     95e:	20 66 69 6c 65 0a 00                                 file..

00000965 <__c.2469>:
     965:	21 65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f     !error seeking o
     975:	6e 20 00                                            n .

00000978 <__c.2466>:
     978:	21 65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00     !error opening .

00000988 <__c.2367>:
     988:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 3a     unknown command:
     998:	20 00                                                .

0000099a <__c.2365>:
     99a:	65 72 72 6f 72 20 73 79 6e 63 69 6e 67 20 64 69     error syncing di
     9aa:	73 6b 0a 00                                         sk..

000009ae <__c.2363>:
     9ae:	73 79 6e 63 00                                      sync.

000009b3 <__c.2361>:
     9b3:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 64     error creating d
     9c3:	69 72 65 63 74 6f 72 79 3a 20 00                    irectory: .

000009ce <__c.2358>:
     9ce:	6d 64 00                                            md.

000009d1 <__c.2356>:
     9d1:	61 70 70 65 6e 64 00                                append.

000009d8 <__c.2353>:
     9d8:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     9e8:	20 66 69 6c 65 0a 00                                 file..

000009ef <__c.2349>:
     9ef:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
     9ff:	20 00                                                .

00000a01 <__c.2346>:
     a01:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

00000a10 <__c.2342>:
     a10:	77 72 69 74 65 00                                   write.

00000a16 <__c.2340>:
     a16:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 66     error creating f
     a26:	69 6c 65 3a 20 00                                   ile: .

00000a2c <__c.2337>:
     a2c:	6e 65 77 00                                         new.

00000a30 <__c.2332>:
     a30:	65 72 72 6f 72 20 64 65 6c 65 74 69 6e 67 20 66     error deleting f
     a40:	69 6c 65 3a 20 00                                   ile: .

00000a46 <__c.2329>:
     a46:	72 6d 00                                            rm.

00000a49 <__c.2326>:
     a49:	73 69 7a 65 00                                      size.

00000a4e <__c.2324>:
     a4e:	65 72 72 6f 72 20 72 65 61 64 69 6e 67 20 64 69     error reading di
     a5e:	73 6b 20 69 6e 66 6f 0a 00                          sk info..

00000a67 <__c.2322>:
     a67:	64 69 73 6b 00                                      disk.

00000a6c <__c.2315>:
     a6c:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
     a7c:	20 00                                                .

00000a7e <__c.2312>:
     a7e:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

00000a8d <__c.2309>:
     a8d:	72 65 61 64 00                                      read.

00000a92 <__c.2297>:
     a92:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

00000aa1 <__c.2294>:
     aa1:	63 61 74 00                                         cat.

00000aa5 <__c.2284>:
     aa5:	6c 73 00                                            ls.

00000aa8 <__c.2282>:
     aa8:	64 69 72 65 63 74 6f 72 79 20 6e 6f 74 20 66 6f     directory not fo
     ab8:	75 6e 64 3a 20 00                                   und: .

00000abe <__c.2278>:
     abe:	63 64 00                                            cd.

00000ac1 <__c.2276>:
     ac1:	73 65 74 00                                         set.

00000ac5 <__c.2274>:
     ac5:	62 61 75 64 00                                      baud.

00000aca <__c.2272>:
     aca:	68 65 6c 70 00                                      help.

00000acf <__c.2270>:
     acf:	3f 00                                               ?.

00000ad1 <__c.2268>:
     ad1:	46 69 6c 65 20 73 79 73 74 65 6d 20 69 6e 69 74     File system init
     ae1:	69 61 6c 69 7a 65 64 0a 00                          ialized..

00000aea <__c.2266>:
     aea:	43 6c 6f 73 69 6e 67 20 64 6f 77 6e 20 66 69 6c     Closing down fil
     afa:	65 20 73 79 73 74 65 6d 0a 00                       e system..

00000b04 <__c.2264>:
     b04:	69 6e 69 74 00                                      init.

00000b09 <__c.2771>:
     b09:	66 72 65 65 3a 20 20 20 00                          free:   .

00000b12 <__c.2769>:
     b12:	66 6f 72 6d 61 74 3a 20 00                          format: .

00000b1b <__c.2767>:
     b1b:	77 72 2e 70 72 2e 3a 20 00                          wr.pr.: .

00000b24 <__c.2765>:
     b24:	63 6f 70 79 3a 20 20 20 00                          copy:   .

00000b2d <__c.2763>:
     b2d:	4d 42 0a 00                                         MB..

00000b31 <__c.2761>:
     b31:	73 69 7a 65 3a 20 20 20 00                          size:   .

00000b3a <__c.2759>:
     b3a:	64 61 74 65 3a 20 20 20 00                          date:   .

00000b43 <__c.2757>:
     b43:	73 65 72 69 61 6c 3a 20 30 78 00                    serial: 0x.

00000b4e <__c.2755>:
     b4e:	72 65 76 3a 20 20 20 20 00                          rev:    .

00000b57 <__c.2753>:
     b57:	70 72 6f 64 3a 20 20 20 00                          prod:   .

00000b60 <__c.2751>:
     b60:	6f 65 6d 3a 20 20 20 20 00                          oem:    .

00000b69 <__c.2749>:
     b69:	6d 61 6e 75 66 3a 20 20 30 78 00                    manuf:  0x.

00000b74 <__c.2244>:
     b74:	21 54 6f 6f 20 6d 61 6e 79 20 6c 6f 67 73 3a 32     !Too many logs:2
     b84:	21 00                                               !.

00000b86 <__c.2240>:
     b86:	21 54 6f 6f 20 6d 61 6e 79 20 6c 6f 67 73 3a 31     !Too many logs:1
     b96:	21 00                                               !.

00000b98 <__c.2228>:
     b98:	45 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 53     Error creating S
     ba8:	45 51 4c 4f 47 0a 00                                EQLOG..

00000baf <__c.2225>:
     baf:	43 72 65 61 74 69 6e 67 20 53 45 51 4c 4f 47 0a     Creating SEQLOG.
	...

00000bc0 <__c.2099>:
     bc0:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 63 6f     error opening co
     bd0:	6e 66 69 67 20 66 69 6c 65 00                       nfig file.

00000bda <__c.2064>:
     bda:	32 00                                               2.

00000bdc <__c.2062>:
     bdc:	31 00                                               1.

00000bde <__ctors_end>:
     bde:	11 24       	eor	r1, r1
     be0:	1f be       	out	0x3f, r1	; 63
     be2:	cf ef       	ldi	r28, 0xFF	; 255
     be4:	d8 e0       	ldi	r29, 0x08	; 8
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	cd bf       	out	0x3d, r28	; 61

00000bea <__do_copy_data>:
     bea:	11 e0       	ldi	r17, 0x01	; 1
     bec:	a0 e0       	ldi	r26, 0x00	; 0
     bee:	b1 e0       	ldi	r27, 0x01	; 1
     bf0:	e8 e5       	ldi	r30, 0x58	; 88
     bf2:	f0 e6       	ldi	r31, 0x60	; 96
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <.do_copy_data_start>

00000bf6 <.do_copy_data_loop>:
     bf6:	05 90       	lpm	r0, Z+
     bf8:	0d 92       	st	X+, r0

00000bfa <.do_copy_data_start>:
     bfa:	ae 3a       	cpi	r26, 0xAE	; 174
     bfc:	b1 07       	cpc	r27, r17
     bfe:	d9 f7       	brne	.-10     	; 0xbf6 <.do_copy_data_loop>

00000c00 <__do_clear_bss>:
     c00:	17 e0       	ldi	r17, 0x07	; 7
     c02:	ae ea       	ldi	r26, 0xAE	; 174
     c04:	b1 e0       	ldi	r27, 0x01	; 1
     c06:	01 c0       	rjmp	.+2      	; 0xc0a <.do_clear_bss_start>

00000c08 <.do_clear_bss_loop>:
     c08:	1d 92       	st	X+, r1

00000c0a <.do_clear_bss_start>:
     c0a:	a3 36       	cpi	r26, 0x63	; 99
     c0c:	b1 07       	cpc	r27, r17
     c0e:	e1 f7       	brne	.-8      	; 0xc08 <.do_clear_bss_loop>
     c10:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <main>
     c14:	0c 94 2a 30 	jmp	0x6054	; 0x6054 <_exit>

00000c18 <__bad_interrupt>:
     c18:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c1c <__vector_18>:
char setting_max_escape_character; //Number of escape chars before break logging, default is 3

//Circular buffer UART RX interrupt
//Is only used during append
ISR(USART_RX_vect)
{
     c1c:	1f 92       	push	r1
     c1e:	0f 92       	push	r0
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	0f 92       	push	r0
     c24:	11 24       	eor	r1, r1
     c26:	2f 93       	push	r18
     c28:	8f 93       	push	r24
     c2a:	9f 93       	push	r25
     c2c:	ef 93       	push	r30
     c2e:	ff 93       	push	r31
	input_buffer[read_spot] = UDR0;
     c30:	e0 91 83 04 	lds	r30, 0x0483
     c34:	f0 91 84 04 	lds	r31, 0x0484
     c38:	80 91 c6 00 	lds	r24, 0x00C6
     c3c:	e5 57       	subi	r30, 0x75	; 117
     c3e:	fb 4f       	sbci	r31, 0xFB	; 251
     c40:	80 83       	st	Z, r24
	read_spot++;
     c42:	80 91 83 04 	lds	r24, 0x0483
     c46:	90 91 84 04 	lds	r25, 0x0484
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	90 93 84 04 	sts	0x0484, r25
     c50:	80 93 83 04 	sts	0x0483, r24
	STAT1_PORT ^= (1<<STAT1); //Toggle the STAT1 LED each time we receive a character
     c54:	8b b1       	in	r24, 0x0b	; 11
     c56:	90 e2       	ldi	r25, 0x20	; 32
     c58:	89 27       	eor	r24, r25
     c5a:	8b b9       	out	0x0b, r24	; 11
	if(read_spot == BUFF_LEN) read_spot = 0;
     c5c:	80 91 83 04 	lds	r24, 0x0483
     c60:	90 91 84 04 	lds	r25, 0x0484
     c64:	8c 5b       	subi	r24, 0xBC	; 188
     c66:	92 40       	sbci	r25, 0x02	; 2
     c68:	21 f4       	brne	.+8      	; 0xc72 <__vector_18+0x56>
     c6a:	10 92 84 04 	sts	0x0484, r1
     c6e:	10 92 83 04 	sts	0x0483, r1
}
     c72:	ff 91       	pop	r31
     c74:	ef 91       	pop	r30
     c76:	9f 91       	pop	r25
     c78:	8f 91       	pop	r24
     c7a:	2f 91       	pop	r18
     c7c:	0f 90       	pop	r0
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	0f 90       	pop	r0
     c82:	1f 90       	pop	r1
     c84:	18 95       	reti

00000c86 <EEPROM_write>:
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     c86:	f9 99       	sbic	0x1f, 1	; 31
     c88:	fe cf       	rjmp	.-4      	; 0xc86 <EEPROM_write>
	EEARH = uiAddress >> 8; //Set up address and data registers
     c8a:	92 bd       	out	0x22, r25	; 34
	EEARL = uiAddress; //Set up address and data registers
     c8c:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     c8e:	60 bd       	out	0x20, r22	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     c90:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     c92:	f9 9a       	sbi	0x1f, 1	; 31
}
     c94:	08 95       	ret

00000c96 <set_default_settings>:

//Resets all the system settings to safe values
void set_default_settings(void)
{
	//Reset UART to 9600bps
	EEPROM_write(LOCATION_BAUD_SETTING, BAUD_9600);
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	61 e0       	ldi	r22, 0x01	; 1
     c9c:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>

	//Reset system to new log mode
	EEPROM_write(LOCATION_SYSTEM_SETTING, MODE_NEWLOG);
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>

	//Reset escape character to ctrl+z
	EEPROM_write(LOCATION_ESCAPE_CHAR, 26); 
     caa:	85 e0       	ldi	r24, 0x05	; 5
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	6a e1       	ldi	r22, 0x1A	; 26
     cb0:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>

	//Reset number of escape characters to 3
	EEPROM_write(LOCATION_MAX_ESCAPE_CHAR, 3);
     cb4:	86 e0       	ldi	r24, 0x06	; 6
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	63 e0       	ldi	r22, 0x03	; 3
     cba:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>

	//These settings are not recorded to the config file
	//We can't do it here because we are not sure the FAT system is init'd
}
     cbe:	08 95       	ret

00000cc0 <EEPROM_read>:
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     cc0:	f9 99       	sbic	0x1f, 1	; 31
     cc2:	fe cf       	rjmp	.-4      	; 0xcc0 <EEPROM_read>
	EEARH = uiAddress >> 8; //Set up address and data registers
     cc4:	92 bd       	out	0x22, r25	; 34
	EEARL = uiAddress; //Set up address and data registers
     cc6:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
     cc8:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
     cca:	80 b5       	in	r24, 0x20	; 32
}
     ccc:	08 95       	ret

00000cce <read_system_settings>:
//If anything looks weird, reset setting to default value
void read_system_settings(void)
{
	//Read what the current UART speed is from EEPROM memory
	//Default is 9600
	setting_uart_speed = EEPROM_read(LOCATION_BAUD_SETTING);
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <EEPROM_read>
     cd6:	80 93 88 04 	sts	0x0488, r24
	if(setting_uart_speed > 10) 
     cda:	8b 30       	cpi	r24, 0x0B	; 11
     cdc:	40 f0       	brcs	.+16     	; 0xcee <read_system_settings+0x20>
	{
		setting_uart_speed = BAUD_9600; //Reset UART to 9600 if there is no speed stored
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	80 93 88 04 	sts	0x0488, r24
		EEPROM_write(LOCATION_BAUD_SETTING, setting_uart_speed);
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	61 e0       	ldi	r22, 0x01	; 1
     cea:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>
	}

	//Determine the system mode we should be in
	//Default is NEWLOG mode
	setting_system_mode = EEPROM_read(LOCATION_SYSTEM_SETTING);
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <EEPROM_read>
     cf6:	80 93 82 04 	sts	0x0482, r24
	if(setting_system_mode > 5) 
     cfa:	86 30       	cpi	r24, 0x06	; 6
     cfc:	38 f0       	brcs	.+14     	; 0xd0c <read_system_settings+0x3e>
	{
		setting_system_mode = MODE_NEWLOG; //By default, unit will turn on and go to new file logging
     cfe:	10 92 82 04 	sts	0x0482, r1
		EEPROM_write(LOCATION_SYSTEM_SETTING, setting_system_mode);
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>
	}

	//Read the escape_character
	//ASCII(26) is ctrl+z
	setting_escape_character = EEPROM_read(LOCATION_ESCAPE_CHAR);
     d0c:	85 e0       	ldi	r24, 0x05	; 5
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 60 06 	call	0xcc0	; 0xcc0 <EEPROM_read>
     d14:	80 93 49 07 	sts	0x0749, r24
	if(setting_escape_character == 0 || setting_escape_character == 255) 
     d18:	81 50       	subi	r24, 0x01	; 1
     d1a:	8e 3f       	cpi	r24, 0xFE	; 254
     d1c:	40 f0       	brcs	.+16     	; 0xd2e <read_system_settings+0x60>
	{
		setting_escape_character = 26; //Reset escape character to ctrl+z
     d1e:	8a e1       	ldi	r24, 0x1A	; 26
     d20:	80 93 49 07 	sts	0x0749, r24
		EEPROM_write(LOCATION_ESCAPE_CHAR, setting_escape_character);
     d24:	85 e0       	ldi	r24, 0x05	; 5
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	6a e1       	ldi	r22, 0x1A	; 26
     d2a:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>
	}

	//Read the number of escape_characters to look for
	//Default is 3
	setting_max_escape_character = EEPROM_read(LOCATION_MAX_ESCAPE_CHAR);
     d2e:	86 e0       	ldi	r24, 0x06	; 6
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 60 06 	call	0xcc0	; 0xcc0 <EEPROM_read>
     d36:	80 93 85 04 	sts	0x0485, r24
	if(setting_max_escape_character == 0 || setting_max_escape_character == 255) 
     d3a:	81 50       	subi	r24, 0x01	; 1
     d3c:	8e 3f       	cpi	r24, 0xFE	; 254
     d3e:	40 f0       	brcs	.+16     	; 0xd50 <read_system_settings+0x82>
	{
		setting_max_escape_character = 3; //Reset number of escape characters to 3
     d40:	83 e0       	ldi	r24, 0x03	; 3
     d42:	80 93 85 04 	sts	0x0485, r24
		EEPROM_write(LOCATION_MAX_ESCAPE_CHAR, setting_max_escape_character);
     d46:	86 e0       	ldi	r24, 0x06	; 6
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	63 e0       	ldi	r22, 0x03	; 3
     d4c:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>
     d50:	08 95       	ret

00000d52 <delay_us>:
//Uses internal timer do a fairly accurate 1us
//Because we are using 16MHz and a prescalar of 8 on Timer0, we have to double x
void delay_us(uint16_t x)
{
	//External 16MHz resonator hack.
	x *= 2;	
     d52:	9c 01       	movw	r18, r24
     d54:	22 0f       	add	r18, r18
     d56:	33 1f       	adc	r19, r19
	
	while(x > 256)
	{
		TIFR0 = (1<<TOV0); //Clear any interrupt flags on Timer0
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	06 c0       	rjmp	.+12     	; 0xd68 <delay_us+0x16>
     d5c:	85 bb       	out	0x15, r24	; 21
		TCNT0 = 0; //Preload Timer0 for 256 clicks. Should be 1us per click
     d5e:	16 bc       	out	0x26, r1	; 38
		while( (TIFR0 & (1<<TOV0)) == 0);
     d60:	a8 9b       	sbis	0x15, 0	; 21
     d62:	fe cf       	rjmp	.-4      	; 0xd60 <delay_us+0xe>
		
		x -= 256;
     d64:	20 50       	subi	r18, 0x00	; 0
     d66:	31 40       	sbci	r19, 0x01	; 1
void delay_us(uint16_t x)
{
	//External 16MHz resonator hack.
	x *= 2;	
	
	while(x > 256)
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	21 30       	cpi	r18, 0x01	; 1
     d6c:	39 07       	cpc	r19, r25
     d6e:	b0 f7       	brcc	.-20     	; 0xd5c <delay_us+0xa>
		while( (TIFR0 & (1<<TOV0)) == 0);
		
		x -= 256;
	}

	TIFR0 = (1<<TOV0); //Clear any interrupt flags on Timer0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	85 bb       	out	0x15, r24	; 21
	TCNT0 = 256 - x; //256 - 125 = 131 : Preload Timer0 for x clicks. Should be 1us per click
     d74:	82 2f       	mov	r24, r18
     d76:	81 95       	neg	r24
     d78:	86 bd       	out	0x26, r24	; 38
	while( (TIFR0 & (1<<TOV0)) == 0);
     d7a:	a8 9b       	sbis	0x15, 0	; 21
     d7c:	fe cf       	rjmp	.-4      	; 0xd7a <delay_us+0x28>
}
     d7e:	08 95       	ret

00000d80 <delay_ms>:

//General short delays
void delay_ms(uint16_t x)
{
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	ec 01       	movw	r28, r24
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <delay_ms+0x12>
	for ( ; x > 0 ; x--)
		delay_us(1000);
     d88:	88 ee       	ldi	r24, 0xE8	; 232
     d8a:	93 e0       	ldi	r25, 0x03	; 3
     d8c:	0e 94 a9 06 	call	0xd52	; 0xd52 <delay_us>
}

//General short delays
void delay_ms(uint16_t x)
{
	for ( ; x > 0 ; x--)
     d90:	21 97       	sbiw	r28, 0x01	; 1
     d92:	20 97       	sbiw	r28, 0x00	; 0
     d94:	c9 f7       	brne	.-14     	; 0xd88 <delay_ms+0x8>
		delay_us(1000);
}
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <blink_error>:
}


//Blinks the status LEDs to indicate a type of error
void blink_error(uint8_t ERROR_TYPE)
{
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	c0 e0       	ldi	r28, 0x00	; 0
     da6:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
		for(int x = 0 ; x < ERROR_TYPE ; x++)
     da8:	08 2f       	mov	r16, r24
     daa:	10 e0       	ldi	r17, 0x00	; 0
     dac:	0b c0       	rjmp	.+22     	; 0xdc4 <blink_error+0x28>
		{
			sbi(STAT1_PORT, STAT1);
     dae:	5d 9a       	sbi	0x0b, 5	; 11
			delay_ms(100);
     db0:	84 e6       	ldi	r24, 0x64	; 100
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 c0 06 	call	0xd80	; 0xd80 <delay_ms>
			cbi(STAT1_PORT, STAT1);
     db8:	5d 98       	cbi	0x0b, 5	; 11
			delay_ms(100);
     dba:	84 e6       	ldi	r24, 0x64	; 100
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 c0 06 	call	0xd80	; 0xd80 <delay_ms>
//Blinks the status LEDs to indicate a type of error
void blink_error(uint8_t ERROR_TYPE)
{
	while(1)
	{
		for(int x = 0 ; x < ERROR_TYPE ; x++)
     dc2:	21 96       	adiw	r28, 0x01	; 1
     dc4:	c0 17       	cp	r28, r16
     dc6:	d1 07       	cpc	r29, r17
     dc8:	94 f3       	brlt	.-28     	; 0xdae <blink_error+0x12>
			delay_ms(100);
			cbi(STAT1_PORT, STAT1);
			delay_ms(100);
		}
		
		delay_ms(2000);
     dca:	80 ed       	ldi	r24, 0xD0	; 208
     dcc:	97 e0       	ldi	r25, 0x07	; 7
     dce:	0e 94 c0 06 	call	0xd80	; 0xd80 <delay_ms>
     dd2:	c0 e0       	ldi	r28, 0x00	; 0
     dd4:	d0 e0       	ldi	r29, 0x00	; 0
     dd6:	f6 cf       	rjmp	.-20     	; 0xdc4 <blink_error+0x28>

00000dd8 <check_emergency_reset>:

//Check to see if we need an emergency UART reset
//Scan the RX pin for 2 seconds
//If it's low the entire time, then return 1
char check_emergency_reset(void)
{
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
	DDRD |= (1<<0); //Turn the RX pin into an input
     ddc:	50 9a       	sbi	0x0a, 0	; 10
	PORTD |= (1<<0); //Push a 1 onto RX pin to enable internal pull-up
     dde:	58 9a       	sbi	0x0b, 0	; 11

	//Quick pin check
	if( (PIND & (1<<0)) == 1) return 0;
     de0:	48 99       	sbic	0x09, 0	; 9
     de2:	1a c0       	rjmp	.+52     	; 0xe18 <check_emergency_reset+0x40>

	//Wait 2 seconds, blinking LEDs while we wait
	sbi(PORTC, STAT2); //Set the STAT2 LED
     de4:	45 9a       	sbi	0x08, 5	; 8
     de6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i = 0 ; i < 40 ; i++)
	{
		delay_ms(25);
		PORTD ^= (1<<STAT1); //Blink the stat LEDs
     de8:	00 e2       	ldi	r16, 0x20	; 32

	//Wait 2 seconds, blinking LEDs while we wait
	sbi(PORTC, STAT2); //Set the STAT2 LED
	for(uint8_t i = 0 ; i < 40 ; i++)
	{
		delay_ms(25);
     dea:	89 e1       	ldi	r24, 0x19	; 25
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 c0 06 	call	0xd80	; 0xd80 <delay_ms>
		PORTD ^= (1<<STAT1); //Blink the stat LEDs
     df2:	8b b1       	in	r24, 0x0b	; 11
     df4:	80 27       	eor	r24, r16
     df6:	8b b9       	out	0x0b, r24	; 11

		if( (PIND & (1<<0)) == 1) return 0;
     df8:	48 99       	sbic	0x09, 0	; 9
     dfa:	0e c0       	rjmp	.+28     	; 0xe18 <check_emergency_reset+0x40>

		delay_ms(25);
     dfc:	89 e1       	ldi	r24, 0x19	; 25
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 c0 06 	call	0xd80	; 0xd80 <delay_ms>
		PORTB ^= (1<<STAT2); //Blink the stat LEDs
     e04:	85 b1       	in	r24, 0x05	; 5
     e06:	80 27       	eor	r24, r16
     e08:	85 b9       	out	0x05, r24	; 5

		if( (PIND & (1<<0)) == 1) return 0;
     e0a:	48 99       	sbic	0x09, 0	; 9
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <check_emergency_reset+0x40>
	//Quick pin check
	if( (PIND & (1<<0)) == 1) return 0;

	//Wait 2 seconds, blinking LEDs while we wait
	sbi(PORTC, STAT2); //Set the STAT2 LED
	for(uint8_t i = 0 ; i < 40 ; i++)
     e0e:	1f 5f       	subi	r17, 0xFF	; 255
     e10:	18 32       	cpi	r17, 0x28	; 40
     e12:	59 f7       	brne	.-42     	; 0xdea <check_emergency_reset+0x12>
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	01 c0       	rjmp	.+2      	; 0xe1a <check_emergency_reset+0x42>
     e18:	80 e0       	ldi	r24, 0x00	; 0
		if( (PIND & (1<<0)) == 1) return 0;
	}		

	//If we make it here, then RX pin stayed low the whole time
	return 1;
}
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	08 95       	ret

00000e20 <count_cmd_args>:
//These functions were added for wild card delete and search
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

//Returns the number of command line arguments
uint8_t count_cmd_args(void)
{
     e20:	ee ea       	ldi	r30, 0xAE	; 174
     e22:	f1 e0       	ldi	r31, 0x01	; 1
     e24:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
		if((cmd_arg[i].arg != 0) && (cmd_arg[i].arg_length > 0))
     e26:	80 81       	ld	r24, Z
     e28:	91 81       	ldd	r25, Z+1	; 0x01
     e2a:	89 2b       	or	r24, r25
     e2c:	19 f0       	breq	.+6      	; 0xe34 <count_cmd_args+0x14>
     e2e:	82 81       	ldd	r24, Z+2	; 0x02
     e30:	81 11       	cpse	r24, r1
			count++;
     e32:	2f 5f       	subi	r18, 0xFF	; 255
     e34:	33 96       	adiw	r30, 0x03	; 3
//Returns the number of command line arguments
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	ea 3b       	cpi	r30, 0xBA	; 186
     e3a:	f8 07       	cpc	r31, r24
     e3c:	a1 f7       	brne	.-24     	; 0xe26 <count_cmd_args+0x6>
		if((cmd_arg[i].arg != 0) && (cmd_arg[i].arg_length > 0))
			count++;

	return count;
}
     e3e:	82 2f       	mov	r24, r18
     e40:	08 95       	ret

00000e42 <add_cmd_arg>:
	return 0;
}

//Safe adding of command line arguments
void add_cmd_arg(char* buffer, uint8_t buffer_length)
{
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	ec 01       	movw	r28, r24
     e4a:	16 2f       	mov	r17, r22
	uint8_t count = count_cmd_args();
     e4c:	0e 94 10 07 	call	0xe20	; 0xe20 <count_cmd_args>
	if (count < MAX_COUNT_COMMAND_LINE_ARGS)
     e50:	84 30       	cpi	r24, 0x04	; 4
     e52:	58 f4       	brcc	.+22     	; 0xe6a <add_cmd_arg+0x28>
	{
		cmd_arg[count].arg = buffer;
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	fc 01       	movw	r30, r24
     e58:	ee 0f       	add	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	e8 0f       	add	r30, r24
     e5e:	f9 1f       	adc	r31, r25
     e60:	e2 55       	subi	r30, 0x52	; 82
     e62:	fe 4f       	sbci	r31, 0xFE	; 254
     e64:	d1 83       	std	Z+1, r29	; 0x01
     e66:	c0 83       	st	Z, r28
		cmd_arg[count].arg_length = buffer_length;
     e68:	12 83       	std	Z+2, r17	; 0x02
	}
}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	08 95       	ret

00000e72 <is_number>:
}

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
     e72:	ac 01       	movw	r20, r24
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
	for (int i = 0; i < buffer_length; i++)
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	0d c0       	rjmp	.+26     	; 0xe96 <is_number+0x24>
		if (!isdigit(buffer[i]))
     e7c:	fa 01       	movw	r30, r20
     e7e:	e2 0f       	add	r30, r18
     e80:	f3 1f       	adc	r31, r19
     e82:	80 81       	ld	r24, Z
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	c0 97       	sbiw	r24, 0x30	; 48
     e88:	0a 97       	sbiw	r24, 0x0a	; 10
     e8a:	18 f0       	brcs	.+6      	; 0xe92 <is_number+0x20>
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <is_number+0x2a>

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
     e92:	2f 5f       	subi	r18, 0xFF	; 255
     e94:	3f 4f       	sbci	r19, 0xFF	; 255
     e96:	26 17       	cp	r18, r22
     e98:	37 07       	cpc	r19, r23
     e9a:	84 f3       	brlt	.-32     	; 0xe7c <is_number+0xa>
		if (!isdigit(buffer[i]))
			return 0;

	return buffer;
}
     e9c:	ca 01       	movw	r24, r20
     e9e:	08 95       	ret

00000ea0 <wildcmp>:

//Wildcard string compare.
//Written by Jack Handy - jakkhandy@hotmail.com
//http://www.codeproject.com/KB/string/wildcmp.aspx
uint8_t wildcmp(const char* wild, const char* string)
{
     ea0:	fc 01       	movw	r30, r24
     ea2:	db 01       	movw	r26, r22
     ea4:	08 c0       	rjmp	.+16     	; 0xeb6 <wildcmp+0x16>
	const char *cp = 0;
	const char *mp = 0;

	while (*string && (*wild != '*'))
	{
		if ((*wild != *string) && (*wild != '?'))
     ea6:	89 17       	cp	r24, r25
     ea8:	21 f0       	breq	.+8      	; 0xeb2 <wildcmp+0x12>
     eaa:	8f 33       	cpi	r24, 0x3F	; 63
     eac:	11 f0       	breq	.+4      	; 0xeb2 <wildcmp+0x12>
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	08 95       	ret
		return 0;

		wild++;
     eb2:	31 96       	adiw	r30, 0x01	; 1
		string++;
     eb4:	11 96       	adiw	r26, 0x01	; 1
{

	const char *cp = 0;
	const char *mp = 0;

	while (*string && (*wild != '*'))
     eb6:	9c 91       	ld	r25, X
     eb8:	99 23       	and	r25, r25
     eba:	f1 f0       	breq	.+60     	; 0xef8 <wildcmp+0x58>
     ebc:	80 81       	ld	r24, Z
     ebe:	8a 32       	cpi	r24, 0x2A	; 42
     ec0:	91 f7       	brne	.-28     	; 0xea6 <wildcmp+0x6>
     ec2:	1a c0       	rjmp	.+52     	; 0xef8 <wildcmp+0x58>
		string++;
	}

	while (*string)
	{
		if (*wild == '*')
     ec4:	80 81       	ld	r24, Z
     ec6:	8a 32       	cpi	r24, 0x2A	; 42
     ec8:	59 f4       	brne	.+22     	; 0xee0 <wildcmp+0x40>
		{
			if (!(*(++wild)))
     eca:	31 96       	adiw	r30, 0x01	; 1
     ecc:	80 81       	ld	r24, Z
     ece:	88 23       	and	r24, r24
     ed0:	11 f4       	brne	.+4      	; 0xed6 <wildcmp+0x36>
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	08 95       	ret
				return 1;

			mp = wild;
			cp = string+1;
     ed6:	9d 01       	movw	r18, r26
     ed8:	2f 5f       	subi	r18, 0xFF	; 255
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	af 01       	movw	r20, r30
     ede:	10 c0       	rjmp	.+32     	; 0xf00 <wildcmp+0x60>
		}
		else if ((*wild == *string) || (*wild== '?'))
     ee0:	89 17       	cp	r24, r25
     ee2:	11 f0       	breq	.+4      	; 0xee8 <wildcmp+0x48>
     ee4:	8f 33       	cpi	r24, 0x3F	; 63
     ee6:	19 f4       	brne	.+6      	; 0xeee <wildcmp+0x4e>
		{
			wild++;
     ee8:	31 96       	adiw	r30, 0x01	; 1
			string++;
     eea:	11 96       	adiw	r26, 0x01	; 1
     eec:	09 c0       	rjmp	.+18     	; 0xf00 <wildcmp+0x60>
		}
		else
		{
			wild = mp;
			string = cp++;
     eee:	fa 01       	movw	r30, r20
     ef0:	d9 01       	movw	r26, r18
     ef2:	2f 5f       	subi	r18, 0xFF	; 255
     ef4:	3f 4f       	sbci	r19, 0xFF	; 255
     ef6:	04 c0       	rjmp	.+8      	; 0xf00 <wildcmp+0x60>
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e0       	ldi	r20, 0x00	; 0
     efe:	50 e0       	ldi	r21, 0x00	; 0

		wild++;
		string++;
	}

	while (*string)
     f00:	9c 91       	ld	r25, X
     f02:	99 23       	and	r25, r25
     f04:	f9 f6       	brne	.-66     	; 0xec4 <wildcmp+0x24>
     f06:	01 c0       	rjmp	.+2      	; 0xf0a <wildcmp+0x6a>
			string = cp++;
		}
	}

	while (*wild == '*')
		wild++;
     f08:	31 96       	adiw	r30, 0x01	; 1
			wild = mp;
			string = cp++;
		}
	}

	while (*wild == '*')
     f0a:	90 81       	ld	r25, Z
     f0c:	9a 32       	cpi	r25, 0x2A	; 42
     f0e:	e1 f3       	breq	.-8      	; 0xf08 <wildcmp+0x68>
		wild++;
  return !(*wild);
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	99 23       	and	r25, r25
     f14:	09 f4       	brne	.+2      	; 0xf18 <wildcmp+0x78>
     f16:	81 e0       	ldi	r24, 0x01	; 1
}
     f18:	08 95       	ret

00000f1a <print_menu>:
    return 1;
}

void print_menu(void)
{
	uart_puts_p(PSTR("\nOpenLog v1.61\n"));
     f1a:	89 ec       	ldi	r24, 0xC9	; 201
     f1c:	98 e0       	ldi	r25, 0x08	; 8
     f1e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	uart_puts_p(PSTR("Available commands:\n"));
     f22:	84 eb       	ldi	r24, 0xB4	; 180
     f24:	98 e0       	ldi	r25, 0x08	; 8
     f26:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	uart_puts_p(PSTR("new <file>\t\t: Creates <file>\n"));
     f2a:	86 e9       	ldi	r24, 0x96	; 150
     f2c:	98 e0       	ldi	r25, 0x08	; 8
     f2e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	uart_puts_p(PSTR("append <file>\t\t: Appends text to end of <file>. The text is read from the UART in a stream and is not echoed. Finish by sending Ctrl+z (ASCII 26)\n"));
     f32:	83 e0       	ldi	r24, 0x03	; 3
     f34:	98 e0       	ldi	r25, 0x08	; 8
     f36:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	uart_puts_p(PSTR("write <file> <offset>\t: Writes text to <file>, starting from <offset>. The text is read from the UART, line by line. Finish with an empty line\n"));
     f3a:	83 e7       	ldi	r24, 0x73	; 115
     f3c:	97 e0       	ldi	r25, 0x07	; 7
     f3e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	uart_puts_p(PSTR("rm <file>\t\t: Deletes <file>. Use wildcard to do a wildcard removal of files\n"));
     f42:	86 e2       	ldi	r24, 0x26	; 38
     f44:	97 e0       	ldi	r25, 0x07	; 7
     f46:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	uart_puts_p(PSTR("md <directory>\t: Creates a directory called <directory>\n"));
     f4a:	8d ee       	ldi	r24, 0xED	; 237
     f4c:	96 e0       	ldi	r25, 0x06	; 6
     f4e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	uart_puts_p(PSTR("cd <directory>\t\t: Changes current working directory to <directory>\n"));
     f52:	89 ea       	ldi	r24, 0xA9	; 169
     f54:	96 e0       	ldi	r25, 0x06	; 6
     f56:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	uart_puts_p(PSTR("cd ..\t\t: Changes to lower directory in tree\n"));
     f5a:	8c e7       	ldi	r24, 0x7C	; 124
     f5c:	96 e0       	ldi	r25, 0x06	; 6
     f5e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	uart_puts_p(PSTR("ls\t\t\t: Shows the content of the current directory. Use wildcard to do a wildcard listing of files in current directory\n"));
     f62:	84 e0       	ldi	r24, 0x04	; 4
     f64:	96 e0       	ldi	r25, 0x06	; 6
     f66:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	uart_puts_p(PSTR("cat <file>\t\t: Writes a hexdump of <file> to the terminal\n"));
     f6a:	8a ec       	ldi	r24, 0xCA	; 202
     f6c:	95 e0       	ldi	r25, 0x05	; 5
     f6e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	uart_puts_p(PSTR("read <file> <start> <length>\t\t: Writes ASCII <length> parts of <file> to the terminal starting at <start>. Ommit <start> and <length> to read whole file\n"));
     f72:	80 e3       	ldi	r24, 0x30	; 48
     f74:	95 e0       	ldi	r25, 0x05	; 5
     f76:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	uart_puts_p(PSTR("size <file>\t\t: Write size of file to terminal\n"));
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	95 e0       	ldi	r25, 0x05	; 5
     f7e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	uart_puts_p(PSTR("disk\t\t\t: Shows card manufacturer, status, filesystem capacity and free storage space\n"));
     f82:	8b ea       	ldi	r24, 0xAB	; 171
     f84:	94 e0       	ldi	r25, 0x04	; 4
     f86:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	uart_puts_p(PSTR("init\t\t\t: Reinitializes and reopens the memory card\n"));
     f8a:	87 e7       	ldi	r24, 0x77	; 119
     f8c:	94 e0       	ldi	r25, 0x04	; 4
     f8e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	uart_puts_p(PSTR("sync\t\t\t: Ensures all buffered data is written to the card\n"));
     f92:	8c e3       	ldi	r24, 0x3C	; 60
     f94:	94 e0       	ldi	r25, 0x04	; 4
     f96:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>

	uart_puts_p(PSTR("\nMenus:\n"));
     f9a:	83 e3       	ldi	r24, 0x33	; 51
     f9c:	94 e0       	ldi	r25, 0x04	; 4
     f9e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	uart_puts_p(PSTR("set\t\t\t: Menu to configure system boot mode\n"));
     fa2:	87 e0       	ldi	r24, 0x07	; 7
     fa4:	94 e0       	ldi	r25, 0x04	; 4
     fa6:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	uart_puts_p(PSTR("baud\t\t\t: Menu to configure baud rate\n"));
     faa:	81 ee       	ldi	r24, 0xE1	; 225
     fac:	93 e0       	ldi	r25, 0x03	; 3
     fae:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
}
     fb2:	08 95       	ret

00000fb4 <too_many_arguments_error>:

//Call this function to ensure the number of parameters do not
//exceed limit. The main purpose of this function is to avoid
//entering file names containing spaces.
uint8_t too_many_arguments_error(uint8_t limit, char* command)
{
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	18 2f       	mov	r17, r24
     fbe:	eb 01       	movw	r28, r22
	uint8_t count;
	if ((count = count_cmd_args()) > limit)
     fc0:	0e 94 10 07 	call	0xe20	; 0xe20 <count_cmd_args>
     fc4:	08 2f       	mov	r16, r24
     fc6:	18 17       	cp	r17, r24
     fc8:	10 f0       	brcs	.+4      	; 0xfce <too_many_arguments_error+0x1a>
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	13 c0       	rjmp	.+38     	; 0xff4 <too_many_arguments_error+0x40>
	{
		uart_puts_p(PSTR("too many arguments("));
     fce:	8c e6       	ldi	r24, 0x6C	; 108
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_putw_dec(count);
     fd6:	80 2f       	mov	r24, r16
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <uart_putw_dec>
		uart_puts_p(PSTR("): "));
     fde:	88 e6       	ldi	r24, 0x68	; 104
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts(command);
     fe6:	ce 01       	movw	r24, r28
     fe8:	0e 94 12 2c 	call	0x5824	; 0x5824 <uart_puts>
		uart_putc('\n');
     fec:	8a e0       	ldi	r24, 0x0A	; 10
     fee:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
     ff2:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}

	return 0;
}
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	08 95       	ret

00000ffe <split_cmd_line_args>:
//	arg[0] -> read
//	arg[1] -> <filename>
//	arg[2] -> <start>
//	arg[3] -> <end>
uint8_t split_cmd_line_args(char* buffer, uint8_t buffer_length)
{
     ffe:	ef 92       	push	r14
    1000:	ff 92       	push	r15
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	7c 01       	movw	r14, r24
    100c:	06 2f       	mov	r16, r22
	uint8_t arg_index_start = 0;
	uint8_t arg_index_end = 1;

	//Reset command line arguments
	memset(cmd_arg, 0, sizeof(cmd_arg));
    100e:	8c e0       	ldi	r24, 0x0C	; 12
    1010:	ee ea       	ldi	r30, 0xAE	; 174
    1012:	f1 e0       	ldi	r31, 0x01	; 1
    1014:	df 01       	movw	r26, r30
    1016:	1d 92       	st	X+, r1
    1018:	8a 95       	dec	r24
    101a:	e9 f7       	brne	.-6      	; 0x1016 <split_cmd_line_args+0x18>
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	11 e0       	ldi	r17, 0x01	; 1
	{
		//Search for ASCII 32 (Space)
		if ((buffer[arg_index_end] == ' ') || (arg_index_end + 1 == buffer_length))
		{
			//Fix for last character
			if (arg_index_end + 1 == buffer_length)
    1020:	c6 2f       	mov	r28, r22
    1022:	d0 e0       	ldi	r29, 0x00	; 0
    1024:	1e c0       	rjmp	.+60     	; 0x1062 <split_cmd_line_args+0x64>

	//Split the command line arguments
	while (arg_index_end < buffer_length)
	{
		//Search for ASCII 32 (Space)
		if ((buffer[arg_index_end] == ' ') || (arg_index_end + 1 == buffer_length))
    1026:	21 2f       	mov	r18, r17
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	f7 01       	movw	r30, r14
    102c:	e2 0f       	add	r30, r18
    102e:	f3 1f       	adc	r31, r19
    1030:	80 81       	ld	r24, Z
    1032:	80 32       	cpi	r24, 0x20	; 32
    1034:	29 f0       	breq	.+10     	; 0x1040 <split_cmd_line_args+0x42>
    1036:	2f 5f       	subi	r18, 0xFF	; 255
    1038:	3f 4f       	sbci	r19, 0xFF	; 255
    103a:	2c 17       	cp	r18, r28
    103c:	3d 07       	cpc	r19, r29
    103e:	81 f4       	brne	.+32     	; 0x1060 <split_cmd_line_args+0x62>
		{
			//Fix for last character
			if (arg_index_end + 1 == buffer_length)
    1040:	81 2f       	mov	r24, r17
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	8c 17       	cp	r24, r28
    1048:	9d 07       	cpc	r25, r29
    104a:	09 f4       	brne	.+2      	; 0x104e <split_cmd_line_args+0x50>
    104c:	10 2f       	mov	r17, r16
				arg_index_end = buffer_length;

			//Add this command line argument to the list
			add_cmd_arg(&(buffer[arg_index_start]), (arg_index_end - arg_index_start));
    104e:	61 2f       	mov	r22, r17
    1050:	64 1b       	sub	r22, r20
    1052:	c7 01       	movw	r24, r14
    1054:	84 0f       	add	r24, r20
    1056:	91 1d       	adc	r25, r1
    1058:	0e 94 21 07 	call	0xe42	; 0xe42 <add_cmd_arg>
			arg_index_start = ++arg_index_end;
    105c:	1f 5f       	subi	r17, 0xFF	; 255
    105e:	41 2f       	mov	r20, r17
		}

		arg_index_end++;
    1060:	1f 5f       	subi	r17, 0xFF	; 255

	//Reset command line arguments
	memset(cmd_arg, 0, sizeof(cmd_arg));

	//Split the command line arguments
	while (arg_index_end < buffer_length)
    1062:	10 17       	cp	r17, r16
    1064:	00 f3       	brcs	.-64     	; 0x1026 <split_cmd_line_args+0x28>

		arg_index_end++;
	}

	//Return the number of available command line arguments
	return count_cmd_args();
    1066:	0e 94 10 07 	call	0xe20	; 0xe20 <count_cmd_args>
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	ff 90       	pop	r15
    1074:	ef 90       	pop	r14
    1076:	08 95       	ret

00001078 <get_cmd_arg>:
	return count;
}

//Safe index handling of command line arguments
char* get_cmd_arg(uint8_t index)
{
    1078:	98 2f       	mov	r25, r24
	memset(general_buffer, 0, sizeof(general_buffer));
    107a:	89 e1       	ldi	r24, 0x19	; 25
    107c:	ea e4       	ldi	r30, 0x4A	; 74
    107e:	f7 e0       	ldi	r31, 0x07	; 7
    1080:	df 01       	movw	r26, r30
    1082:	1d 92       	st	X+, r1
    1084:	8a 95       	dec	r24
    1086:	e9 f7       	brne	.-6      	; 0x1082 <get_cmd_arg+0xa>
	if (index < MAX_COUNT_COMMAND_LINE_ARGS)
    1088:	94 30       	cpi	r25, 0x04	; 4
    108a:	e8 f4       	brcc	.+58     	; 0x10c6 <get_cmd_arg+0x4e>
		if ((cmd_arg[index].arg != 0) && (cmd_arg[index].arg_length > 0))
    108c:	89 2f       	mov	r24, r25
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	fc 01       	movw	r30, r24
    1092:	ee 0f       	add	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	e8 0f       	add	r30, r24
    1098:	f9 1f       	adc	r31, r25
    109a:	e2 55       	subi	r30, 0x52	; 82
    109c:	fe 4f       	sbci	r31, 0xFE	; 254
    109e:	60 81       	ld	r22, Z
    10a0:	71 81       	ldd	r23, Z+1	; 0x01
    10a2:	61 15       	cp	r22, r1
    10a4:	71 05       	cpc	r23, r1
    10a6:	79 f0       	breq	.+30     	; 0x10c6 <get_cmd_arg+0x4e>
    10a8:	42 81       	ldd	r20, Z+2	; 0x02
    10aa:	44 23       	and	r20, r20
    10ac:	61 f0       	breq	.+24     	; 0x10c6 <get_cmd_arg+0x4e>
			return strncpy(general_buffer, cmd_arg[index].arg, MIN(sizeof(general_buffer), cmd_arg[index].arg_length));
    10ae:	4a 31       	cpi	r20, 0x1A	; 26
    10b0:	18 f0       	brcs	.+6      	; 0x10b8 <get_cmd_arg+0x40>
    10b2:	49 e1       	ldi	r20, 0x19	; 25
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <get_cmd_arg+0x42>
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	8a e4       	ldi	r24, 0x4A	; 74
    10bc:	97 e0       	ldi	r25, 0x07	; 7
    10be:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <strncpy>
    10c2:	9c 01       	movw	r18, r24
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <get_cmd_arg+0x52>
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0

	return 0;
}
    10ca:	c9 01       	movw	r24, r18
    10cc:	08 95       	ret

000010ce <read_line>:
	
}

//Reads a line until the \n enter character is found
uint8_t read_line(char* buffer, uint8_t buffer_length)
{
    10ce:	bf 92       	push	r11
    10d0:	cf 92       	push	r12
    10d2:	df 92       	push	r13
    10d4:	ef 92       	push	r14
    10d6:	ff 92       	push	r15
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	ec 01       	movw	r28, r24
    10e2:	b6 2e       	mov	r11, r22
    memset(buffer, 0, buffer_length);
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	4b 2d       	mov	r20, r11
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <memset>
    10f0:	00 e0       	ldi	r16, 0x00	; 0

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
    10f2:	cb 2c       	mov	r12, r11
    10f4:	dd 24       	eor	r13, r13
    10f6:	08 94       	sec
    10f8:	c1 08       	sbc	r12, r1
    10fa:	d1 08       	sbc	r13, r1
    10fc:	23 c0       	rjmp	.+70     	; 0x1144 <read_line+0x76>
    {
        uint8_t c = uart_getc();
    10fe:	0e 94 2d 2c 	call	0x585a	; 0x585a <uart_getc>
    1102:	18 2f       	mov	r17, r24

		//PORTD ^= (1<<STAT1); //Blink the stat LED while typing - this is taken care of in the UART ISR
		//PORTB ^= (1<<STAT2); //Blink the stat LED while typing - I don't want the SPI lines toggling

        if(c == 0x08 || c == 0x7f)
    1104:	88 30       	cpi	r24, 0x08	; 8
    1106:	11 f0       	breq	.+4      	; 0x110c <read_line+0x3e>
    1108:	8f 37       	cpi	r24, 0x7F	; 127
    110a:	89 f4       	brne	.+34     	; 0x112e <read_line+0x60>
        {
            if(read_length < 1)
    110c:	00 23       	and	r16, r16
    110e:	d1 f0       	breq	.+52     	; 0x1144 <read_line+0x76>
                continue;

            --read_length;
    1110:	01 50       	subi	r16, 0x01	; 1
            buffer[read_length] = '\0';
    1112:	fe 01       	movw	r30, r28
    1114:	e0 0f       	add	r30, r16
    1116:	f1 1d       	adc	r31, r1
    1118:	10 82       	st	Z, r1

            uart_putc(0x08);
    111a:	88 e0       	ldi	r24, 0x08	; 8
    111c:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
            uart_putc(' ');
    1120:	80 e2       	ldi	r24, 0x20	; 32
    1122:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
            uart_putc(0x08);
    1126:	88 e0       	ldi	r24, 0x08	; 8
    1128:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    112c:	0b c0       	rjmp	.+22     	; 0x1144 <read_line+0x76>

            continue;
        }

        uart_putc(c);
    112e:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    1132:	fe 01       	movw	r30, r28
    1134:	ee 0d       	add	r30, r14
    1136:	ff 1d       	adc	r31, r15

        if(c == '\n')
    1138:	1a 30       	cpi	r17, 0x0A	; 10
    113a:	11 f4       	brne	.+4      	; 0x1140 <read_line+0x72>
        {
            buffer[read_length] = '\0';
    113c:	10 82       	st	Z, r1
    113e:	07 c0       	rjmp	.+14     	; 0x114e <read_line+0x80>
            break;
        }
        else
        {
            buffer[read_length] = c;
    1140:	10 83       	st	Z, r17
            ++read_length;
    1142:	0f 5f       	subi	r16, 0xFF	; 255
uint8_t read_line(char* buffer, uint8_t buffer_length)
{
    memset(buffer, 0, buffer_length);

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
    1144:	e0 2e       	mov	r14, r16
    1146:	ff 24       	eor	r15, r15
    1148:	ec 14       	cp	r14, r12
    114a:	fd 04       	cpc	r15, r13
    114c:	c4 f2       	brlt	.-80     	; 0x10fe <read_line+0x30>
            ++read_length;
        }
    }

	//Split the command line into arguments
	split_cmd_line_args(buffer, buffer_length);
    114e:	ce 01       	movw	r24, r28
    1150:	6b 2d       	mov	r22, r11
    1152:	0e 94 ff 07 	call	0xffe	; 0xffe <split_cmd_line_args>

    return read_length;
}
    1156:	80 2f       	mov	r24, r16
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	ff 90       	pop	r15
    1162:	ef 90       	pop	r14
    1164:	df 90       	pop	r13
    1166:	cf 90       	pop	r12
    1168:	bf 90       	pop	r11
    116a:	08 95       	ret

0000116c <read_buffer>:
}


//Reads a larger buffer of characters until the ctrl+z (ascii 26) character is received
uint8_t read_buffer(char* buffer, uint8_t buffer_length)
{
    116c:	cf 92       	push	r12
    116e:	df 92       	push	r13
    1170:	ef 92       	push	r14
    1172:	ff 92       	push	r15
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	ec 01       	movw	r28, r24
    117e:	16 2f       	mov	r17, r22
    memset(buffer, 0, buffer_length);
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	41 2f       	mov	r20, r17
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <memset>
    118c:	00 e0       	ldi	r16, 0x00	; 0

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
    118e:	c1 2e       	mov	r12, r17
    1190:	dd 24       	eor	r13, r13
    1192:	08 94       	sec
    1194:	c1 08       	sbc	r12, r1
    1196:	d1 08       	sbc	r13, r1
    1198:	23 c0       	rjmp	.+70     	; 0x11e0 <read_buffer+0x74>
    {
        uint8_t c = uart_getc();
    119a:	0e 94 2d 2c 	call	0x585a	; 0x585a <uart_getc>
    119e:	18 2f       	mov	r17, r24

        if(c == 0x08 || c == 0x7f)
    11a0:	88 30       	cpi	r24, 0x08	; 8
    11a2:	11 f0       	breq	.+4      	; 0x11a8 <read_buffer+0x3c>
    11a4:	8f 37       	cpi	r24, 0x7F	; 127
    11a6:	89 f4       	brne	.+34     	; 0x11ca <read_buffer+0x5e>
        {
            if(read_length < 1)
    11a8:	00 23       	and	r16, r16
    11aa:	d1 f0       	breq	.+52     	; 0x11e0 <read_buffer+0x74>
                continue;

            --read_length;
    11ac:	01 50       	subi	r16, 0x01	; 1
            buffer[read_length] = '\0';
    11ae:	fe 01       	movw	r30, r28
    11b0:	e0 0f       	add	r30, r16
    11b2:	f1 1d       	adc	r31, r1
    11b4:	10 82       	st	Z, r1

            uart_putc(0x08);
    11b6:	88 e0       	ldi	r24, 0x08	; 8
    11b8:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
            uart_putc(' ');
    11bc:	80 e2       	ldi	r24, 0x20	; 32
    11be:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
            uart_putc(0x08);
    11c2:	88 e0       	ldi	r24, 0x08	; 8
    11c4:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    11c8:	0b c0       	rjmp	.+22     	; 0x11e0 <read_buffer+0x74>

            continue;
        }

        uart_putc(c);
    11ca:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    11ce:	fe 01       	movw	r30, r28
    11d0:	ee 0d       	add	r30, r14
    11d2:	ff 1d       	adc	r31, r15

        //if(c == '\n')
        if(c == 26)
    11d4:	1a 31       	cpi	r17, 0x1A	; 26
    11d6:	11 f4       	brne	.+4      	; 0x11dc <read_buffer+0x70>
        {
            buffer[read_length] = '\0';
    11d8:	10 82       	st	Z, r1
    11da:	07 c0       	rjmp	.+14     	; 0x11ea <read_buffer+0x7e>
            break;
        }
        else
        {
            buffer[read_length] = c;
    11dc:	10 83       	st	Z, r17
            ++read_length;
    11de:	0f 5f       	subi	r16, 0xFF	; 255
uint8_t read_buffer(char* buffer, uint8_t buffer_length)
{
    memset(buffer, 0, buffer_length);

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
    11e0:	e0 2e       	mov	r14, r16
    11e2:	ff 24       	eor	r15, r15
    11e4:	ec 14       	cp	r14, r12
    11e6:	fd 04       	cpc	r15, r13
    11e8:	c4 f2       	brlt	.-80     	; 0x119a <read_buffer+0x2e>
            ++read_length;
        }
    }

    return read_length;
}
    11ea:	80 2f       	mov	r24, r16
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	df 90       	pop	r13
    11fa:	cf 90       	pop	r12
    11fc:	08 95       	ret

000011fe <init_media>:
}


//Inits the SD interface, opens file system, opens root dir, and checks card info if wanted
void init_media(void)
{
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	ab 97       	sbiw	r28, 0x2b	; 43
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
	/* setup sd card slot */
	if(!sd_raw_init())
    1216:	0e 94 3d 1a 	call	0x347a	; 0x347a <sd_raw_init>
    121a:	88 23       	and	r24, r24
    121c:	19 f4       	brne	.+6      	; 0x1224 <init_media+0x26>
	{
#if DEBUG
		uart_puts_p(PSTR("MMC/SD initialization failed\n"));
#endif
		blink_error(ERROR_SD_INIT);
    121e:	83 e0       	ldi	r24, 0x03	; 3
    1220:	0e 94 ce 06 	call	0xd9c	; 0xd9c <blink_error>
		//continue;
	}

	//Make sure all file handles are cleared
	fat_clear_handles();
    1224:	0e 94 72 20 	call	0x40e4	; 0x40e4 <fat_clear_handles>

	/* open first partition */
	partition = partition_open(sd_raw_read,
    1228:	8f e0       	ldi	r24, 0x0F	; 15
    122a:	99 e1       	ldi	r25, 0x19	; 25
    122c:	6d ec       	ldi	r22, 0xCD	; 205
    122e:	79 e1       	ldi	r23, 0x19	; 25
    1230:	4f e1       	ldi	r20, 0x1F	; 31
    1232:	58 e1       	ldi	r21, 0x18	; 24
    1234:	26 ed       	ldi	r18, 0xD6	; 214
    1236:	3a e1       	ldi	r19, 0x1A	; 26
    1238:	00 e0       	ldi	r16, 0x00	; 0
    123a:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <partition_open>
    123e:	90 93 8a 04 	sts	0x048A, r25
    1242:	80 93 89 04 	sts	0x0489, r24
								0,
#endif
								0
								);

	if(!partition)
    1246:	89 2b       	or	r24, r25
    1248:	79 f4       	brne	.+30     	; 0x1268 <init_media+0x6a>
	{
		/* If the partition did not open, assume the storage device
		 * is a "superfloppy", i.e. has no MBR.
		 */
		partition = partition_open(sd_raw_read,
    124a:	8f e0       	ldi	r24, 0x0F	; 15
    124c:	99 e1       	ldi	r25, 0x19	; 25
    124e:	6d ec       	ldi	r22, 0xCD	; 205
    1250:	79 e1       	ldi	r23, 0x19	; 25
    1252:	4f e1       	ldi	r20, 0x1F	; 31
    1254:	58 e1       	ldi	r21, 0x18	; 24
    1256:	26 ed       	ldi	r18, 0xD6	; 214
    1258:	3a e1       	ldi	r19, 0x1A	; 26
    125a:	0f ef       	ldi	r16, 0xFF	; 255
    125c:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <partition_open>
    1260:	90 93 8a 04 	sts	0x048A, r25
    1264:	80 93 89 04 	sts	0x0489, r24
			//continue;
		}
	}

	/* open file system */
	fs = fat_open(partition);
    1268:	80 91 89 04 	lds	r24, 0x0489
    126c:	90 91 8a 04 	lds	r25, 0x048A
    1270:	0e 94 cd 21 	call	0x439a	; 0x439a <fat_open>
    1274:	90 93 81 04 	sts	0x0481, r25
    1278:	80 93 80 04 	sts	0x0480, r24
		//continue;
	}

	/* open root directory */
	struct fat_dir_entry_struct directory;
	fat_get_dir_entry_of_path(fs, "/", &directory);
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	71 e0       	ldi	r23, 0x01	; 1
    1280:	8e 01       	movw	r16, r28
    1282:	0f 5f       	subi	r16, 0xFF	; 255
    1284:	1f 4f       	sbci	r17, 0xFF	; 255
    1286:	a8 01       	movw	r20, r16
    1288:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <fat_get_dir_entry_of_path>

	dd = fat_open_dir(fs, &directory);
    128c:	80 91 80 04 	lds	r24, 0x0480
    1290:	90 91 81 04 	lds	r25, 0x0481
    1294:	b8 01       	movw	r22, r16
    1296:	0e 94 f5 29 	call	0x53ea	; 0x53ea <fat_open_dir>
    129a:	90 93 48 07 	sts	0x0748, r25
    129e:	80 93 47 07 	sts	0x0747, r24

#if DEBUG
	uart_puts_p(PSTR("Media Init Complete!\n"));
#endif
	
}
    12a2:	ab 96       	adiw	r28, 0x2b	; 43
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	08 95       	ret

000012b8 <find_file_in_dir>:

    return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry, uint8_t use_wild_card)
{
    12b8:	cf 92       	push	r12
    12ba:	df 92       	push	r13
    12bc:	ff 92       	push	r15
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	6b 01       	movw	r12, r22
    12c8:	ea 01       	movw	r28, r20
    12ca:	f2 2e       	mov	r15, r18
    12cc:	13 2f       	mov	r17, r19
    12ce:	15 c0       	rjmp	.+42     	; 0x12fa <find_file_in_dir+0x42>
    while(fat_read_dir(dd, dir_entry))
    12d0:	8f 2d       	mov	r24, r15
    12d2:	91 2f       	mov	r25, r17
    12d4:	be 01       	movw	r22, r28
    12d6:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <strcmp>
    {
        if((strcmp(dir_entry->long_name, name) == 0) || ((use_wild_card == 1) && (wildcmp(name, dir_entry->long_name) == 1)))
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	49 f0       	breq	.+18     	; 0x12f0 <find_file_in_dir+0x38>
    12de:	01 30       	cpi	r16, 0x01	; 1
    12e0:	61 f4       	brne	.+24     	; 0x12fa <find_file_in_dir+0x42>
    12e2:	ce 01       	movw	r24, r28
    12e4:	6f 2d       	mov	r22, r15
    12e6:	71 2f       	mov	r23, r17
    12e8:	0e 94 50 07 	call	0xea0	; 0xea0 <wildcmp>
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	29 f4       	brne	.+10     	; 0x12fa <find_file_in_dir+0x42>
        {
            fat_reset_dir(dd);
    12f0:	c6 01       	movw	r24, r12
    12f2:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <fat_reset_dir>
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	07 c0       	rjmp	.+14     	; 0x1308 <find_file_in_dir+0x50>
    return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry, uint8_t use_wild_card)
{
    while(fat_read_dir(dd, dir_entry))
    12fa:	c6 01       	movw	r24, r12
    12fc:	6f 2d       	mov	r22, r15
    12fe:	71 2f       	mov	r23, r17
    1300:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <fat_read_dir>
    1304:	88 23       	and	r24, r24
    1306:	21 f7       	brne	.-56     	; 0x12d0 <find_file_in_dir+0x18>
            return 1;
        }
    }

    return 0;
}
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	ff 90       	pop	r15
    1312:	df 90       	pop	r13
    1314:	cf 90       	pop	r12
    1316:	08 95       	ret

00001318 <open_file_in_dir>:

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
    1318:	cf 92       	push	r12
    131a:	df 92       	push	r13
    131c:	ef 92       	push	r14
    131e:	ff 92       	push	r15
    1320:	0f 93       	push	r16
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	ab 97       	sbiw	r28, 0x2b	; 43
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	7c 01       	movw	r14, r24
	struct fat_dir_entry_struct file_entry;
	//Do not use wildcards here
	if(!find_file_in_dir(fs, dd, name, &file_entry, 0))
    1338:	6e 01       	movw	r12, r28
    133a:	08 94       	sec
    133c:	c1 1c       	adc	r12, r1
    133e:	d1 1c       	adc	r13, r1
    1340:	96 01       	movw	r18, r12
    1342:	00 e0       	ldi	r16, 0x00	; 0
    1344:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <find_file_in_dir>
    1348:	88 23       	and	r24, r24
    134a:	19 f4       	brne	.+6      	; 0x1352 <open_file_in_dir+0x3a>
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	05 c0       	rjmp	.+10     	; 0x135c <open_file_in_dir+0x44>
		return 0;

	return fat_open_file(fs, &file_entry);
    1352:	c7 01       	movw	r24, r14
    1354:	b6 01       	movw	r22, r12
    1356:	0e 94 32 2a 	call	0x5464	; 0x5464 <fat_open_file>
    135a:	9c 01       	movw	r18, r24
}
    135c:	c9 01       	movw	r24, r18
    135e:	ab 96       	adiw	r28, 0x2b	; 43
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	0f 91       	pop	r16
    1370:	ff 90       	pop	r15
    1372:	ef 90       	pop	r14
    1374:	df 90       	pop	r13
    1376:	cf 90       	pop	r12
    1378:	08 95       	ret

0000137a <append_file>:
//data even at 115200bps
//Does not exit until Ctrl+z (ASCII 26) is received
//Returns 0 on error
//Returns 1 on success
uint8_t append_file(char* file_name)
{
    137a:	ef 92       	push	r14
    137c:	ff 92       	push	r15
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	00 d0       	rcall	.+0      	; 0x1388 <append_file+0xe>
    1388:	00 d0       	rcall	.+0      	; 0x138a <append_file+0x10>
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	8c 01       	movw	r16, r24

	//search file in current directory and open it 
	struct fat_file_struct* fd = open_file_in_dir(fs, dd, file_name);
    1390:	60 91 47 07 	lds	r22, 0x0747
    1394:	70 91 48 07 	lds	r23, 0x0748
    1398:	80 91 80 04 	lds	r24, 0x0480
    139c:	90 91 81 04 	lds	r25, 0x0481
    13a0:	a8 01       	movw	r20, r16
    13a2:	0e 94 8c 09 	call	0x1318	; 0x1318 <open_file_in_dir>
    13a6:	7c 01       	movw	r14, r24
	if(!fd)
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	59 f4       	brne	.+22     	; 0x13c2 <append_file+0x48>
	{
		uart_puts_p(PSTR("!error opening "));
    13ac:	88 e7       	ldi	r24, 0x78	; 120
    13ae:	99 e0       	ldi	r25, 0x09	; 9
    13b0:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts(file_name);
    13b4:	c8 01       	movw	r24, r16
    13b6:	0e 94 12 2c 	call	0x5824	; 0x5824 <uart_puts>
		uart_putc('\n');
    13ba:	8a e0       	ldi	r24, 0x0A	; 10
    13bc:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    13c0:	19 c0       	rjmp	.+50     	; 0x13f4 <append_file+0x7a>
	}

#if DEBUG
	uart_puts_p(PSTR("File open\n"));
#endif
	int32_t offset = 0;
    13c2:	19 82       	std	Y+1, r1	; 0x01
    13c4:	1a 82       	std	Y+2, r1	; 0x02
    13c6:	1b 82       	std	Y+3, r1	; 0x03
    13c8:	1c 82       	std	Y+4, r1	; 0x04
	//Seeks the end of the file : offset = EOF location
	if(!fat_seek_file(fd, &offset, FAT_SEEK_END))
    13ca:	be 01       	movw	r22, r28
    13cc:	6f 5f       	subi	r22, 0xFF	; 255
    13ce:	7f 4f       	sbci	r23, 0xFF	; 255
    13d0:	42 e0       	ldi	r20, 0x02	; 2
    13d2:	0e 94 1c 28 	call	0x5038	; 0x5038 <fat_seek_file>
    13d6:	88 23       	and	r24, r24
    13d8:	79 f4       	brne	.+30     	; 0x13f8 <append_file+0x7e>
	{
		uart_puts_p(PSTR("!error seeking on "));
    13da:	85 e6       	ldi	r24, 0x65	; 101
    13dc:	99 e0       	ldi	r25, 0x09	; 9
    13de:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts(file_name);
    13e2:	c8 01       	movw	r24, r16
    13e4:	0e 94 12 2c 	call	0x5824	; 0x5824 <uart_puts>
		uart_putc('\n');
    13e8:	8a e0       	ldi	r24, 0x0A	; 10
    13ea:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>

		fat_close_file(fd);
    13ee:	c7 01       	movw	r24, r14
    13f0:	0e 94 bc 1c 	call	0x3978	; 0x3978 <fat_close_file>
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	58 c1       	rjmp	.+688    	; 0x16a8 <append_file+0x32e>

#if DEBUG
	uart_puts_p(PSTR("Recording\n"));
#endif
	//give a different prompt to indicate no echoing
	uart_putc('<');
    13f8:	8c e3       	ldi	r24, 0x3C	; 60
    13fa:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>

	sbi(STAT1_PORT, STAT1); //Turn on indicator LED
    13fe:	5d 9a       	sbi	0x0b, 5	; 11

	char escape_chars_received = 0;
	
	read_spot = 0;
    1400:	10 92 84 04 	sts	0x0484, r1
    1404:	10 92 83 04 	sts	0x0483, r1
	checked_spot = 0;
    1408:	10 92 87 04 	sts	0x0487, r1
    140c:	10 92 86 04 	sts	0x0486, r1
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0

	//Clear circular buffer
	for(uint16_t i = 0 ; i < BUFF_LEN ; i++)
		input_buffer[i] = 0;
    1414:	fc 01       	movw	r30, r24
    1416:	e5 57       	subi	r30, 0x75	; 117
    1418:	fb 4f       	sbci	r31, 0xFB	; 251
    141a:	10 82       	st	Z, r1
	
	read_spot = 0;
	checked_spot = 0;

	//Clear circular buffer
	for(uint16_t i = 0 ; i < BUFF_LEN ; i++)
    141c:	01 96       	adiw	r24, 0x01	; 1
    141e:	22 e0       	ldi	r18, 0x02	; 2
    1420:	8c 3b       	cpi	r24, 0xBC	; 188
    1422:	92 07       	cpc	r25, r18
    1424:	b9 f7       	brne	.-18     	; 0x1414 <append_file+0x9a>
		input_buffer[i] = 0;
		
	//Start UART buffered interrupts
	UCSR0B |= (1<<RXCIE0); //Enable receive interrupts
    1426:	80 91 c1 00 	lds	r24, 0x00C1
    142a:	80 68       	ori	r24, 0x80	; 128
    142c:	80 93 c1 00 	sts	0x00C1, r24
	sei(); //Enable interrupts
    1430:	78 94       	sei
    1432:	a6 c0       	rjmp	.+332    	; 0x1580 <append_file+0x206>

		uint16_t timeout_counter = 0;

		while(checked_spot == read_spot) 
		{ 
			if( ++timeout_counter > 5000 ) 
    1434:	0f 5f       	subi	r16, 0xFF	; 255
    1436:	1f 4f       	sbci	r17, 0xFF	; 255
    1438:	83 e1       	ldi	r24, 0x13	; 19
    143a:	09 38       	cpi	r16, 0x89	; 137
    143c:	18 07       	cpc	r17, r24
    143e:	08 f4       	brcc	.+2      	; 0x1442 <append_file+0xc8>
    1440:	9a c0       	rjmp	.+308    	; 0x1576 <append_file+0x1fc>
			{
				timeout_counter = 0;

				if(checked_spot != 0 && checked_spot != (BUFF_LEN/2)) // stuff in buff
    1442:	80 91 86 04 	lds	r24, 0x0486
    1446:	90 91 87 04 	lds	r25, 0x0487
    144a:	89 2b       	or	r24, r25
    144c:	09 f4       	brne	.+2      	; 0x1450 <append_file+0xd6>
    144e:	7b c0       	rjmp	.+246    	; 0x1546 <append_file+0x1cc>
    1450:	80 91 86 04 	lds	r24, 0x0486
    1454:	90 91 87 04 	lds	r25, 0x0487
    1458:	8e 55       	subi	r24, 0x5E	; 94
    145a:	91 40       	sbci	r25, 0x01	; 1
    145c:	09 f4       	brne	.+2      	; 0x1460 <append_file+0xe6>
    145e:	73 c0       	rjmp	.+230    	; 0x1546 <append_file+0x1cc>
				{
					if(checked_spot < (BUFF_LEN/2))
    1460:	80 91 86 04 	lds	r24, 0x0486
    1464:	90 91 87 04 	lds	r25, 0x0487
    1468:	8e 55       	subi	r24, 0x5E	; 94
    146a:	91 40       	sbci	r25, 0x01	; 1
    146c:	98 f4       	brcc	.+38     	; 0x1494 <append_file+0x11a>
					{
						//Record first half the buffer
						if(fat_write_file(fd, (uint8_t*) input_buffer, checked_spot) != checked_spot)
    146e:	40 91 86 04 	lds	r20, 0x0486
    1472:	50 91 87 04 	lds	r21, 0x0487
    1476:	c7 01       	movw	r24, r14
    1478:	6b e8       	ldi	r22, 0x8B	; 139
    147a:	74 e0       	ldi	r23, 0x04	; 4
    147c:	0e 94 78 28 	call	0x50f0	; 0x50f0 <fat_write_file>
    1480:	20 91 86 04 	lds	r18, 0x0486
    1484:	30 91 87 04 	lds	r19, 0x0487
    1488:	82 17       	cp	r24, r18
    148a:	93 07       	cpc	r25, r19
    148c:	d9 f0       	breq	.+54     	; 0x14c4 <append_file+0x14a>
							uart_puts_p(PSTR("error writing to file\n"));
    148e:	8e e4       	ldi	r24, 0x4E	; 78
    1490:	99 e0       	ldi	r25, 0x09	; 9
    1492:	16 c0       	rjmp	.+44     	; 0x14c0 <append_file+0x146>
					}
					else //checked_spot > (BUFF_LEN/2)
					{
						//Record second half the buffer
						if(fat_write_file(fd, (uint8_t*) input_buffer + (BUFF_LEN/2), (checked_spot - (BUFF_LEN/2)) ) != (checked_spot - (BUFF_LEN/2)) )
    1494:	40 91 86 04 	lds	r20, 0x0486
    1498:	50 91 87 04 	lds	r21, 0x0487
    149c:	4e 55       	subi	r20, 0x5E	; 94
    149e:	51 40       	sbci	r21, 0x01	; 1
    14a0:	c7 01       	movw	r24, r14
    14a2:	69 ee       	ldi	r22, 0xE9	; 233
    14a4:	75 e0       	ldi	r23, 0x05	; 5
    14a6:	0e 94 78 28 	call	0x50f0	; 0x50f0 <fat_write_file>
    14aa:	20 91 86 04 	lds	r18, 0x0486
    14ae:	30 91 87 04 	lds	r19, 0x0487
    14b2:	2e 55       	subi	r18, 0x5E	; 94
    14b4:	31 40       	sbci	r19, 0x01	; 1
    14b6:	82 17       	cp	r24, r18
    14b8:	93 07       	cpc	r25, r19
    14ba:	21 f0       	breq	.+8      	; 0x14c4 <append_file+0x14a>
							uart_puts_p(PSTR("error writing to file\n"));
    14bc:	87 e3       	ldi	r24, 0x37	; 55
    14be:	99 e0       	ldi	r25, 0x09	; 9
    14c0:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
					}
					unsigned spot = checked_spot > BUFF_LEN/2 ? BUFF_LEN/2 : 0;
    14c4:	80 91 86 04 	lds	r24, 0x0486
    14c8:	90 91 87 04 	lds	r25, 0x0487
    14cc:	8f 55       	subi	r24, 0x5F	; 95
    14ce:	91 40       	sbci	r25, 0x01	; 1
    14d0:	18 f4       	brcc	.+6      	; 0x14d8 <append_file+0x15e>
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <append_file+0x162>
    14d8:	6e e5       	ldi	r22, 0x5E	; 94
    14da:	71 e0       	ldi	r23, 0x01	; 1
					unsigned sp = spot; // start of new buffer
					
					// read_spot may have moved, copy
					cli();
    14dc:	f8 94       	cli
    14de:	ab 01       	movw	r20, r22
    14e0:	1e c0       	rjmp	.+60     	; 0x151e <append_file+0x1a4>
					
					while(checked_spot != read_spot) 
					{
						input_buffer[spot++] = input_buffer[checked_spot++];
    14e2:	80 91 86 04 	lds	r24, 0x0486
    14e6:	90 91 87 04 	lds	r25, 0x0487
    14ea:	fc 01       	movw	r30, r24
    14ec:	e5 57       	subi	r30, 0x75	; 117
    14ee:	fb 4f       	sbci	r31, 0xFB	; 251
    14f0:	20 81       	ld	r18, Z
    14f2:	fa 01       	movw	r30, r20
    14f4:	e5 57       	subi	r30, 0x75	; 117
    14f6:	fb 4f       	sbci	r31, 0xFB	; 251
    14f8:	20 83       	st	Z, r18
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	90 93 87 04 	sts	0x0487, r25
    1500:	80 93 86 04 	sts	0x0486, r24
						if( checked_spot >= BUFF_LEN )
    1504:	80 91 86 04 	lds	r24, 0x0486
    1508:	90 91 87 04 	lds	r25, 0x0487
    150c:	8c 5b       	subi	r24, 0xBC	; 188
    150e:	92 40       	sbci	r25, 0x02	; 2
    1510:	20 f0       	brcs	.+8      	; 0x151a <append_file+0x1a0>
							checked_spot = 0;
    1512:	10 92 87 04 	sts	0x0487, r1
    1516:	10 92 86 04 	sts	0x0486, r1
					// read_spot may have moved, copy
					cli();
					
					while(checked_spot != read_spot) 
					{
						input_buffer[spot++] = input_buffer[checked_spot++];
    151a:	4f 5f       	subi	r20, 0xFF	; 255
    151c:	5f 4f       	sbci	r21, 0xFF	; 255
					unsigned sp = spot; // start of new buffer
					
					// read_spot may have moved, copy
					cli();
					
					while(checked_spot != read_spot) 
    151e:	20 91 86 04 	lds	r18, 0x0486
    1522:	30 91 87 04 	lds	r19, 0x0487
    1526:	80 91 83 04 	lds	r24, 0x0483
    152a:	90 91 84 04 	lds	r25, 0x0484
    152e:	28 17       	cp	r18, r24
    1530:	39 07       	cpc	r19, r25
    1532:	b9 f6       	brne	.-82     	; 0x14e2 <append_file+0x168>
						input_buffer[spot++] = input_buffer[checked_spot++];
						if( checked_spot >= BUFF_LEN )
							checked_spot = 0;
					}
					
					read_spot = spot; // set insertion to end of copy
    1534:	50 93 84 04 	sts	0x0484, r21
    1538:	40 93 83 04 	sts	0x0483, r20
					checked_spot = sp; // reset checked to beginning of copy
    153c:	70 93 87 04 	sts	0x0487, r23
    1540:	60 93 86 04 	sts	0x0486, r22
					
					sei();
    1544:	78 94       	sei
				}
				
				sd_raw_sync(); //Sync all newly written data to card
    1546:	0e 94 f5 18 	call	0x31ea	; 0x31ea <sd_raw_sync>
    154a:	08 c0       	rjmp	.+16     	; 0x155c <append_file+0x1e2>

				//Hang out while we wait for the interrupt to occur and advance read_spot
				while(checked_spot == read_spot)
				{
					PORTD &= ~(1<<STAT1); //Turn off LED to save more power
    154c:	5d 98       	cbi	0x0b, 5	; 11

					sleep_mode(); //Put CPU to sleep, UART ISR wakes us up
    154e:	83 b7       	in	r24, 0x33	; 51
    1550:	81 60       	ori	r24, 0x01	; 1
    1552:	83 bf       	out	0x33, r24	; 51
    1554:	88 95       	sleep
    1556:	83 b7       	in	r24, 0x33	; 51
    1558:	8e 7f       	andi	r24, 0xFE	; 254
    155a:	83 bf       	out	0x33, r24	; 51
				}
				
				sd_raw_sync(); //Sync all newly written data to card

				//Hang out while we wait for the interrupt to occur and advance read_spot
				while(checked_spot == read_spot)
    155c:	20 91 86 04 	lds	r18, 0x0486
    1560:	30 91 87 04 	lds	r19, 0x0487
    1564:	80 91 83 04 	lds	r24, 0x0483
    1568:	90 91 84 04 	lds	r25, 0x0484
    156c:	28 17       	cp	r18, r24
    156e:	39 07       	cpc	r19, r25
    1570:	69 f3       	breq	.-38     	; 0x154c <append_file+0x1d2>
    1572:	00 e0       	ldi	r16, 0x00	; 0
    1574:	10 e0       	ldi	r17, 0x00	; 0
					sleep_mode(); //Put CPU to sleep, UART ISR wakes us up
					//delay_ms(1); 
				}
			}

			delay_ms(1); //Hang out while we wait for the interrupt to occur and advance read_spot
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	0e 94 c0 06 	call	0xd80	; 0xd80 <delay_ms>
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <append_file+0x20a>
    1580:	00 e0       	ldi	r16, 0x00	; 0
    1582:	10 e0       	ldi	r17, 0x00	; 0

//fail		while(checked_spot == read_spot) asm("nop"); //Hang out while we wait for the interrupt to occur and advance read_spot

		uint16_t timeout_counter = 0;

		while(checked_spot == read_spot) 
    1584:	20 91 86 04 	lds	r18, 0x0486
    1588:	30 91 87 04 	lds	r19, 0x0487
    158c:	80 91 83 04 	lds	r24, 0x0483
    1590:	90 91 84 04 	lds	r25, 0x0484
    1594:	28 17       	cp	r18, r24
    1596:	39 07       	cpc	r19, r25
    1598:	09 f4       	brne	.+2      	; 0x159c <append_file+0x222>
    159a:	4c cf       	rjmp	.-360    	; 0x1434 <append_file+0xba>
			}

			delay_ms(1); //Hang out while we wait for the interrupt to occur and advance read_spot
		}

		if(input_buffer[checked_spot] == setting_escape_character) //Scan for escape character
    159c:	e0 91 86 04 	lds	r30, 0x0486
    15a0:	f0 91 87 04 	lds	r31, 0x0487
    15a4:	e5 57       	subi	r30, 0x75	; 117
    15a6:	fb 4f       	sbci	r31, 0xFB	; 251
    15a8:	e0 81       	ld	r30, Z
			}*/
		}
		else
			escape_chars_received = 0;
		
		checked_spot++;
    15aa:	80 91 86 04 	lds	r24, 0x0486
    15ae:	90 91 87 04 	lds	r25, 0x0487
    15b2:	01 96       	adiw	r24, 0x01	; 1
    15b4:	90 93 87 04 	sts	0x0487, r25
    15b8:	80 93 86 04 	sts	0x0486, r24

		if(checked_spot == (BUFF_LEN/2)) //We've finished checking the first half the buffer
    15bc:	80 91 86 04 	lds	r24, 0x0486
    15c0:	90 91 87 04 	lds	r25, 0x0487
    15c4:	8e 55       	subi	r24, 0x5E	; 94
    15c6:	91 40       	sbci	r25, 0x01	; 1
    15c8:	69 f4       	brne	.+26     	; 0x15e4 <append_file+0x26a>
		{
			//Record first half the buffer
			if(fat_write_file(fd, (uint8_t*) input_buffer, (BUFF_LEN/2) ) != (BUFF_LEN/2) )
    15ca:	c7 01       	movw	r24, r14
    15cc:	6b e8       	ldi	r22, 0x8B	; 139
    15ce:	74 e0       	ldi	r23, 0x04	; 4
    15d0:	4e e5       	ldi	r20, 0x5E	; 94
    15d2:	51 e0       	ldi	r21, 0x01	; 1
    15d4:	0e 94 78 28 	call	0x50f0	; 0x50f0 <fat_write_file>
    15d8:	8e 55       	subi	r24, 0x5E	; 94
    15da:	91 40       	sbci	r25, 0x01	; 1
    15dc:	19 f0       	breq	.+6      	; 0x15e4 <append_file+0x26a>
			{
				uart_puts_p(PSTR("error writing to file\n"));
    15de:	80 e2       	ldi	r24, 0x20	; 32
    15e0:	99 e0       	ldi	r25, 0x09	; 9
    15e2:	18 c0       	rjmp	.+48     	; 0x1614 <append_file+0x29a>
				break;
			}
		}

		if(checked_spot == BUFF_LEN) //We've finished checking the second half the buffer
    15e4:	80 91 86 04 	lds	r24, 0x0486
    15e8:	90 91 87 04 	lds	r25, 0x0487
    15ec:	8c 5b       	subi	r24, 0xBC	; 188
    15ee:	92 40       	sbci	r25, 0x02	; 2
    15f0:	39 f6       	brne	.-114    	; 0x1580 <append_file+0x206>
		{
			checked_spot = 0;
    15f2:	10 92 87 04 	sts	0x0487, r1
    15f6:	10 92 86 04 	sts	0x0486, r1
			
			//Record second half the buffer
			if(fat_write_file(fd, (uint8_t*) input_buffer + (BUFF_LEN/2), (BUFF_LEN/2) ) != (BUFF_LEN/2) )
    15fa:	c7 01       	movw	r24, r14
    15fc:	69 ee       	ldi	r22, 0xE9	; 233
    15fe:	75 e0       	ldi	r23, 0x05	; 5
    1600:	4e e5       	ldi	r20, 0x5E	; 94
    1602:	51 e0       	ldi	r21, 0x01	; 1
    1604:	0e 94 78 28 	call	0x50f0	; 0x50f0 <fat_write_file>
    1608:	8e 55       	subi	r24, 0x5E	; 94
    160a:	91 40       	sbci	r25, 0x01	; 1
    160c:	09 f4       	brne	.+2      	; 0x1610 <append_file+0x296>
    160e:	b8 cf       	rjmp	.-144    	; 0x1580 <append_file+0x206>
			{
				uart_puts_p(PSTR("error writing to file\n"));
    1610:	89 e0       	ldi	r24, 0x09	; 9
    1612:	99 e0       	ldi	r25, 0x09	; 9
    1614:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		}
	}

	//Upon receiving the escape character, we may still have stuff left in the buffer
	//Record the last of the buffer to memory
	if(checked_spot == 0 || checked_spot == (BUFF_LEN/2))
    1618:	80 91 86 04 	lds	r24, 0x0486
    161c:	90 91 87 04 	lds	r25, 0x0487
    1620:	89 2b       	or	r24, r25
    1622:	c9 f1       	breq	.+114    	; 0x1696 <append_file+0x31c>
    1624:	80 91 86 04 	lds	r24, 0x0486
    1628:	90 91 87 04 	lds	r25, 0x0487
    162c:	8e 55       	subi	r24, 0x5E	; 94
    162e:	91 40       	sbci	r25, 0x01	; 1
    1630:	91 f1       	breq	.+100    	; 0x1696 <append_file+0x31c>
	{
		//Do nothing, we already recorded the buffers right before catching the escape character
	}
	else if(checked_spot < (BUFF_LEN/2))
    1632:	80 91 86 04 	lds	r24, 0x0486
    1636:	90 91 87 04 	lds	r25, 0x0487
    163a:	8e 55       	subi	r24, 0x5E	; 94
    163c:	91 40       	sbci	r25, 0x01	; 1
    163e:	98 f4       	brcc	.+38     	; 0x1666 <append_file+0x2ec>
	{
		//Record first half the buffer
		if(fat_write_file(fd, (uint8_t*) input_buffer, checked_spot) != checked_spot)
    1640:	40 91 86 04 	lds	r20, 0x0486
    1644:	50 91 87 04 	lds	r21, 0x0487
    1648:	c7 01       	movw	r24, r14
    164a:	6b e8       	ldi	r22, 0x8B	; 139
    164c:	74 e0       	ldi	r23, 0x04	; 4
    164e:	0e 94 78 28 	call	0x50f0	; 0x50f0 <fat_write_file>
    1652:	20 91 86 04 	lds	r18, 0x0486
    1656:	30 91 87 04 	lds	r19, 0x0487
    165a:	82 17       	cp	r24, r18
    165c:	93 07       	cpc	r25, r19
    165e:	d9 f0       	breq	.+54     	; 0x1696 <append_file+0x31c>
			uart_puts_p(PSTR("error writing to file\n"));
    1660:	82 ef       	ldi	r24, 0xF2	; 242
    1662:	98 e0       	ldi	r25, 0x08	; 8
    1664:	16 c0       	rjmp	.+44     	; 0x1692 <append_file+0x318>
	}
	else //checked_spot > (BUFF_LEN/2)
	{
		//Record second half the buffer
		if(fat_write_file(fd, (uint8_t*) input_buffer + (BUFF_LEN/2), (checked_spot - (BUFF_LEN/2)) ) != (checked_spot - (BUFF_LEN/2)) )
    1666:	40 91 86 04 	lds	r20, 0x0486
    166a:	50 91 87 04 	lds	r21, 0x0487
    166e:	4e 55       	subi	r20, 0x5E	; 94
    1670:	51 40       	sbci	r21, 0x01	; 1
    1672:	c7 01       	movw	r24, r14
    1674:	69 ee       	ldi	r22, 0xE9	; 233
    1676:	75 e0       	ldi	r23, 0x05	; 5
    1678:	0e 94 78 28 	call	0x50f0	; 0x50f0 <fat_write_file>
    167c:	20 91 86 04 	lds	r18, 0x0486
    1680:	30 91 87 04 	lds	r19, 0x0487
    1684:	2e 55       	subi	r18, 0x5E	; 94
    1686:	31 40       	sbci	r19, 0x01	; 1
    1688:	82 17       	cp	r24, r18
    168a:	93 07       	cpc	r25, r19
    168c:	21 f0       	breq	.+8      	; 0x1696 <append_file+0x31c>
			uart_puts_p(PSTR("error writing to file\n"));
    168e:	8b ed       	ldi	r24, 0xDB	; 219
    1690:	98 e0       	ldi	r25, 0x08	; 8
    1692:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	}

	fat_close_file(fd);
    1696:	c7 01       	movw	r24, r14
    1698:	0e 94 bc 1c 	call	0x3978	; 0x3978 <fat_close_file>

	cbi(STAT1_PORT, STAT1); //Turn off indicator LED
    169c:	5d 98       	cbi	0x0b, 5	; 11

#if DEBUG
	uart_puts_p(PSTR("Done!\n"));
#endif
	uart_puts_p(PSTR("~")); //Indicate a successful record
    169e:	89 ed       	ldi	r24, 0xD9	; 217
    16a0:	98 e0       	ldi	r25, 0x08	; 8
    16a2:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
    16a6:	81 e0       	ldi	r24, 0x01	; 1
	
	return(1); //Success!
}
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	1f 91       	pop	r17
    16b6:	0f 91       	pop	r16
    16b8:	ff 90       	pop	r15
    16ba:	ef 90       	pop	r14
    16bc:	08 95       	ret

000016be <newlog>:
//Log to a new file everytime the system boots
//Checks the spots in EEPROM for the next available LOG# file name
//Updates EEPROM and then appends to the new log file.
//Limited to 65535 files but this should not always be the case.
void newlog(void)
{
    16be:	9f 92       	push	r9
    16c0:	af 92       	push	r10
    16c2:	bf 92       	push	r11
    16c4:	cf 92       	push	r12
    16c6:	df 92       	push	r13
    16c8:	ef 92       	push	r14
    16ca:	ff 92       	push	r15
    16cc:	0f 93       	push	r16
    16ce:	1f 93       	push	r17
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	ab 97       	sbiw	r28, 0x2b	; 43
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
	uint8_t msb, lsb;
	uint16_t new_file_number;

	//Combine two 8-bit EEPROM spots into one 16-bit number
	lsb = EEPROM_read(LOCATION_FILE_NUMBER_LSB);
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <EEPROM_read>
    16ec:	18 2f       	mov	r17, r24
	msb = EEPROM_read(LOCATION_FILE_NUMBER_MSB);
    16ee:	84 e0       	ldi	r24, 0x04	; 4
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <EEPROM_read>
    16f6:	28 2f       	mov	r18, r24
	new_file_number = new_file_number << 8;
	new_file_number |= lsb;
	
	//If both EEPROM spots are 255 (0xFF), that means they are un-initialized (first time OpenLog has been turned on)
	//Let's init them both to 0
	if((lsb == 255) && (msb == 255))
    16f8:	1f 3f       	cpi	r17, 0xFF	; 255
    16fa:	79 f4       	brne	.+30     	; 0x171a <newlog+0x5c>
    16fc:	8f 3f       	cpi	r24, 0xFF	; 255
    16fe:	69 f4       	brne	.+26     	; 0x171a <newlog+0x5c>
	{
		new_file_number = 0; //By default, unit will start at file number zero
		EEPROM_write(LOCATION_FILE_NUMBER_LSB, 0x00);
    1700:	83 e0       	ldi	r24, 0x03	; 3
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>
		EEPROM_write(LOCATION_FILE_NUMBER_MSB, 0x00);
    170a:	84 e0       	ldi	r24, 0x04	; 4
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>
    1714:	cc 24       	eor	r12, r12
    1716:	dd 24       	eor	r13, r13
    1718:	0e c0       	rjmp	.+28     	; 0x1736 <newlog+0x78>
	//Combine two 8-bit EEPROM spots into one 16-bit number
	lsb = EEPROM_read(LOCATION_FILE_NUMBER_LSB);
	msb = EEPROM_read(LOCATION_FILE_NUMBER_MSB);

	new_file_number = msb;
	new_file_number = new_file_number << 8;
    171a:	92 2f       	mov	r25, r18
    171c:	80 e0       	ldi	r24, 0x00	; 0
	new_file_number |= lsb;
    171e:	c1 2e       	mov	r12, r17
    1720:	dd 24       	eor	r13, r13
    1722:	c8 2a       	or	r12, r24
    1724:	d9 2a       	or	r13, r25
	}

	//The above code looks like it will forever loop if we ever create 65535 logs
	//Let's quit if we ever get to 65534
	//65534 logs is quite possible if you have a system with lots of power on/off cycles
	if(new_file_number == 65534)
    1726:	8e ef       	ldi	r24, 0xFE	; 254
    1728:	c8 16       	cp	r12, r24
    172a:	8f ef       	ldi	r24, 0xFF	; 255
    172c:	d8 06       	cpc	r13, r24
    172e:	19 f4       	brne	.+6      	; 0x1736 <newlog+0x78>
	{
		//Gracefully drop out to command prompt with some error
		uart_puts_p(PSTR("!Too many logs:1!"));
    1730:	86 e8       	ldi	r24, 0x86	; 134
    1732:	9b e0       	ldi	r25, 0x0B	; 11
    1734:	4b c0       	rjmp	.+150    	; 0x17cc <newlog+0x10e>
	}
	
	//If we made it this far, everything looks good - let's create the new LOG and write to it

	char* new_file_name = general_buffer;
	sprintf(new_file_name, "LOG%05u.txt", new_file_number);
    1736:	00 d0       	rcall	.+0      	; 0x1738 <newlog+0x7a>
    1738:	00 d0       	rcall	.+0      	; 0x173a <newlog+0x7c>
    173a:	00 d0       	rcall	.+0      	; 0x173c <newlog+0x7e>
    173c:	ed b7       	in	r30, 0x3d	; 61
    173e:	fe b7       	in	r31, 0x3e	; 62
    1740:	31 96       	adiw	r30, 0x01	; 1
    1742:	0a e4       	ldi	r16, 0x4A	; 74
    1744:	17 e0       	ldi	r17, 0x07	; 7
    1746:	ad b7       	in	r26, 0x3d	; 61
    1748:	be b7       	in	r27, 0x3e	; 62
    174a:	12 96       	adiw	r26, 0x02	; 2
    174c:	1c 93       	st	X, r17
    174e:	0e 93       	st	-X, r16
    1750:	11 97       	sbiw	r26, 0x01	; 1
    1752:	42 e0       	ldi	r20, 0x02	; 2
    1754:	e4 2e       	mov	r14, r20
    1756:	41 e0       	ldi	r20, 0x01	; 1
    1758:	f4 2e       	mov	r15, r20
    175a:	f3 82       	std	Z+3, r15	; 0x03
    175c:	e2 82       	std	Z+2, r14	; 0x02
    175e:	d5 82       	std	Z+5, r13	; 0x05
    1760:	c4 82       	std	Z+4, r12	; 0x04
    1762:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <sprintf>
    1766:	8d b7       	in	r24, 0x3d	; 61
    1768:	9e b7       	in	r25, 0x3e	; 62
    176a:	06 96       	adiw	r24, 0x06	; 6
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	9e bf       	out	0x3e, r25	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	8d bf       	out	0x3d, r24	; 61

	struct fat_dir_entry_struct file_entry;
	while(!fat_create_file(dd, new_file_name, &file_entry))
    1776:	90 2e       	mov	r9, r16
    1778:	01 2f       	mov	r16, r17
    177a:	5e 01       	movw	r10, r28
    177c:	08 94       	sec
    177e:	a1 1c       	adc	r10, r1
    1780:	b1 1c       	adc	r11, r1
	{
		//Increment the file number because this file name is already taken
		new_file_number++;
		sprintf(new_file_name, "LOG%05u.txt", new_file_number);
    1782:	1e 2d       	mov	r17, r14
    1784:	ef 2c       	mov	r14, r15
    1786:	25 c0       	rjmp	.+74     	; 0x17d2 <newlog+0x114>
    1788:	00 d0       	rcall	.+0      	; 0x178a <newlog+0xcc>
    178a:	00 d0       	rcall	.+0      	; 0x178c <newlog+0xce>
    178c:	00 d0       	rcall	.+0      	; 0x178e <newlog+0xd0>
    178e:	ed b7       	in	r30, 0x3d	; 61
    1790:	fe b7       	in	r31, 0x3e	; 62
    1792:	31 96       	adiw	r30, 0x01	; 1
    1794:	ad b7       	in	r26, 0x3d	; 61
    1796:	be b7       	in	r27, 0x3e	; 62
    1798:	11 96       	adiw	r26, 0x01	; 1
    179a:	9c 92       	st	X, r9
    179c:	11 97       	sbiw	r26, 0x01	; 1
    179e:	12 96       	adiw	r26, 0x02	; 2
    17a0:	0c 93       	st	X, r16
    17a2:	12 83       	std	Z+2, r17	; 0x02
    17a4:	e3 82       	std	Z+3, r14	; 0x03
    17a6:	d5 82       	std	Z+5, r13	; 0x05
    17a8:	c4 82       	std	Z+4, r12	; 0x04
    17aa:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <sprintf>
		//Shoot! There's still a chance that we can have too many logs here
		//For example, if all the way up to LOG65533 was already on card, 
		//then reset the EEPROM log number, 65533 would be skipped, 65534 would be created
		//and the above 65534 test would be skipped
		
		if(new_file_number > 65533)
    17ae:	8d b7       	in	r24, 0x3d	; 61
    17b0:	9e b7       	in	r25, 0x3e	; 62
    17b2:	06 96       	adiw	r24, 0x06	; 6
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	9e bf       	out	0x3e, r25	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	8d bf       	out	0x3d, r24	; 61
    17be:	9e ef       	ldi	r25, 0xFE	; 254
    17c0:	c9 16       	cp	r12, r25
    17c2:	9f ef       	ldi	r25, 0xFF	; 255
    17c4:	d9 06       	cpc	r13, r25
    17c6:	28 f0       	brcs	.+10     	; 0x17d2 <newlog+0x114>
		{
			//Gracefully drop out to command prompt with some error
			uart_puts_p(PSTR("!Too many logs:2!"));
    17c8:	84 e7       	ldi	r24, 0x74	; 116
    17ca:	9b e0       	ldi	r25, 0x0B	; 11
    17cc:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
    17d0:	22 c0       	rjmp	.+68     	; 0x1816 <newlog+0x158>

	char* new_file_name = general_buffer;
	sprintf(new_file_name, "LOG%05u.txt", new_file_number);

	struct fat_dir_entry_struct file_entry;
	while(!fat_create_file(dd, new_file_name, &file_entry))
    17d2:	80 91 47 07 	lds	r24, 0x0747
    17d6:	90 91 48 07 	lds	r25, 0x0748
    17da:	6a e4       	ldi	r22, 0x4A	; 74
    17dc:	77 e0       	ldi	r23, 0x07	; 7
    17de:	a5 01       	movw	r20, r10
    17e0:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fat_create_file>
    17e4:	08 94       	sec
    17e6:	c1 1c       	adc	r12, r1
    17e8:	d1 1c       	adc	r13, r1
    17ea:	88 23       	and	r24, r24
    17ec:	69 f2       	breq	.-102    	; 0x1788 <newlog+0xca>
	//write cycles to the EEPROM as it will wear out. Only write if
	//needed
	lsb = (uint8_t)(new_file_number & 0x00FF);
	msb = (uint8_t)((new_file_number & 0xFF00) >> 8);

	EEPROM_write(LOCATION_FILE_NUMBER_LSB, lsb); // LSB
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	6c 2d       	mov	r22, r12
    17f4:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>

	if (EEPROM_read(LOCATION_FILE_NUMBER_MSB) != msb)
    17f8:	84 e0       	ldi	r24, 0x04	; 4
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 60 06 	call	0xcc0	; 0xcc0 <EEPROM_read>
    1800:	8d 15       	cp	r24, r13
    1802:	29 f0       	breq	.+10     	; 0x180e <newlog+0x150>
		EEPROM_write(LOCATION_FILE_NUMBER_MSB, msb); // MSB
    1804:	84 e0       	ldi	r24, 0x04	; 4
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	6d 2d       	mov	r22, r13
    180a:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>
	uart_puts(new_file_name);
	uart_puts_p(PSTR("\n"));
#endif

	//Begin writing to file
	append_file(new_file_name);
    180e:	8a e4       	ldi	r24, 0x4A	; 74
    1810:	97 e0       	ldi	r25, 0x07	; 7
    1812:	0e 94 bd 09 	call	0x137a	; 0x137a <append_file>
}
    1816:	ab 96       	adiw	r28, 0x2b	; 43
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	ff 90       	pop	r15
    182c:	ef 90       	pop	r14
    182e:	df 90       	pop	r13
    1830:	cf 90       	pop	r12
    1832:	bf 90       	pop	r11
    1834:	af 90       	pop	r10
    1836:	9f 90       	pop	r9
    1838:	08 95       	ret

0000183a <seqlog>:
//If not, create it
//If yes, append to it
//Return 0 on error
//Return anything else on sucess
void seqlog(void)
{
    183a:	ef 92       	push	r14
    183c:	ff 92       	push	r15
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	e8 97       	sbiw	r28, 0x38	; 56
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
	char seq_file_name[13];
	sprintf(seq_file_name, "SEQLOG.txt");
    1856:	8e 01       	movw	r16, r28
    1858:	0f 5f       	subi	r16, 0xFF	; 255
    185a:	1f 4f       	sbci	r17, 0xFF	; 255
    185c:	c8 01       	movw	r24, r16
    185e:	6e e0       	ldi	r22, 0x0E	; 14
    1860:	71 e0       	ldi	r23, 0x01	; 1
    1862:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <strcpy>

	struct fat_file_struct* fd = open_file_in_dir(fs, dd, seq_file_name);
    1866:	60 91 47 07 	lds	r22, 0x0747
    186a:	70 91 48 07 	lds	r23, 0x0748
    186e:	80 91 80 04 	lds	r24, 0x0480
    1872:	90 91 81 04 	lds	r25, 0x0481
    1876:	a8 01       	movw	r20, r16
    1878:	0e 94 8c 09 	call	0x1318	; 0x1318 <open_file_in_dir>
    187c:	7c 01       	movw	r14, r24
	if(!fd)
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	a9 f4       	brne	.+42     	; 0x18ac <seqlog+0x72>
	{
		uart_puts_p(PSTR("Creating SEQLOG\n"));
    1882:	8f ea       	ldi	r24, 0xAF	; 175
    1884:	9b e0       	ldi	r25, 0x0B	; 11
    1886:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>

		struct fat_dir_entry_struct file_entry;
		if(!fat_create_file(dd, seq_file_name, &file_entry))
    188a:	80 91 47 07 	lds	r24, 0x0747
    188e:	90 91 48 07 	lds	r25, 0x0748
    1892:	b8 01       	movw	r22, r16
    1894:	ae 01       	movw	r20, r28
    1896:	42 5f       	subi	r20, 0xF2	; 242
    1898:	5f 4f       	sbci	r21, 0xFF	; 255
    189a:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fat_create_file>
    189e:	88 23       	and	r24, r24
    18a0:	29 f4       	brne	.+10     	; 0x18ac <seqlog+0x72>
		{
			uart_puts_p(PSTR("Error creating SEQLOG\n"));
    18a2:	88 e9       	ldi	r24, 0x98	; 152
    18a4:	9b e0       	ldi	r25, 0x0B	; 11
    18a6:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
    18aa:	07 c0       	rjmp	.+14     	; 0x18ba <seqlog+0x80>
			return;
		}
	}

	fat_close_file(fd); //Close the file so we can re-open it in append_file
    18ac:	c7 01       	movw	r24, r14
    18ae:	0e 94 bc 1c 	call	0x3978	; 0x3978 <fat_close_file>

	append_file(seq_file_name);
    18b2:	ce 01       	movw	r24, r28
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	0e 94 bd 09 	call	0x137a	; 0x137a <append_file>
}
    18ba:	e8 96       	adiw	r28, 0x38	; 56
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	cd bf       	out	0x3d, r28	; 61
    18c6:	cf 91       	pop	r28
    18c8:	df 91       	pop	r29
    18ca:	1f 91       	pop	r17
    18cc:	0f 91       	pop	r16
    18ce:	ff 90       	pop	r15
    18d0:	ef 90       	pop	r14
    18d2:	08 95       	ret

000018d4 <record_config_file>:
}

//Records the current EEPROM settings to the config file
//If a config file exists, it is trashed and a new one is created
void record_config_file(void)
{
    18d4:	7f 92       	push	r7
    18d6:	8f 92       	push	r8
    18d8:	9f 92       	push	r9
    18da:	af 92       	push	r10
    18dc:	bf 92       	push	r11
    18de:	cf 92       	push	r12
    18e0:	df 92       	push	r13
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	cb 54       	subi	r28, 0x4B	; 75
    18f4:	d0 40       	sbci	r29, 0x00	; 0
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
	struct fat_dir_entry_struct file_entry;

	char config_file_name[13];
	sprintf(config_file_name, CFG_FILENAME); //This is the name of the config file. 'config.sys' is probably a bad idea.
    1900:	8e 01       	movw	r16, r28
    1902:	0c 5f       	subi	r16, 0xFC	; 252
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
    1906:	c8 01       	movw	r24, r16
    1908:	69 e1       	ldi	r22, 0x19	; 25
    190a:	71 e0       	ldi	r23, 0x01	; 1
    190c:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <strcpy>

	//If there is currently a config file, trash it
	if(find_file_in_dir(fs, dd, config_file_name, &file_entry, 0))
    1910:	60 91 47 07 	lds	r22, 0x0747
    1914:	70 91 48 07 	lds	r23, 0x0748
    1918:	e1 e2       	ldi	r30, 0x21	; 33
    191a:	ee 2e       	mov	r14, r30
    191c:	f1 2c       	mov	r15, r1
    191e:	ec 0e       	add	r14, r28
    1920:	fd 1e       	adc	r15, r29
    1922:	80 91 80 04 	lds	r24, 0x0480
    1926:	90 91 81 04 	lds	r25, 0x0481
    192a:	a8 01       	movw	r20, r16
    192c:	97 01       	movw	r18, r14
    192e:	00 e0       	ldi	r16, 0x00	; 0
    1930:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <find_file_in_dir>
    1934:	88 23       	and	r24, r24
    1936:	39 f0       	breq	.+14     	; 0x1946 <record_config_file+0x72>
	{
		#if DEBUG
			uart_puts("\n\nDeleting config\n");
		#endif
		
		fat_delete_file(fs, &file_entry);
    1938:	80 91 80 04 	lds	r24, 0x0480
    193c:	90 91 81 04 	lds	r25, 0x0481
    1940:	b7 01       	movw	r22, r14
    1942:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <fat_delete_file>
	}

	//Create config file
	if(fat_create_file(dd, config_file_name, &file_entry) == 0)
    1946:	8e 01       	movw	r16, r28
    1948:	0c 5f       	subi	r16, 0xFC	; 252
    194a:	1f 4f       	sbci	r17, 0xFF	; 255
    194c:	80 91 47 07 	lds	r24, 0x0747
    1950:	90 91 48 07 	lds	r25, 0x0748
    1954:	b8 01       	movw	r22, r16
    1956:	ae 01       	movw	r20, r28
    1958:	4f 5d       	subi	r20, 0xDF	; 223
    195a:	5f 4f       	sbci	r21, 0xFF	; 255
    195c:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fat_create_file>
    1960:	88 23       	and	r24, r24
    1962:	19 f4       	brne	.+6      	; 0x196a <record_config_file+0x96>
	{
		uart_puts("Failed to create config file");
    1964:	84 e2       	ldi	r24, 0x24	; 36
    1966:	91 e0       	ldi	r25, 0x01	; 1
    1968:	10 c0       	rjmp	.+32     	; 0x198a <record_config_file+0xb6>
	}
	else
	{
		//Config was successfully created, so let's fill it with default settings

		struct fat_file_struct* fd = open_file_in_dir(fs, dd, config_file_name);
    196a:	60 91 47 07 	lds	r22, 0x0747
    196e:	70 91 48 07 	lds	r23, 0x0748
    1972:	80 91 80 04 	lds	r24, 0x0480
    1976:	90 91 81 04 	lds	r25, 0x0481
    197a:	a8 01       	movw	r20, r16
    197c:	0e 94 8c 09 	call	0x1318	; 0x1318 <open_file_in_dir>
    1980:	5c 01       	movw	r10, r24
		if(!fd)
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	29 f4       	brne	.+10     	; 0x1990 <record_config_file+0xbc>
		{
			uart_puts("!error opening config file\n");
    1986:	81 e4       	ldi	r24, 0x41	; 65
    1988:	91 e0       	ldi	r25, 0x01	; 1
    198a:	0e 94 12 2c 	call	0x5824	; 0x5824 <uart_puts>
    198e:	d8 c0       	rjmp	.+432    	; 0x1b40 <record_config_file+0x26c>
		//Baud, escape character, escape times, system mode (0 = new log)
		char settings_string[16]; //"115200,103,14,0\0" = 115200 bps, escape char of ASCII(103), 14 times, new log mode
		char temp[3];

		//Before we read the EEPROM values, they've already been tested and defaulted in the read_system_settings function
		char current_system_baud = EEPROM_read(LOCATION_BAUD_SETTING);
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 60 06 	call	0xcc0	; 0xcc0 <EEPROM_read>
    1998:	08 2f       	mov	r16, r24
		char current_system_mode = EEPROM_read(LOCATION_SYSTEM_SETTING);
    199a:	82 e0       	ldi	r24, 0x02	; 2
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <EEPROM_read>
    19a2:	78 2e       	mov	r7, r24
		char current_system_escape = EEPROM_read(LOCATION_ESCAPE_CHAR);
    19a4:	85 e0       	ldi	r24, 0x05	; 5
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <EEPROM_read>
    19ac:	98 2e       	mov	r9, r24
		char current_system_max_escape = EEPROM_read(LOCATION_MAX_ESCAPE_CHAR);
    19ae:	86 e0       	ldi	r24, 0x06	; 6
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <EEPROM_read>
    19b6:	88 2e       	mov	r8, r24
		
		if(current_system_baud == BAUD_2400) strcpy(settings_string,"2400");
    19b8:	00 23       	and	r16, r16
    19ba:	29 f4       	brne	.+10     	; 0x19c6 <record_config_file+0xf2>
    19bc:	ce 01       	movw	r24, r28
    19be:	41 96       	adiw	r24, 0x11	; 17
    19c0:	6d e5       	ldi	r22, 0x5D	; 93
    19c2:	71 e0       	ldi	r23, 0x01	; 1
    19c4:	22 c0       	rjmp	.+68     	; 0x1a0a <record_config_file+0x136>
		if(current_system_baud == BAUD_4800) strcpy(settings_string,"4800");
    19c6:	04 30       	cpi	r16, 0x04	; 4
    19c8:	29 f4       	brne	.+10     	; 0x19d4 <record_config_file+0x100>
    19ca:	ce 01       	movw	r24, r28
    19cc:	41 96       	adiw	r24, 0x11	; 17
    19ce:	62 e6       	ldi	r22, 0x62	; 98
    19d0:	71 e0       	ldi	r23, 0x01	; 1
    19d2:	1b c0       	rjmp	.+54     	; 0x1a0a <record_config_file+0x136>
		if(current_system_baud == BAUD_9600) strcpy(settings_string,"9600");
    19d4:	01 30       	cpi	r16, 0x01	; 1
    19d6:	29 f4       	brne	.+10     	; 0x19e2 <record_config_file+0x10e>
    19d8:	ce 01       	movw	r24, r28
    19da:	41 96       	adiw	r24, 0x11	; 17
    19dc:	67 e6       	ldi	r22, 0x67	; 103
    19de:	71 e0       	ldi	r23, 0x01	; 1
    19e0:	14 c0       	rjmp	.+40     	; 0x1a0a <record_config_file+0x136>
		if(current_system_baud == BAUD_19200) strcpy(settings_string,"19200");
    19e2:	05 30       	cpi	r16, 0x05	; 5
    19e4:	29 f4       	brne	.+10     	; 0x19f0 <record_config_file+0x11c>
    19e6:	ce 01       	movw	r24, r28
    19e8:	41 96       	adiw	r24, 0x11	; 17
    19ea:	6c e6       	ldi	r22, 0x6C	; 108
    19ec:	71 e0       	ldi	r23, 0x01	; 1
    19ee:	0d c0       	rjmp	.+26     	; 0x1a0a <record_config_file+0x136>
		if(current_system_baud == BAUD_57600) strcpy(settings_string,"57600");
    19f0:	02 30       	cpi	r16, 0x02	; 2
    19f2:	29 f4       	brne	.+10     	; 0x19fe <record_config_file+0x12a>
    19f4:	ce 01       	movw	r24, r28
    19f6:	41 96       	adiw	r24, 0x11	; 17
    19f8:	62 e7       	ldi	r22, 0x72	; 114
    19fa:	71 e0       	ldi	r23, 0x01	; 1
    19fc:	06 c0       	rjmp	.+12     	; 0x1a0a <record_config_file+0x136>
		if(current_system_baud == BAUD_115200) strcpy(settings_string,"115200");
    19fe:	03 30       	cpi	r16, 0x03	; 3
    1a00:	31 f4       	brne	.+12     	; 0x1a0e <record_config_file+0x13a>
    1a02:	ce 01       	movw	r24, r28
    1a04:	41 96       	adiw	r24, 0x11	; 17
    1a06:	68 e7       	ldi	r22, 0x78	; 120
    1a08:	71 e0       	ldi	r23, 0x01	; 1
    1a0a:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <strcpy>
		
		strcat(settings_string, ",");
    1a0e:	8e 01       	movw	r16, r28
    1a10:	0f 5e       	subi	r16, 0xEF	; 239
    1a12:	1f 4f       	sbci	r17, 0xFF	; 255
    1a14:	c8 01       	movw	r24, r16
    1a16:	6f e7       	ldi	r22, 0x7F	; 127
    1a18:	71 e0       	ldi	r23, 0x01	; 1
    1a1a:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <strcat>
		
		//Convert escape character to an ASCII visible string
		sprintf(temp, "%d", current_system_escape);
    1a1e:	00 d0       	rcall	.+0      	; 0x1a20 <record_config_file+0x14c>
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <record_config_file+0x14e>
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <record_config_file+0x150>
    1a24:	ed b7       	in	r30, 0x3d	; 61
    1a26:	fe b7       	in	r31, 0x3e	; 62
    1a28:	31 96       	adiw	r30, 0x01	; 1
    1a2a:	7e 01       	movw	r14, r28
    1a2c:	08 94       	sec
    1a2e:	e1 1c       	adc	r14, r1
    1a30:	f1 1c       	adc	r15, r1
    1a32:	ad b7       	in	r26, 0x3d	; 61
    1a34:	be b7       	in	r27, 0x3e	; 62
    1a36:	12 96       	adiw	r26, 0x02	; 2
    1a38:	fc 92       	st	X, r15
    1a3a:	ee 92       	st	-X, r14
    1a3c:	11 97       	sbiw	r26, 0x01	; 1
    1a3e:	51 e8       	ldi	r21, 0x81	; 129
    1a40:	c5 2e       	mov	r12, r21
    1a42:	51 e0       	ldi	r21, 0x01	; 1
    1a44:	d5 2e       	mov	r13, r21
    1a46:	d3 82       	std	Z+3, r13	; 0x03
    1a48:	c2 82       	std	Z+2, r12	; 0x02
    1a4a:	94 82       	std	Z+4, r9	; 0x04
    1a4c:	15 82       	std	Z+5, r1	; 0x05
    1a4e:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <sprintf>
		strcat(settings_string, temp); //Add this string to the system string
    1a52:	8d b7       	in	r24, 0x3d	; 61
    1a54:	9e b7       	in	r25, 0x3e	; 62
    1a56:	06 96       	adiw	r24, 0x06	; 6
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	9e bf       	out	0x3e, r25	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	8d bf       	out	0x3d, r24	; 61
    1a62:	c8 01       	movw	r24, r16
    1a64:	b7 01       	movw	r22, r14
    1a66:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <strcat>

		strcat(settings_string, ",");
    1a6a:	c8 01       	movw	r24, r16
    1a6c:	6f e7       	ldi	r22, 0x7F	; 127
    1a6e:	71 e0       	ldi	r23, 0x01	; 1
    1a70:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <strcat>

		//Convert max escape character to an ASCII visible string
		sprintf(temp, "%d", current_system_max_escape);
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <record_config_file+0x1a2>
    1a76:	00 d0       	rcall	.+0      	; 0x1a78 <record_config_file+0x1a4>
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <record_config_file+0x1a6>
    1a7a:	ed b7       	in	r30, 0x3d	; 61
    1a7c:	fe b7       	in	r31, 0x3e	; 62
    1a7e:	31 96       	adiw	r30, 0x01	; 1
    1a80:	ad b7       	in	r26, 0x3d	; 61
    1a82:	be b7       	in	r27, 0x3e	; 62
    1a84:	12 96       	adiw	r26, 0x02	; 2
    1a86:	fc 92       	st	X, r15
    1a88:	ee 92       	st	-X, r14
    1a8a:	11 97       	sbiw	r26, 0x01	; 1
    1a8c:	d3 82       	std	Z+3, r13	; 0x03
    1a8e:	c2 82       	std	Z+2, r12	; 0x02
    1a90:	84 82       	std	Z+4, r8	; 0x04
    1a92:	15 82       	std	Z+5, r1	; 0x05
    1a94:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <sprintf>
		strcat(settings_string, temp); //Add this string to the system string
    1a98:	8d b7       	in	r24, 0x3d	; 61
    1a9a:	9e b7       	in	r25, 0x3e	; 62
    1a9c:	06 96       	adiw	r24, 0x06	; 6
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	9e bf       	out	0x3e, r25	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	8d bf       	out	0x3d, r24	; 61
    1aa8:	c8 01       	movw	r24, r16
    1aaa:	b7 01       	movw	r22, r14
    1aac:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <strcat>

		strcat(settings_string, ",");
    1ab0:	c8 01       	movw	r24, r16
    1ab2:	6f e7       	ldi	r22, 0x7F	; 127
    1ab4:	71 e0       	ldi	r23, 0x01	; 1
    1ab6:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <strcat>

		//Convert system mode to a ASCII visible character
		sprintf(temp, "%d", current_system_mode);
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <record_config_file+0x1e8>
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <record_config_file+0x1ea>
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <record_config_file+0x1ec>
    1ac0:	ed b7       	in	r30, 0x3d	; 61
    1ac2:	fe b7       	in	r31, 0x3e	; 62
    1ac4:	31 96       	adiw	r30, 0x01	; 1
    1ac6:	ad b7       	in	r26, 0x3d	; 61
    1ac8:	be b7       	in	r27, 0x3e	; 62
    1aca:	12 96       	adiw	r26, 0x02	; 2
    1acc:	fc 92       	st	X, r15
    1ace:	ee 92       	st	-X, r14
    1ad0:	11 97       	sbiw	r26, 0x01	; 1
    1ad2:	d3 82       	std	Z+3, r13	; 0x03
    1ad4:	c2 82       	std	Z+2, r12	; 0x02
    1ad6:	74 82       	std	Z+4, r7	; 0x04
    1ad8:	15 82       	std	Z+5, r1	; 0x05
    1ada:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <sprintf>
		strcat(settings_string, temp); //Add this string to the system string
    1ade:	8d b7       	in	r24, 0x3d	; 61
    1ae0:	9e b7       	in	r25, 0x3e	; 62
    1ae2:	06 96       	adiw	r24, 0x06	; 6
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	9e bf       	out	0x3e, r25	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	8d bf       	out	0x3d, r24	; 61
    1aee:	c8 01       	movw	r24, r16
    1af0:	b7 01       	movw	r22, r14
    1af2:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <strcat>

		strcat(settings_string, "\0");

		//Record current system settings to the config file
		//strcpy( (char*)input_buffer, "9600,26,3,0\0");
		strcpy( (char*)input_buffer, settings_string);
    1af6:	8b e8       	ldi	r24, 0x8B	; 139
    1af8:	94 e0       	ldi	r25, 0x04	; 4
    1afa:	b8 01       	movw	r22, r16
    1afc:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <strcpy>
		#if DEBUG
			uart_puts_p(PSTR("\nSetting string: "));
			uart_puts(settings_string);
		#endif

		if( fat_write_file(fd, (uint8_t*)input_buffer, strlen(settings_string) ) != strlen(settings_string) )
    1b00:	f8 01       	movw	r30, r16
    1b02:	01 90       	ld	r0, Z+
    1b04:	00 20       	and	r0, r0
    1b06:	e9 f7       	brne	.-6      	; 0x1b02 <record_config_file+0x22e>
    1b08:	31 97       	sbiw	r30, 0x01	; 1
    1b0a:	e0 1b       	sub	r30, r16
    1b0c:	f1 0b       	sbc	r31, r17
    1b0e:	c5 01       	movw	r24, r10
    1b10:	6b e8       	ldi	r22, 0x8B	; 139
    1b12:	74 e0       	ldi	r23, 0x04	; 4
    1b14:	af 01       	movw	r20, r30
    1b16:	0e 94 78 28 	call	0x50f0	; 0x50f0 <fat_write_file>
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	01 90       	ld	r0, Z+
    1b1e:	00 20       	and	r0, r0
    1b20:	e9 f7       	brne	.-6      	; 0x1b1c <record_config_file+0x248>
    1b22:	31 97       	sbiw	r30, 0x01	; 1
    1b24:	e0 1b       	sub	r30, r16
    1b26:	f1 0b       	sbc	r31, r17
    1b28:	8e 17       	cp	r24, r30
    1b2a:	9f 07       	cpc	r25, r31
    1b2c:	21 f0       	breq	.+8      	; 0x1b36 <record_config_file+0x262>
			uart_puts("error writing to config\n");
    1b2e:	84 e8       	ldi	r24, 0x84	; 132
    1b30:	91 e0       	ldi	r25, 0x01	; 1
    1b32:	0e 94 12 2c 	call	0x5824	; 0x5824 <uart_puts>

		fat_close_file(fd);
    1b36:	c5 01       	movw	r24, r10
    1b38:	0e 94 bc 1c 	call	0x3978	; 0x3978 <fat_close_file>

		sd_raw_sync(); //Sync all newly written data to card
    1b3c:	0e 94 f5 18 	call	0x31ea	; 0x31ea <sd_raw_sync>
		
		//Now the new config file has the current system settings, nothing else to do!
	}
}
    1b40:	c5 5b       	subi	r28, 0xB5	; 181
    1b42:	df 4f       	sbci	r29, 0xFF	; 255
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	ff 90       	pop	r15
    1b58:	ef 90       	pop	r14
    1b5a:	df 90       	pop	r13
    1b5c:	cf 90       	pop	r12
    1b5e:	bf 90       	pop	r11
    1b60:	af 90       	pop	r10
    1b62:	9f 90       	pop	r9
    1b64:	8f 90       	pop	r8
    1b66:	7f 90       	pop	r7
    1b68:	08 95       	ret

00001b6a <system_menu>:
//1) Turn on unit, unit will create new file, and just start logging
//2) Turn on, append to known file, and just start logging
//3) Turn on, sit at command prompt
//4) Resets the newlog file number to zero
void system_menu(void)
{
    1b6a:	ff 92       	push	r15
    1b6c:	0f 93       	push	r16
    1b6e:	1f 93       	push	r17
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <system_menu+0xc>
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <system_menu+0xe>
    1b78:	0f 92       	push	r0
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
	char buffer[5];

	uint8_t system_mode = EEPROM_read(LOCATION_SYSTEM_SETTING);
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	0e 94 60 06 	call	0xcc0	; 0xcc0 <EEPROM_read>
    1b86:	f8 2e       	mov	r15, r24
		uart_putc('>');

		//read command
		char* command = buffer;

		if(read_line(command, sizeof(buffer)) < 1)
    1b88:	8e 01       	movw	r16, r28
    1b8a:	0f 5f       	subi	r16, 0xFF	; 255
    1b8c:	1f 4f       	sbci	r17, 0xFF	; 255

	uint8_t system_mode = EEPROM_read(LOCATION_SYSTEM_SETTING);

	while(1)
	{
		uart_puts_p(PSTR("\nSystem Configuration\n"));
    1b8e:	85 e8       	ldi	r24, 0x85	; 133
    1b90:	92 e0       	ldi	r25, 0x02	; 2
    1b92:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>

		uart_puts_p(PSTR("Current boot mode: "));
    1b96:	81 e7       	ldi	r24, 0x71	; 113
    1b98:	92 e0       	ldi	r25, 0x02	; 2
    1b9a:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		if(system_mode == MODE_NEWLOG) uart_puts_p(PSTR("New file"));
    1b9e:	ff 20       	and	r15, r15
    1ba0:	19 f4       	brne	.+6      	; 0x1ba8 <system_menu+0x3e>
    1ba2:	88 e6       	ldi	r24, 0x68	; 104
    1ba4:	92 e0       	ldi	r25, 0x02	; 2
    1ba6:	0b c0       	rjmp	.+22     	; 0x1bbe <system_menu+0x54>
		if(system_mode == MODE_SEQLOG) uart_puts_p(PSTR("Append file"));
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	f8 16       	cp	r15, r24
    1bac:	19 f4       	brne	.+6      	; 0x1bb4 <system_menu+0x4a>
    1bae:	8c e5       	ldi	r24, 0x5C	; 92
    1bb0:	92 e0       	ldi	r25, 0x02	; 2
    1bb2:	05 c0       	rjmp	.+10     	; 0x1bbe <system_menu+0x54>
		if(system_mode == MODE_COMMAND) uart_puts_p(PSTR("Command"));
    1bb4:	82 e0       	ldi	r24, 0x02	; 2
    1bb6:	f8 16       	cp	r15, r24
    1bb8:	21 f4       	brne	.+8      	; 0x1bc2 <system_menu+0x58>
    1bba:	84 e5       	ldi	r24, 0x54	; 84
    1bbc:	92 e0       	ldi	r25, 0x02	; 2
    1bbe:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts_p(PSTR("\n"));
    1bc2:	82 e5       	ldi	r24, 0x52	; 82
    1bc4:	92 e0       	ldi	r25, 0x02	; 2
    1bc6:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>

		uart_puts_p(PSTR("Current escape character and amount: "));
    1bca:	8c e2       	ldi	r24, 0x2C	; 44
    1bcc:	92 e0       	ldi	r25, 0x02	; 2
    1bce:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_putdw_dec(setting_escape_character);
    1bd2:	60 91 49 07 	lds	r22, 0x0749
    1bd6:	70 e0       	ldi	r23, 0x00	; 0
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	0e 94 a9 2b 	call	0x5752	; 0x5752 <uart_putdw_dec>
		uart_puts_p(PSTR(" x "));
    1be0:	88 e2       	ldi	r24, 0x28	; 40
    1be2:	92 e0       	ldi	r25, 0x02	; 2
    1be4:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_putdw_dec(setting_max_escape_character);
    1be8:	60 91 85 04 	lds	r22, 0x0485
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	0e 94 a9 2b 	call	0x5752	; 0x5752 <uart_putdw_dec>
		uart_puts_p(PSTR("\n"));
    1bf6:	86 e2       	ldi	r24, 0x26	; 38
    1bf8:	92 e0       	ldi	r25, 0x02	; 2
    1bfa:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		
		uart_puts_p(PSTR("Change to:\n"));
    1bfe:	8a e1       	ldi	r24, 0x1A	; 26
    1c00:	92 e0       	ldi	r25, 0x02	; 2
    1c02:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts_p(PSTR("1) New file logging\n"));
    1c06:	85 e0       	ldi	r24, 0x05	; 5
    1c08:	92 e0       	ldi	r25, 0x02	; 2
    1c0a:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts_p(PSTR("2) Append file logging\n"));
    1c0e:	8d ee       	ldi	r24, 0xED	; 237
    1c10:	91 e0       	ldi	r25, 0x01	; 1
    1c12:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts_p(PSTR("3) Command prompt\n"));
    1c16:	8a ed       	ldi	r24, 0xDA	; 218
    1c18:	91 e0       	ldi	r25, 0x01	; 1
    1c1a:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts_p(PSTR("4) Reset new file number\n"));
    1c1e:	80 ec       	ldi	r24, 0xC0	; 192
    1c20:	91 e0       	ldi	r25, 0x01	; 1
    1c22:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts_p(PSTR("5) New escape character\n"));
    1c26:	87 ea       	ldi	r24, 0xA7	; 167
    1c28:	91 e0       	ldi	r25, 0x01	; 1
    1c2a:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts_p(PSTR("6) Number of escape characters\n"));
    1c2e:	87 e8       	ldi	r24, 0x87	; 135
    1c30:	91 e0       	ldi	r25, 0x01	; 1
    1c32:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts_p(PSTR("x) Exit\n"));
    1c36:	8e e7       	ldi	r24, 0x7E	; 126
    1c38:	91 e0       	ldi	r25, 0x01	; 1
    1c3a:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>

		//print prompt
		uart_putc('>');
    1c3e:	8e e3       	ldi	r24, 0x3E	; 62
    1c40:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>

		//read command
		char* command = buffer;

		if(read_line(command, sizeof(buffer)) < 1)
    1c44:	c8 01       	movw	r24, r16
    1c46:	65 e0       	ldi	r22, 0x05	; 5
    1c48:	0e 94 67 08 	call	0x10ce	; 0x10ce <read_line>
    1c4c:	88 23       	and	r24, r24
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <system_menu+0xe8>
    1c50:	9e cf       	rjmp	.-196    	; 0x1b8e <system_menu+0x24>
			continue;

		//execute command
		if(strcmp_P(command, PSTR("1")) == 0)
    1c52:	c8 01       	movw	r24, r16
    1c54:	6c e7       	ldi	r22, 0x7C	; 124
    1c56:	71 e0       	ldi	r23, 0x01	; 1
    1c58:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    1c5c:	89 2b       	or	r24, r25
    1c5e:	41 f4       	brne	.+16     	; 0x1c70 <system_menu+0x106>
		{
			uart_puts_p(PSTR("New file logging\n"));
    1c60:	8a e6       	ldi	r24, 0x6A	; 106
    1c62:	91 e0       	ldi	r25, 0x01	; 1
    1c64:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
			EEPROM_write(LOCATION_SYSTEM_SETTING, MODE_NEWLOG);
    1c68:	82 e0       	ldi	r24, 0x02	; 2
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	0e c0       	rjmp	.+28     	; 0x1c8c <system_menu+0x122>
			record_config_file(); //Put this new setting into the config file
			return;
		}
		if(strcmp_P(command, PSTR("2")) == 0)
    1c70:	c8 01       	movw	r24, r16
    1c72:	68 e6       	ldi	r22, 0x68	; 104
    1c74:	71 e0       	ldi	r23, 0x01	; 1
    1c76:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    1c7a:	89 2b       	or	r24, r25
    1c7c:	61 f4       	brne	.+24     	; 0x1c96 <system_menu+0x12c>
		{
			uart_puts_p(PSTR("Append file logging\n"));
    1c7e:	83 e5       	ldi	r24, 0x53	; 83
    1c80:	91 e0       	ldi	r25, 0x01	; 1
    1c82:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
			EEPROM_write(LOCATION_SYSTEM_SETTING, MODE_SEQLOG);
    1c86:	82 e0       	ldi	r24, 0x02	; 2
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>
			record_config_file(); //Put this new setting into the config file
    1c90:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <record_config_file>
    1c94:	7c c0       	rjmp	.+248    	; 0x1d8e <system_menu+0x224>
			return;
		}
		if(strcmp_P(command, PSTR("3")) == 0)
    1c96:	c8 01       	movw	r24, r16
    1c98:	61 e5       	ldi	r22, 0x51	; 81
    1c9a:	71 e0       	ldi	r23, 0x01	; 1
    1c9c:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    1ca0:	89 2b       	or	r24, r25
    1ca2:	41 f4       	brne	.+16     	; 0x1cb4 <system_menu+0x14a>
		{
			uart_puts_p(PSTR("Command prompt\n"));
    1ca4:	81 e4       	ldi	r24, 0x41	; 65
    1ca6:	91 e0       	ldi	r25, 0x01	; 1
    1ca8:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
			EEPROM_write(LOCATION_SYSTEM_SETTING, MODE_COMMAND);
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	62 e0       	ldi	r22, 0x02	; 2
    1cb2:	ec cf       	rjmp	.-40     	; 0x1c8c <system_menu+0x122>
			record_config_file(); //Put this new setting into the config file
			return;
		}
		if(strcmp_P(command, PSTR("4")) == 0)
    1cb4:	c8 01       	movw	r24, r16
    1cb6:	6f e3       	ldi	r22, 0x3F	; 63
    1cb8:	71 e0       	ldi	r23, 0x01	; 1
    1cba:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    1cbe:	89 2b       	or	r24, r25
    1cc0:	79 f4       	brne	.+30     	; 0x1ce0 <system_menu+0x176>
		{
			uart_puts_p(PSTR("New file number reset to zero\n"));
    1cc2:	80 e2       	ldi	r24, 0x20	; 32
    1cc4:	91 e0       	ldi	r25, 0x01	; 1
    1cc6:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
			EEPROM_write(LOCATION_FILE_NUMBER_LSB, 0);
    1cca:	83 e0       	ldi	r24, 0x03	; 3
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>
			EEPROM_write(LOCATION_FILE_NUMBER_MSB, 0);
    1cd4:	84 e0       	ldi	r24, 0x04	; 4
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>
    1cde:	57 c0       	rjmp	.+174    	; 0x1d8e <system_menu+0x224>
			//65533 log testing
			//EEPROM_write(LOCATION_FILE_NUMBER_LSB, 0xFD);
			//EEPROM_write(LOCATION_FILE_NUMBER_MSB, 0xFF);
			return;
		}
		if(strcmp_P(command, PSTR("5")) == 0)
    1ce0:	c8 01       	movw	r24, r16
    1ce2:	6e e1       	ldi	r22, 0x1E	; 30
    1ce4:	71 e0       	ldi	r23, 0x01	; 1
    1ce6:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    1cea:	89 2b       	or	r24, r25
    1cec:	e9 f4       	brne	.+58     	; 0x1d28 <system_menu+0x1be>
		{
			uart_puts_p(PSTR("Enter a new escape character: "));
    1cee:	8f ef       	ldi	r24, 0xFF	; 255
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
			setting_escape_character = uart_getc();
    1cf6:	0e 94 2d 2c 	call	0x585a	; 0x585a <uart_getc>
    1cfa:	68 2f       	mov	r22, r24
    1cfc:	80 93 49 07 	sts	0x0749, r24
			EEPROM_write(LOCATION_ESCAPE_CHAR, setting_escape_character);
    1d00:	85 e0       	ldi	r24, 0x05	; 5
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>
			record_config_file(); //Put this new setting into the config file
    1d08:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <record_config_file>

			uart_puts_p(PSTR("\nNew escape character: "));
    1d0c:	87 ee       	ldi	r24, 0xE7	; 231
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
			uart_putdw_dec(setting_escape_character);
    1d14:	60 91 49 07 	lds	r22, 0x0749
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	0e 94 a9 2b 	call	0x5752	; 0x5752 <uart_putdw_dec>
			uart_puts_p(PSTR("\n"));
    1d22:	85 ee       	ldi	r24, 0xE5	; 229
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	31 c0       	rjmp	.+98     	; 0x1d8a <system_menu+0x220>
			return;
		}
		if(strcmp_P(command, PSTR("6")) == 0)
    1d28:	c8 01       	movw	r24, r16
    1d2a:	63 ee       	ldi	r22, 0xE3	; 227
    1d2c:	70 e0       	ldi	r23, 0x00	; 0
    1d2e:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    1d32:	89 2b       	or	r24, r25
    1d34:	01 f5       	brne	.+64     	; 0x1d76 <system_menu+0x20c>
		{
			char choice = 255;
			while(choice > 9)
			{
				uart_puts_p(PSTR("Enter number of escape characters to look for: "));
    1d36:	83 eb       	ldi	r24, 0xB3	; 179
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
				choice = uart_getc() - '0';
    1d3e:	0e 94 2d 2c 	call	0x585a	; 0x585a <uart_getc>
    1d42:	68 2f       	mov	r22, r24
    1d44:	60 53       	subi	r22, 0x30	; 48
			return;
		}
		if(strcmp_P(command, PSTR("6")) == 0)
		{
			char choice = 255;
			while(choice > 9)
    1d46:	6a 30       	cpi	r22, 0x0A	; 10
    1d48:	b0 f7       	brcc	.-20     	; 0x1d36 <system_menu+0x1cc>
			{
				uart_puts_p(PSTR("Enter number of escape characters to look for: "));
				choice = uart_getc() - '0';
			}
			
			setting_max_escape_character = choice;
    1d4a:	60 93 85 04 	sts	0x0485, r22
			EEPROM_write(LOCATION_MAX_ESCAPE_CHAR, setting_max_escape_character);
    1d4e:	86 e0       	ldi	r24, 0x06	; 6
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>
			record_config_file(); //Put this new setting into the config file
    1d56:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <record_config_file>

			uart_puts_p(PSTR("\nNumber of escape characters needed: "));
    1d5a:	8d e8       	ldi	r24, 0x8D	; 141
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
			uart_putdw_dec(setting_max_escape_character);
    1d62:	60 91 85 04 	lds	r22, 0x0485
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	0e 94 a9 2b 	call	0x5752	; 0x5752 <uart_putdw_dec>
			uart_puts_p(PSTR("\n"));
    1d70:	8b e8       	ldi	r24, 0x8B	; 139
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0a c0       	rjmp	.+20     	; 0x1d8a <system_menu+0x220>
			return;
		}
		if(strcmp_P(command, PSTR("x")) == 0)
    1d76:	c8 01       	movw	r24, r16
    1d78:	69 e8       	ldi	r22, 0x89	; 137
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    1d80:	89 2b       	or	r24, r25
    1d82:	09 f0       	breq	.+2      	; 0x1d86 <system_menu+0x21c>
    1d84:	04 cf       	rjmp	.-504    	; 0x1b8e <system_menu+0x24>
		{
			//Do nothing, just exit
			uart_puts_p(PSTR("Exiting\n"));
    1d86:	80 e8       	ldi	r24, 0x80	; 128
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
			return;
		}
	}
}
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	1f 91       	pop	r17
    1d9e:	0f 91       	pop	r16
    1da0:	ff 90       	pop	r15
    1da2:	08 95       	ret

00001da4 <baud_menu>:
	uart_puts_p(PSTR("baud\t\t\t: Menu to configure baud rate\n"));
}

//Configure what baud rate to communicate at
void baud_menu(void)
{
    1da4:	ff 92       	push	r15
    1da6:	0f 93       	push	r16
    1da8:	1f 93       	push	r17
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <baud_menu+0xc>
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <baud_menu+0xe>
    1db2:	0f 92       	push	r0
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
	char buffer[5];

	uint8_t uart_speed = EEPROM_read(LOCATION_BAUD_SETTING);
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	0e 94 60 06 	call	0xcc0	; 0xcc0 <EEPROM_read>
    1dc0:	f8 2e       	mov	r15, r24
		uart_putc('>');

		//read command
		char* command = buffer;

		if(read_line(command, sizeof(buffer)) < 1)
    1dc2:	8e 01       	movw	r16, r28
    1dc4:	0f 5f       	subi	r16, 0xFF	; 255
    1dc6:	1f 4f       	sbci	r17, 0xFF	; 255

	uint8_t uart_speed = EEPROM_read(LOCATION_BAUD_SETTING);
	
	while(1)
	{
		uart_puts_p(PSTR("\nBaud Configuration:\n"));
    1dc8:	8b ec       	ldi	r24, 0xCB	; 203
    1dca:	93 e0       	ldi	r25, 0x03	; 3
    1dcc:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	
		uart_puts_p(PSTR("Current: "));
    1dd0:	81 ec       	ldi	r24, 0xC1	; 193
    1dd2:	93 e0       	ldi	r25, 0x03	; 3
    1dd4:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		if(uart_speed == BAUD_4800) uart_puts_p(PSTR("48"));
    1dd8:	84 e0       	ldi	r24, 0x04	; 4
    1dda:	f8 16       	cp	r15, r24
    1ddc:	19 f4       	brne	.+6      	; 0x1de4 <baud_menu+0x40>
    1dde:	8e eb       	ldi	r24, 0xBE	; 190
    1de0:	93 e0       	ldi	r25, 0x03	; 3
    1de2:	1c c0       	rjmp	.+56     	; 0x1e1c <baud_menu+0x78>
		if(uart_speed == BAUD_2400) uart_puts_p(PSTR("24"));
    1de4:	ff 20       	and	r15, r15
    1de6:	19 f4       	brne	.+6      	; 0x1dee <baud_menu+0x4a>
    1de8:	8b eb       	ldi	r24, 0xBB	; 187
    1dea:	93 e0       	ldi	r25, 0x03	; 3
    1dec:	17 c0       	rjmp	.+46     	; 0x1e1c <baud_menu+0x78>
		if(uart_speed == BAUD_9600) uart_puts_p(PSTR("96"));
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	f8 16       	cp	r15, r24
    1df2:	19 f4       	brne	.+6      	; 0x1dfa <baud_menu+0x56>
    1df4:	88 eb       	ldi	r24, 0xB8	; 184
    1df6:	93 e0       	ldi	r25, 0x03	; 3
    1df8:	11 c0       	rjmp	.+34     	; 0x1e1c <baud_menu+0x78>
		if(uart_speed == BAUD_19200) uart_puts_p(PSTR("192"));
    1dfa:	85 e0       	ldi	r24, 0x05	; 5
    1dfc:	f8 16       	cp	r15, r24
    1dfe:	19 f4       	brne	.+6      	; 0x1e06 <baud_menu+0x62>
    1e00:	84 eb       	ldi	r24, 0xB4	; 180
    1e02:	93 e0       	ldi	r25, 0x03	; 3
    1e04:	0b c0       	rjmp	.+22     	; 0x1e1c <baud_menu+0x78>
		if(uart_speed == BAUD_57600) uart_puts_p(PSTR("576"));
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	f8 16       	cp	r15, r24
    1e0a:	19 f4       	brne	.+6      	; 0x1e12 <baud_menu+0x6e>
    1e0c:	80 eb       	ldi	r24, 0xB0	; 176
    1e0e:	93 e0       	ldi	r25, 0x03	; 3
    1e10:	05 c0       	rjmp	.+10     	; 0x1e1c <baud_menu+0x78>
		if(uart_speed == BAUD_115200) uart_puts_p(PSTR("1152"));
    1e12:	83 e0       	ldi	r24, 0x03	; 3
    1e14:	f8 16       	cp	r15, r24
    1e16:	21 f4       	brne	.+8      	; 0x1e20 <baud_menu+0x7c>
    1e18:	8b ea       	ldi	r24, 0xAB	; 171
    1e1a:	93 e0       	ldi	r25, 0x03	; 3
    1e1c:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts_p(PSTR("00 bps\n"));
    1e20:	83 ea       	ldi	r24, 0xA3	; 163
    1e22:	93 e0       	ldi	r25, 0x03	; 3
    1e24:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	
		uart_puts_p(PSTR("Change to:\n"));
    1e28:	87 e9       	ldi	r24, 0x97	; 151
    1e2a:	93 e0       	ldi	r25, 0x03	; 3
    1e2c:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts_p(PSTR("1) 2400 bps\n"));
    1e30:	8a e8       	ldi	r24, 0x8A	; 138
    1e32:	93 e0       	ldi	r25, 0x03	; 3
    1e34:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts_p(PSTR("2) 4800 bps\n"));
    1e38:	8d e7       	ldi	r24, 0x7D	; 125
    1e3a:	93 e0       	ldi	r25, 0x03	; 3
    1e3c:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts_p(PSTR("3) 9600 bps\n"));
    1e40:	80 e7       	ldi	r24, 0x70	; 112
    1e42:	93 e0       	ldi	r25, 0x03	; 3
    1e44:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts_p(PSTR("4) 19200 bps\n"));
    1e48:	82 e6       	ldi	r24, 0x62	; 98
    1e4a:	93 e0       	ldi	r25, 0x03	; 3
    1e4c:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts_p(PSTR("5) 57600 bps\n"));
    1e50:	84 e5       	ldi	r24, 0x54	; 84
    1e52:	93 e0       	ldi	r25, 0x03	; 3
    1e54:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts_p(PSTR("6) 115200 bps\n"));
    1e58:	85 e4       	ldi	r24, 0x45	; 69
    1e5a:	93 e0       	ldi	r25, 0x03	; 3
    1e5c:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
		uart_puts_p(PSTR("x) Exit\n"));
    1e60:	8c e3       	ldi	r24, 0x3C	; 60
    1e62:	93 e0       	ldi	r25, 0x03	; 3
    1e64:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>

		//print prompt
		uart_putc('>');
    1e68:	8e e3       	ldi	r24, 0x3E	; 62
    1e6a:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>

		//read command
		char* command = buffer;

		if(read_line(command, sizeof(buffer)) < 1)
    1e6e:	c8 01       	movw	r24, r16
    1e70:	65 e0       	ldi	r22, 0x05	; 5
    1e72:	0e 94 67 08 	call	0x10ce	; 0x10ce <read_line>
    1e76:	88 23       	and	r24, r24
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <baud_menu+0xd8>
    1e7a:	a6 cf       	rjmp	.-180    	; 0x1dc8 <baud_menu+0x24>
			continue;

		//execute command
		if(strcmp_P(command, PSTR("1")) == 0)
    1e7c:	c8 01       	movw	r24, r16
    1e7e:	6a e3       	ldi	r22, 0x3A	; 58
    1e80:	73 e0       	ldi	r23, 0x03	; 3
    1e82:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    1e86:	89 2b       	or	r24, r25
    1e88:	41 f4       	brne	.+16     	; 0x1e9a <baud_menu+0xf6>
		{
			uart_puts_p(PSTR("\nGoing to 2400bps...\n"));
    1e8a:	84 e2       	ldi	r24, 0x24	; 36
    1e8c:	93 e0       	ldi	r25, 0x03	; 3
    1e8e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>

			//Set baud rate to 2400
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_2400);
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	60 e0       	ldi	r22, 0x00	; 0
    1e98:	4a c0       	rjmp	.+148    	; 0x1f2e <baud_menu+0x18a>
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("2")) == 0)
    1e9a:	c8 01       	movw	r24, r16
    1e9c:	62 e2       	ldi	r22, 0x22	; 34
    1e9e:	73 e0       	ldi	r23, 0x03	; 3
    1ea0:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    1ea4:	89 2b       	or	r24, r25
    1ea6:	41 f4       	brne	.+16     	; 0x1eb8 <baud_menu+0x114>
		{
			uart_puts_p(PSTR("\nGoing to 4800bps...\n"));
    1ea8:	8c e0       	ldi	r24, 0x0C	; 12
    1eaa:	93 e0       	ldi	r25, 0x03	; 3
    1eac:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>

			//Set baud rate to 4800
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_4800);
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	64 e0       	ldi	r22, 0x04	; 4
    1eb6:	3b c0       	rjmp	.+118    	; 0x1f2e <baud_menu+0x18a>
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("3")) == 0)
    1eb8:	c8 01       	movw	r24, r16
    1eba:	6a e0       	ldi	r22, 0x0A	; 10
    1ebc:	73 e0       	ldi	r23, 0x03	; 3
    1ebe:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    1ec2:	89 2b       	or	r24, r25
    1ec4:	41 f4       	brne	.+16     	; 0x1ed6 <baud_menu+0x132>
		{
			uart_puts_p(PSTR("\nGoing to 9600bps...\n"));
    1ec6:	84 ef       	ldi	r24, 0xF4	; 244
    1ec8:	92 e0       	ldi	r25, 0x02	; 2
    1eca:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>

			//Set baud rate to 9600
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_9600);
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	61 e0       	ldi	r22, 0x01	; 1
    1ed4:	2c c0       	rjmp	.+88     	; 0x1f2e <baud_menu+0x18a>
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("4")) == 0)
    1ed6:	c8 01       	movw	r24, r16
    1ed8:	62 ef       	ldi	r22, 0xF2	; 242
    1eda:	72 e0       	ldi	r23, 0x02	; 2
    1edc:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    1ee0:	89 2b       	or	r24, r25
    1ee2:	41 f4       	brne	.+16     	; 0x1ef4 <baud_menu+0x150>
		{
			uart_puts_p(PSTR("\nGoing to 19200bps...\n"));
    1ee4:	8b ed       	ldi	r24, 0xDB	; 219
    1ee6:	92 e0       	ldi	r25, 0x02	; 2
    1ee8:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>

			//Set baud rate to 19200
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_19200);
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	65 e0       	ldi	r22, 0x05	; 5
    1ef2:	1d c0       	rjmp	.+58     	; 0x1f2e <baud_menu+0x18a>
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("5")) == 0)
    1ef4:	c8 01       	movw	r24, r16
    1ef6:	69 ed       	ldi	r22, 0xD9	; 217
    1ef8:	72 e0       	ldi	r23, 0x02	; 2
    1efa:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    1efe:	89 2b       	or	r24, r25
    1f00:	41 f4       	brne	.+16     	; 0x1f12 <baud_menu+0x16e>
		{
			uart_puts_p(PSTR("\nGoing to 57600bps...\n"));
    1f02:	82 ec       	ldi	r24, 0xC2	; 194
    1f04:	92 e0       	ldi	r25, 0x02	; 2
    1f06:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>

			//Set baud rate to 57600
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_57600);
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	62 e0       	ldi	r22, 0x02	; 2
    1f10:	0e c0       	rjmp	.+28     	; 0x1f2e <baud_menu+0x18a>
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("6")) == 0)
    1f12:	c8 01       	movw	r24, r16
    1f14:	60 ec       	ldi	r22, 0xC0	; 192
    1f16:	72 e0       	ldi	r23, 0x02	; 2
    1f18:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    1f1c:	89 2b       	or	r24, r25
    1f1e:	79 f4       	brne	.+30     	; 0x1f3e <baud_menu+0x19a>
		{
			uart_puts_p(PSTR("\nGoing to 115200bps...\n"));
    1f20:	88 ea       	ldi	r24, 0xA8	; 168
    1f22:	92 e0       	ldi	r25, 0x02	; 2
    1f24:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>

			//Set baud rate to 115200
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_115200);
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	63 e0       	ldi	r22, 0x03	; 3
    1f2e:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>
			record_config_file(); //Put this new setting into the config file
    1f32:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <record_config_file>
			blink_error(ERROR_NEW_BAUD);
    1f36:	85 e0       	ldi	r24, 0x05	; 5
    1f38:	0e 94 ce 06 	call	0xd9c	; 0xd9c <blink_error>
    1f3c:	0c c0       	rjmp	.+24     	; 0x1f56 <baud_menu+0x1b2>
			return;
		}
		if(strcmp_P(command, PSTR("x")) == 0)
    1f3e:	c8 01       	movw	r24, r16
    1f40:	66 ea       	ldi	r22, 0xA6	; 166
    1f42:	72 e0       	ldi	r23, 0x02	; 2
    1f44:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    1f48:	89 2b       	or	r24, r25
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <baud_menu+0x1aa>
    1f4c:	3d cf       	rjmp	.-390    	; 0x1dc8 <baud_menu+0x24>
		{
			uart_puts_p(PSTR("\nExiting\n"));
    1f4e:	8c e9       	ldi	r24, 0x9C	; 156
    1f50:	92 e0       	ldi	r25, 0x02	; 2
    1f52:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
			//Do nothing, just exit
			return;
		}
	}
}
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	ff 90       	pop	r15
    1f6a:	08 95       	ret

00001f6c <command_shell>:
}
#endif


void command_shell(void)
{
    1f6c:	2f 92       	push	r2
    1f6e:	3f 92       	push	r3
    1f70:	4f 92       	push	r4
    1f72:	5f 92       	push	r5
    1f74:	6f 92       	push	r6
    1f76:	7f 92       	push	r7
    1f78:	8f 92       	push	r8
    1f7a:	9f 92       	push	r9
    1f7c:	af 92       	push	r10
    1f7e:	bf 92       	push	r11
    1f80:	cf 92       	push	r12
    1f82:	df 92       	push	r13
    1f84:	ef 92       	push	r14
    1f86:	ff 92       	push	r15
    1f88:	0f 93       	push	r16
    1f8a:	1f 93       	push	r17
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	c9 56       	subi	r28, 0x69	; 105
    1f96:	d0 40       	sbci	r29, 0x00	; 0
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
		//print prompt
		uart_putc('>');

		//read command
		char* command = buffer;
		if(read_line(command, sizeof(buffer)) < 1)
    1fa2:	9e e0       	ldi	r25, 0x0E	; 14
    1fa4:	69 2e       	mov	r6, r25
    1fa6:	71 2c       	mov	r7, r1
    1fa8:	6c 0e       	add	r6, r28
    1faa:	7d 1e       	adc	r7, r29
				continue;

			struct fat_dir_entry_struct file_entry;
			if(find_file_in_dir(fs, dd, command_arg, &file_entry, 0))
			{
				uart_putdw_dec(file_entry.file_size);
    1fac:	82 e6       	ldi	r24, 0x62	; 98
    1fae:	28 2e       	mov	r2, r24
    1fb0:	31 2c       	mov	r3, r1
    1fb2:	2c 0e       	add	r2, r28
    1fb4:	3d 1e       	adc	r3, r29

			/* print file contents */
			uint8_t buffer[8];
			uint32_t offset = 0;
			uint8_t len;
			while((len = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
    1fb6:	06 e0       	ldi	r16, 0x06	; 6
    1fb8:	40 2e       	mov	r4, r16
    1fba:	51 2c       	mov	r5, r1
    1fbc:	4c 0e       	add	r4, r28
    1fbe:	5d 1e       	adc	r5, r29
	uint8_t tmp_var;

	while(1)
	{
		//print prompt
		uart_putc('>');
    1fc0:	8e e3       	ldi	r24, 0x3E	; 62
    1fc2:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>

		//read command
		char* command = buffer;
		if(read_line(command, sizeof(buffer)) < 1)
    1fc6:	c3 01       	movw	r24, r6
    1fc8:	68 e1       	ldi	r22, 0x18	; 24
    1fca:	0e 94 67 08 	call	0x10ce	; 0x10ce <read_line>
    1fce:	88 23       	and	r24, r24
    1fd0:	b9 f3       	breq	.-18     	; 0x1fc0 <command_shell+0x54>
			continue;

		//Argument 1: The actual command
		char* command_arg = get_cmd_arg(0);
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_cmd_arg>
    1fd8:	8c 01       	movw	r16, r24

		//execute command
		if(strcmp_P(command_arg, PSTR("init")) == 0)
    1fda:	64 e0       	ldi	r22, 0x04	; 4
    1fdc:	7b e0       	ldi	r23, 0x0B	; 11
    1fde:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    1fe2:	89 2b       	or	r24, r25
    1fe4:	a9 f4       	brne	.+42     	; 0x2010 <command_shell+0xa4>
		{
			uart_puts_p(PSTR("Closing down file system\n"));
    1fe6:	8a ee       	ldi	r24, 0xEA	; 234
    1fe8:	9a e0       	ldi	r25, 0x0A	; 10
    1fea:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>

			/* close file system */
			fat_close(fs);
    1fee:	80 91 80 04 	lds	r24, 0x0480
    1ff2:	90 91 81 04 	lds	r25, 0x0481
    1ff6:	0e 94 31 1b 	call	0x3662	; 0x3662 <fat_close>

			/* close partition */
			partition_close(partition);
    1ffa:	80 91 89 04 	lds	r24, 0x0489
    1ffe:	90 91 8a 04 	lds	r25, 0x048A
    2002:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <partition_close>

			//Setup SPI, init SD card, etc
			init_media();
    2006:	0e 94 ff 08 	call	0x11fe	; 0x11fe <init_media>

			uart_puts_p(PSTR("File system initialized\n"));
    200a:	81 ed       	ldi	r24, 0xD1	; 209
    200c:	9a e0       	ldi	r25, 0x0A	; 10
    200e:	2a c4       	rjmp	.+2132   	; 0x2864 <command_shell+0x8f8>
		}
		else if(strcmp_P(command_arg, PSTR("?")) == 0)
    2010:	c8 01       	movw	r24, r16
    2012:	6f ec       	ldi	r22, 0xCF	; 207
    2014:	7a e0       	ldi	r23, 0x0A	; 10
    2016:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    201a:	89 2b       	or	r24, r25
    201c:	39 f0       	breq	.+14     	; 0x202c <command_shell+0xc0>
		{
			//Print available commands
			print_menu();
		}
		else if(strcmp_P(command_arg, PSTR("help")) == 0)
    201e:	c8 01       	movw	r24, r16
    2020:	6a ec       	ldi	r22, 0xCA	; 202
    2022:	7a e0       	ldi	r23, 0x0A	; 10
    2024:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    2028:	89 2b       	or	r24, r25
    202a:	19 f4       	brne	.+6      	; 0x2032 <command_shell+0xc6>
		{
			//Print available commands
			print_menu();
    202c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <print_menu>
    2030:	c7 cf       	rjmp	.-114    	; 0x1fc0 <command_shell+0x54>
		}
		else if(strcmp_P(command_arg, PSTR("baud")) == 0)
    2032:	c8 01       	movw	r24, r16
    2034:	65 ec       	ldi	r22, 0xC5	; 197
    2036:	7a e0       	ldi	r23, 0x0A	; 10
    2038:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    203c:	89 2b       	or	r24, r25
    203e:	19 f4       	brne	.+6      	; 0x2046 <command_shell+0xda>
		{
			//Go into baud select menu
			baud_menu();
    2040:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <baud_menu>
    2044:	bd cf       	rjmp	.-134    	; 0x1fc0 <command_shell+0x54>
		}
		else if(strcmp_P(command_arg, PSTR("set")) == 0)
    2046:	c8 01       	movw	r24, r16
    2048:	61 ec       	ldi	r22, 0xC1	; 193
    204a:	7a e0       	ldi	r23, 0x0A	; 10
    204c:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    2050:	89 2b       	or	r24, r25
    2052:	19 f4       	brne	.+6      	; 0x205a <command_shell+0xee>
		{
			//Go into system setting menu
			system_menu();
    2054:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <system_menu>
    2058:	b3 cf       	rjmp	.-154    	; 0x1fc0 <command_shell+0x54>
		{
			//Go into system setting menu
			create_lots_of_files();
		}
		#endif
		else if(strncmp_P(command_arg, PSTR("cd"), 2) == 0)
    205a:	c8 01       	movw	r24, r16
    205c:	6e eb       	ldi	r22, 0xBE	; 190
    205e:	7a e0       	ldi	r23, 0x0A	; 10
    2060:	42 e0       	ldi	r20, 0x02	; 2
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	0e 94 de 2c 	call	0x59bc	; 0x59bc <strncmp_P>
    2068:	89 2b       	or	r24, r25
    206a:	e1 f5       	brne	.+120    	; 0x20e4 <command_shell+0x178>
		{
			//Expecting only 2 arguments
			if (too_many_arguments_error(2, command))
    206c:	82 e0       	ldi	r24, 0x02	; 2
    206e:	b3 01       	movw	r22, r6
    2070:	0e 94 da 07 	call	0xfb4	; 0xfb4 <too_many_arguments_error>
    2074:	88 23       	and	r24, r24
    2076:	09 f0       	breq	.+2      	; 0x207a <command_shell+0x10e>
    2078:	a3 cf       	rjmp	.-186    	; 0x1fc0 <command_shell+0x54>
				continue;

			//Argument 2: Directory name
			command_arg = get_cmd_arg(1);
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_cmd_arg>
    2080:	7c 01       	movw	r14, r24
			if(command_arg == 0)
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	09 f4       	brne	.+2      	; 0x2088 <command_shell+0x11c>
    2086:	9c cf       	rjmp	.-200    	; 0x1fc0 <command_shell+0x54>
				continue;

			//change directory, do not use wildcards
			struct fat_dir_entry_struct subdir_entry;
			if(find_file_in_dir(fs, dd, command_arg, &subdir_entry, 0))
    2088:	60 91 47 07 	lds	r22, 0x0747
    208c:	70 91 48 07 	lds	r23, 0x0748
    2090:	80 91 80 04 	lds	r24, 0x0480
    2094:	90 91 81 04 	lds	r25, 0x0481
    2098:	a7 01       	movw	r20, r14
    209a:	9e 01       	movw	r18, r28
    209c:	21 5c       	subi	r18, 0xC1	; 193
    209e:	3f 4f       	sbci	r19, 0xFF	; 255
    20a0:	00 e0       	ldi	r16, 0x00	; 0
    20a2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <find_file_in_dir>
    20a6:	88 23       	and	r24, r24
    20a8:	b9 f0       	breq	.+46     	; 0x20d8 <command_shell+0x16c>
			{
				struct fat_dir_struct* dd_new = fat_open_dir(fs, &subdir_entry);
    20aa:	80 91 80 04 	lds	r24, 0x0480
    20ae:	90 91 81 04 	lds	r25, 0x0481
    20b2:	be 01       	movw	r22, r28
    20b4:	61 5c       	subi	r22, 0xC1	; 193
    20b6:	7f 4f       	sbci	r23, 0xFF	; 255
    20b8:	0e 94 f5 29 	call	0x53ea	; 0x53ea <fat_open_dir>
    20bc:	8c 01       	movw	r16, r24
				if(dd_new)
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	59 f0       	breq	.+22     	; 0x20d8 <command_shell+0x16c>
				{
					fat_close_dir(dd);
    20c2:	80 91 47 07 	lds	r24, 0x0747
    20c6:	90 91 48 07 	lds	r25, 0x0748
    20ca:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <fat_close_dir>
					dd = dd_new;
    20ce:	10 93 48 07 	sts	0x0748, r17
    20d2:	00 93 47 07 	sts	0x0747, r16
    20d6:	74 cf       	rjmp	.-280    	; 0x1fc0 <command_shell+0x54>
					continue;
				}
			}

			uart_puts_p(PSTR("directory not found: "));
    20d8:	88 ea       	ldi	r24, 0xA8	; 168
    20da:	9a e0       	ldi	r25, 0x0A	; 10
    20dc:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
			uart_puts(command_arg);
    20e0:	c7 01       	movw	r24, r14
    20e2:	c8 c3       	rjmp	.+1936   	; 0x2874 <command_shell+0x908>
			uart_putc('\n');
		}
		else if(strcmp_P(command_arg, PSTR("ls")) == 0)
    20e4:	c8 01       	movw	r24, r16
    20e6:	65 ea       	ldi	r22, 0xA5	; 165
    20e8:	7a e0       	ldi	r23, 0x0A	; 10
    20ea:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    20ee:	89 2b       	or	r24, r25
    20f0:	09 f0       	breq	.+2      	; 0x20f4 <command_shell+0x188>
    20f2:	48 c0       	rjmp	.+144    	; 0x2184 <command_shell+0x218>
		{
			//Argument 2: wild card search
			command_arg = get_cmd_arg(1);
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_cmd_arg>
    20fa:	6c 01       	movw	r12, r24

			/* print directory listing */
			struct fat_dir_entry_struct dir_entry;
			while(fat_read_dir(dd, &dir_entry))
    20fc:	1f e3       	ldi	r17, 0x3F	; 63
    20fe:	e1 2e       	mov	r14, r17
    2100:	f1 2c       	mov	r15, r1
    2102:	ec 0e       	add	r14, r28
    2104:	fd 1e       	adc	r15, r29

				//If no arguments list all files, otherwise we only list the files
				//being matched by the wildcard search
				if (tmp_var)
				{
					uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;
    2106:	b4 e2       	ldi	r27, 0x24	; 36
    2108:	bb 2e       	mov	r11, r27
    210a:	32 c0       	rjmp	.+100    	; 0x2170 <command_shell+0x204>
			struct fat_dir_entry_struct dir_entry;
			while(fat_read_dir(dd, &dir_entry))
			{
				//Check if we are to do a wild card search
				tmp_var = (command_arg == 0);
				if(command_arg != 0)
    210c:	c1 14       	cp	r12, r1
    210e:	d1 04       	cpc	r13, r1
    2110:	31 f0       	breq	.+12     	; 0x211e <command_shell+0x1b2>
					if (wildcmp(command_arg, dir_entry.long_name))
    2112:	c6 01       	movw	r24, r12
    2114:	b7 01       	movw	r22, r14
    2116:	0e 94 50 07 	call	0xea0	; 0xea0 <wildcmp>
    211a:	88 23       	and	r24, r24
    211c:	49 f1       	breq	.+82     	; 0x2170 <command_shell+0x204>

				//If no arguments list all files, otherwise we only list the files
				//being matched by the wildcard search
				if (tmp_var)
				{
					uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;
    211e:	d7 01       	movw	r26, r14
    2120:	0d 90       	ld	r0, X+
    2122:	00 20       	and	r0, r0
    2124:	e9 f7       	brne	.-6      	; 0x2120 <command_shell+0x1b4>
    2126:	8d 01       	movw	r16, r26
    2128:	01 50       	subi	r16, 0x01	; 1
    212a:	10 40       	sbci	r17, 0x00	; 0
    212c:	0e 19       	sub	r16, r14
    212e:	1f 09       	sbc	r17, r15

					uart_puts(dir_entry.long_name);
    2130:	c7 01       	movw	r24, r14
    2132:	0e 94 12 2c 	call	0x5824	; 0x5824 <uart_puts>
					uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
    2136:	a0 96       	adiw	r28, 0x20	; 32
    2138:	8f ad       	ldd	r24, Y+63	; 0x3f
    213a:	a0 97       	sbiw	r28, 0x20	; 32
    213c:	84 fd       	sbrc	r24, 4
    213e:	02 c0       	rjmp	.+4      	; 0x2144 <command_shell+0x1d8>
    2140:	80 e2       	ldi	r24, 0x20	; 32
    2142:	01 c0       	rjmp	.+2      	; 0x2146 <command_shell+0x1da>
    2144:	8f e2       	ldi	r24, 0x2F	; 47

				//If no arguments list all files, otherwise we only list the files
				//being matched by the wildcard search
				if (tmp_var)
				{
					uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;
    2146:	1b 2d       	mov	r17, r11
    2148:	10 1b       	sub	r17, r16

					uart_puts(dir_entry.long_name);
					uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
    214a:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    214e:	04 c0       	rjmp	.+8      	; 0x2158 <command_shell+0x1ec>
					while(spaces--)
						uart_putc(' ');
    2150:	80 e2       	ldi	r24, 0x20	; 32
    2152:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    2156:	11 50       	subi	r17, 0x01	; 1
				{
					uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;

					uart_puts(dir_entry.long_name);
					uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
					while(spaces--)
    2158:	11 23       	and	r17, r17
    215a:	d1 f7       	brne	.-12     	; 0x2150 <command_shell+0x1e4>
						uart_putc(' ');
					uart_putdw_dec(dir_entry.file_size);
    215c:	f1 01       	movw	r30, r2
    215e:	60 81       	ld	r22, Z
    2160:	71 81       	ldd	r23, Z+1	; 0x01
    2162:	82 81       	ldd	r24, Z+2	; 0x02
    2164:	93 81       	ldd	r25, Z+3	; 0x03
    2166:	0e 94 a9 2b 	call	0x5752	; 0x5752 <uart_putdw_dec>
					uart_putc('\n');
    216a:	8a e0       	ldi	r24, 0x0A	; 10
    216c:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
			//Argument 2: wild card search
			command_arg = get_cmd_arg(1);

			/* print directory listing */
			struct fat_dir_entry_struct dir_entry;
			while(fat_read_dir(dd, &dir_entry))
    2170:	80 91 47 07 	lds	r24, 0x0747
    2174:	90 91 48 07 	lds	r25, 0x0748
    2178:	b7 01       	movw	r22, r14
    217a:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <fat_read_dir>
    217e:	88 23       	and	r24, r24
    2180:	29 f6       	brne	.-118    	; 0x210c <command_shell+0x1a0>
    2182:	1e cf       	rjmp	.-452    	; 0x1fc0 <command_shell+0x54>
					uart_putdw_dec(dir_entry.file_size);
					uart_putc('\n');
				}
			}
		}
		else if(strncmp_P(command_arg, PSTR("cat"), 3) == 0)
    2184:	c8 01       	movw	r24, r16
    2186:	61 ea       	ldi	r22, 0xA1	; 161
    2188:	7a e0       	ldi	r23, 0x0A	; 10
    218a:	43 e0       	ldi	r20, 0x03	; 3
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	0e 94 de 2c 	call	0x59bc	; 0x59bc <strncmp_P>
    2192:	89 2b       	or	r24, r25
    2194:	09 f0       	breq	.+2      	; 0x2198 <command_shell+0x22c>
    2196:	4d c0       	rjmp	.+154    	; 0x2232 <command_shell+0x2c6>
		{
			//Expecting only 2 arguments
			if (too_many_arguments_error(2, command))
    2198:	82 e0       	ldi	r24, 0x02	; 2
    219a:	b3 01       	movw	r22, r6
    219c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <too_many_arguments_error>
    21a0:	88 23       	and	r24, r24
    21a2:	09 f0       	breq	.+2      	; 0x21a6 <command_shell+0x23a>
    21a4:	0d cf       	rjmp	.-486    	; 0x1fc0 <command_shell+0x54>
				continue;

			//Argument 2: File name
			command_arg = get_cmd_arg(1);
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_cmd_arg>
    21ac:	8c 01       	movw	r16, r24
			if(command_arg == 0)
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <command_shell+0x248>
    21b2:	06 cf       	rjmp	.-500    	; 0x1fc0 <command_shell+0x54>
				continue;

			/* search file in current directory and open it */
			struct fat_file_struct* fd = open_file_in_dir(fs, dd, command_arg);
    21b4:	60 91 47 07 	lds	r22, 0x0747
    21b8:	70 91 48 07 	lds	r23, 0x0748
    21bc:	80 91 80 04 	lds	r24, 0x0480
    21c0:	90 91 81 04 	lds	r25, 0x0481
    21c4:	a8 01       	movw	r20, r16
    21c6:	0e 94 8c 09 	call	0x1318	; 0x1318 <open_file_in_dir>
    21ca:	5c 01       	movw	r10, r24
			if(!fd)
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	21 f0       	breq	.+8      	; 0x21d8 <command_shell+0x26c>
    21d0:	cc 24       	eor	r12, r12
    21d2:	dd 24       	eor	r13, r13
    21d4:	76 01       	movw	r14, r12
    21d6:	22 c0       	rjmp	.+68     	; 0x221c <command_shell+0x2b0>
			{
				uart_puts_p(PSTR("error opening "));
    21d8:	82 e9       	ldi	r24, 0x92	; 146
    21da:	9a e0       	ldi	r25, 0x0A	; 10
    21dc:	48 c3       	rjmp	.+1680   	; 0x286e <command_shell+0x902>
			uint8_t buffer[8];
			uint32_t offset = 0;
			uint8_t len;
			while((len = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
			{
				uart_putdw_hex(offset);
    21de:	c7 01       	movw	r24, r14
    21e0:	b6 01       	movw	r22, r12
    21e2:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <uart_putdw_hex>
				uart_putc(':');
    21e6:	8a e3       	ldi	r24, 0x3A	; 58
    21e8:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    21ec:	82 01       	movw	r16, r4
				for(uint8_t i = 0; i < len; ++i)
				{
					uart_putc(' ');
    21ee:	80 e2       	ldi	r24, 0x20	; 32
    21f0:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
					uart_putc_hex(buffer[i]);
    21f4:	d8 01       	movw	r26, r16
    21f6:	8d 91       	ld	r24, X+
    21f8:	8d 01       	movw	r16, r26
    21fa:	0e 94 32 2b 	call	0x5664	; 0x5664 <uart_putc_hex>
			uint8_t len;
			while((len = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
			{
				uart_putdw_hex(offset);
				uart_putc(':');
				for(uint8_t i = 0; i < len; ++i)
    21fe:	80 2f       	mov	r24, r16
    2200:	84 19       	sub	r24, r4
    2202:	89 15       	cp	r24, r9
    2204:	a0 f3       	brcs	.-24     	; 0x21ee <command_shell+0x282>
				{
					uart_putc(' ');
					uart_putc_hex(buffer[i]);
				}
				uart_putc('\n');
    2206:	8a e0       	ldi	r24, 0x0A	; 10
    2208:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
				offset += 8;
    220c:	88 e0       	ldi	r24, 0x08	; 8
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	a0 e0       	ldi	r26, 0x00	; 0
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	c8 0e       	add	r12, r24
    2216:	d9 1e       	adc	r13, r25
    2218:	ea 1e       	adc	r14, r26
    221a:	fb 1e       	adc	r15, r27

			/* print file contents */
			uint8_t buffer[8];
			uint32_t offset = 0;
			uint8_t len;
			while((len = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
    221c:	c5 01       	movw	r24, r10
    221e:	b2 01       	movw	r22, r4
    2220:	48 e0       	ldi	r20, 0x08	; 8
    2222:	50 e0       	ldi	r21, 0x00	; 0
    2224:	0e 94 c2 1c 	call	0x3984	; 0x3984 <fat_read_file>
    2228:	98 2e       	mov	r9, r24
    222a:	88 23       	and	r24, r24
    222c:	c1 f6       	brne	.-80     	; 0x21de <command_shell+0x272>
				}
				uart_putc('\n');
				offset += 8;
			}

			fat_close_file(fd);
    222e:	c5 01       	movw	r24, r10
    2230:	7d c0       	rjmp	.+250    	; 0x232c <command_shell+0x3c0>
		}
		else if(strncmp_P(command_arg, PSTR("read"), 4) == 0)
    2232:	c8 01       	movw	r24, r16
    2234:	6d e8       	ldi	r22, 0x8D	; 141
    2236:	7a e0       	ldi	r23, 0x0A	; 10
    2238:	44 e0       	ldi	r20, 0x04	; 4
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	0e 94 de 2c 	call	0x59bc	; 0x59bc <strncmp_P>
    2240:	89 2b       	or	r24, r25
    2242:	09 f0       	breq	.+2      	; 0x2246 <command_shell+0x2da>
    2244:	e2 c0       	rjmp	.+452    	; 0x240a <command_shell+0x49e>
		{
			//Argument 2: File name
			command_arg = get_cmd_arg(1);
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_cmd_arg>
    224c:	8c 01       	movw	r16, r24
			if(command_arg == 0)
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	09 f4       	brne	.+2      	; 0x2254 <command_shell+0x2e8>
    2252:	b6 ce       	rjmp	.-660    	; 0x1fc0 <command_shell+0x54>
				continue;

			/* search file in current directory and open it */
			struct fat_file_struct* fd = open_file_in_dir(fs, dd, command_arg);
    2254:	60 91 47 07 	lds	r22, 0x0747
    2258:	70 91 48 07 	lds	r23, 0x0748
    225c:	80 91 80 04 	lds	r24, 0x0480
    2260:	90 91 81 04 	lds	r25, 0x0481
    2264:	a8 01       	movw	r20, r16
    2266:	0e 94 8c 09 	call	0x1318	; 0x1318 <open_file_in_dir>
    226a:	4c 01       	movw	r8, r24
			if(!fd)
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	19 f4       	brne	.+6      	; 0x2276 <command_shell+0x30a>
			{
				uart_puts_p(PSTR("error opening "));
    2270:	8e e7       	ldi	r24, 0x7E	; 126
    2272:	9a e0       	ldi	r25, 0x0A	; 10
    2274:	fc c2       	rjmp	.+1528   	; 0x286e <command_shell+0x902>
				uart_putc('\n');
				continue;
			}

			//Argument 3: File seek position
			if ((command_arg = get_cmd_arg(2)) != 0)
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_cmd_arg>
    227c:	ac 01       	movw	r20, r24
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	09 f4       	brne	.+2      	; 0x2284 <command_shell+0x318>
    2282:	57 c0       	rjmp	.+174    	; 0x2332 <command_shell+0x3c6>
			{
				if ((command_arg = is_number(command_arg, strlen(command_arg))) != 0)
    2284:	fc 01       	movw	r30, r24
    2286:	01 90       	ld	r0, Z+
    2288:	00 20       	and	r0, r0
    228a:	e9 f7       	brne	.-6      	; 0x2286 <command_shell+0x31a>
    228c:	31 97       	sbiw	r30, 0x01	; 1
    228e:	e8 1b       	sub	r30, r24
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    2294:	6e 2f       	mov	r22, r30
    2296:	70 e0       	ldi	r23, 0x00	; 0
    2298:	0b c0       	rjmp	.+22     	; 0x22b0 <command_shell+0x344>
		if (!isdigit(buffer[i]))
    229a:	fa 01       	movw	r30, r20
    229c:	e2 0f       	add	r30, r18
    229e:	f3 1f       	adc	r31, r19
    22a0:	80 81       	ld	r24, Z
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	c0 97       	sbiw	r24, 0x30	; 48
    22a6:	0a 97       	sbiw	r24, 0x0a	; 10
    22a8:	08 f0       	brcs	.+2      	; 0x22ac <command_shell+0x340>
    22aa:	43 c0       	rjmp	.+134    	; 0x2332 <command_shell+0x3c6>

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    22ac:	2f 5f       	subi	r18, 0xFF	; 255
    22ae:	3f 4f       	sbci	r19, 0xFF	; 255
    22b0:	26 17       	cp	r18, r22
    22b2:	37 07       	cpc	r19, r23
    22b4:	94 f3       	brlt	.-28     	; 0x229a <command_shell+0x32e>
    22b6:	8a 01       	movw	r16, r20
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e0       	ldi	r20, 0x00	; 0
    22be:	50 e0       	ldi	r21, 0x00	; 0
    22c0:	17 c0       	rjmp	.+46     	; 0x22f0 <command_shell+0x384>

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
        l = l * 10 + (*str++ - '0');
    22c2:	ca 01       	movw	r24, r20
    22c4:	b9 01       	movw	r22, r18
    22c6:	2a e0       	ldi	r18, 0x0A	; 10
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e0       	ldi	r20, 0x00	; 0
    22cc:	50 e0       	ldi	r21, 0x00	; 0
    22ce:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    22d2:	9b 01       	movw	r18, r22
    22d4:	ac 01       	movw	r20, r24
    22d6:	8f 2d       	mov	r24, r15
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	c0 97       	sbiw	r24, 0x30	; 48
    22dc:	aa 27       	eor	r26, r26
    22de:	97 fd       	sbrc	r25, 7
    22e0:	a0 95       	com	r26
    22e2:	ba 2f       	mov	r27, r26
    22e4:	28 0f       	add	r18, r24
    22e6:	39 1f       	adc	r19, r25
    22e8:	4a 1f       	adc	r20, r26
    22ea:	5b 1f       	adc	r21, r27
    22ec:	0f 5f       	subi	r16, 0xFF	; 255
    22ee:	1f 4f       	sbci	r17, 0xFF	; 255
}

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
    22f0:	d8 01       	movw	r26, r16
    22f2:	fc 90       	ld	r15, X
    22f4:	8f 2d       	mov	r24, r15
    22f6:	80 53       	subi	r24, 0x30	; 48
    22f8:	8a 30       	cpi	r24, 0x0A	; 10
    22fa:	18 f3       	brcs	.-58     	; 0x22c2 <command_shell+0x356>
			//Argument 3: File seek position
			if ((command_arg = get_cmd_arg(2)) != 0)
			{
				if ((command_arg = is_number(command_arg, strlen(command_arg))) != 0)
				{
					int32_t offset = strtolong(command_arg);
    22fc:	2a 83       	std	Y+2, r18	; 0x02
    22fe:	3b 83       	std	Y+3, r19	; 0x03
    2300:	4c 83       	std	Y+4, r20	; 0x04
    2302:	5d 83       	std	Y+5, r21	; 0x05
					if(!fat_seek_file(fd, &offset, FAT_SEEK_SET))
    2304:	c4 01       	movw	r24, r8
    2306:	be 01       	movw	r22, r28
    2308:	6e 5f       	subi	r22, 0xFE	; 254
    230a:	7f 4f       	sbci	r23, 0xFF	; 255
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	0e 94 1c 28 	call	0x5038	; 0x5038 <fat_seek_file>
    2312:	88 23       	and	r24, r24
    2314:	71 f4       	brne	.+28     	; 0x2332 <command_shell+0x3c6>
					{
						uart_puts_p(PSTR("error seeking on "));
    2316:	8c e6       	ldi	r24, 0x6C	; 108
    2318:	9a e0       	ldi	r25, 0x0A	; 10
    231a:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
						uart_puts(command);
    231e:	c3 01       	movw	r24, r6
    2320:	0e 94 12 2c 	call	0x5824	; 0x5824 <uart_puts>
						uart_putc('\n');
    2324:	8a e0       	ldi	r24, 0x0A	; 10
    2326:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>

						fat_close_file(fd);
    232a:	c4 01       	movw	r24, r8
    232c:	0e 94 bc 1c 	call	0x3978	; 0x3978 <fat_close_file>
    2330:	47 ce       	rjmp	.-882    	; 0x1fc0 <command_shell+0x54>
				}
			}

			//Argument 4: How much data (number of characters) to read from file
			uint32_t chunk_to_read = (uint32_t)-1;
			if ((command_arg = get_cmd_arg(3)) != 0)
    2332:	83 e0       	ldi	r24, 0x03	; 3
    2334:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_cmd_arg>
    2338:	ac 01       	movw	r20, r24
    233a:	00 97       	sbiw	r24, 0x00	; 0
    233c:	e1 f1       	breq	.+120    	; 0x23b6 <command_shell+0x44a>
				if ((command_arg = is_number(command_arg, strlen(command_arg))) != 0)
    233e:	fc 01       	movw	r30, r24
    2340:	01 90       	ld	r0, Z+
    2342:	00 20       	and	r0, r0
    2344:	e9 f7       	brne	.-6      	; 0x2340 <command_shell+0x3d4>
    2346:	31 97       	sbiw	r30, 0x01	; 1
    2348:	e8 1b       	sub	r30, r24
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    234e:	6e 2f       	mov	r22, r30
    2350:	70 e0       	ldi	r23, 0x00	; 0
    2352:	0a c0       	rjmp	.+20     	; 0x2368 <command_shell+0x3fc>
		if (!isdigit(buffer[i]))
    2354:	fa 01       	movw	r30, r20
    2356:	e2 0f       	add	r30, r18
    2358:	f3 1f       	adc	r31, r19
    235a:	80 81       	ld	r24, Z
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	c0 97       	sbiw	r24, 0x30	; 48
    2360:	0a 97       	sbiw	r24, 0x0a	; 10
    2362:	48 f5       	brcc	.+82     	; 0x23b6 <command_shell+0x44a>

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    2364:	2f 5f       	subi	r18, 0xFF	; 255
    2366:	3f 4f       	sbci	r19, 0xFF	; 255
    2368:	26 17       	cp	r18, r22
    236a:	37 07       	cpc	r19, r23
    236c:	9c f3       	brlt	.-26     	; 0x2354 <command_shell+0x3e8>
    236e:	6a 01       	movw	r12, r20
    2370:	ee 24       	eor	r14, r14
    2372:	ff 24       	eor	r15, r15
    2374:	87 01       	movw	r16, r14
    2376:	18 c0       	rjmp	.+48     	; 0x23a8 <command_shell+0x43c>

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
        l = l * 10 + (*str++ - '0');
    2378:	c8 01       	movw	r24, r16
    237a:	b7 01       	movw	r22, r14
    237c:	2a e0       	ldi	r18, 0x0A	; 10
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    2388:	7b 01       	movw	r14, r22
    238a:	8c 01       	movw	r16, r24
    238c:	8b 2d       	mov	r24, r11
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	c0 97       	sbiw	r24, 0x30	; 48
    2392:	aa 27       	eor	r26, r26
    2394:	97 fd       	sbrc	r25, 7
    2396:	a0 95       	com	r26
    2398:	ba 2f       	mov	r27, r26
    239a:	e8 0e       	add	r14, r24
    239c:	f9 1e       	adc	r15, r25
    239e:	0a 1f       	adc	r16, r26
    23a0:	1b 1f       	adc	r17, r27
    23a2:	08 94       	sec
    23a4:	c1 1c       	adc	r12, r1
    23a6:	d1 1c       	adc	r13, r1
}

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
    23a8:	f6 01       	movw	r30, r12
    23aa:	b0 80       	ld	r11, Z
    23ac:	8b 2d       	mov	r24, r11
    23ae:	80 53       	subi	r24, 0x30	; 48
    23b0:	8a 30       	cpi	r24, 0x0A	; 10
    23b2:	10 f3       	brcs	.-60     	; 0x2378 <command_shell+0x40c>
    23b4:	18 c0       	rjmp	.+48     	; 0x23e6 <command_shell+0x47a>
    23b6:	ee 24       	eor	r14, r14
    23b8:	ea 94       	dec	r14
    23ba:	fe 2c       	mov	r15, r14
    23bc:	87 01       	movw	r16, r14
    23be:	13 c0       	rjmp	.+38     	; 0x23e6 <command_shell+0x47a>

			/* print file contents */
			uint8_t buffer;
			while((fat_read_file(fd, &buffer, 1) > 0) && (chunk_to_read > 0))
			{
				if( buffer >= ' ' && buffer < 127 )
    23c0:	99 81       	ldd	r25, Y+1	; 0x01
    23c2:	89 2f       	mov	r24, r25
    23c4:	80 52       	subi	r24, 0x20	; 32
    23c6:	8f 35       	cpi	r24, 0x5F	; 95
    23c8:	10 f4       	brcc	.+4      	; 0x23ce <command_shell+0x462>
					uart_putc(buffer);
    23ca:	89 2f       	mov	r24, r25
    23cc:	05 c0       	rjmp	.+10     	; 0x23d8 <command_shell+0x46c>
				else if (buffer == '\n' )
    23ce:	9a 30       	cpi	r25, 0x0A	; 10
    23d0:	11 f4       	brne	.+4      	; 0x23d6 <command_shell+0x46a>
					uart_putc(buffer);
    23d2:	8a e0       	ldi	r24, 0x0A	; 10
    23d4:	01 c0       	rjmp	.+2      	; 0x23d8 <command_shell+0x46c>
				else
					uart_putc('.');
    23d6:	8e e2       	ldi	r24, 0x2E	; 46
    23d8:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>

				chunk_to_read--;
    23dc:	08 94       	sec
    23de:	e1 08       	sbc	r14, r1
    23e0:	f1 08       	sbc	r15, r1
    23e2:	01 09       	sbc	r16, r1
    23e4:	11 09       	sbc	r17, r1
				if ((command_arg = is_number(command_arg, strlen(command_arg))) != 0)
					chunk_to_read = strtolong(command_arg);

			/* print file contents */
			uint8_t buffer;
			while((fat_read_file(fd, &buffer, 1) > 0) && (chunk_to_read > 0))
    23e6:	c4 01       	movw	r24, r8
    23e8:	be 01       	movw	r22, r28
    23ea:	6f 5f       	subi	r22, 0xFF	; 255
    23ec:	7f 4f       	sbci	r23, 0xFF	; 255
    23ee:	41 e0       	ldi	r20, 0x01	; 1
    23f0:	50 e0       	ldi	r21, 0x00	; 0
    23f2:	0e 94 c2 1c 	call	0x3984	; 0x3984 <fat_read_file>
    23f6:	18 16       	cp	r1, r24
    23f8:	19 06       	cpc	r1, r25
    23fa:	0c f0       	brlt	.+2      	; 0x23fe <command_shell+0x492>
    23fc:	93 cf       	rjmp	.-218    	; 0x2324 <command_shell+0x3b8>
    23fe:	e1 14       	cp	r14, r1
    2400:	f1 04       	cpc	r15, r1
    2402:	01 05       	cpc	r16, r1
    2404:	11 05       	cpc	r17, r1
    2406:	e1 f6       	brne	.-72     	; 0x23c0 <command_shell+0x454>
    2408:	8d cf       	rjmp	.-230    	; 0x2324 <command_shell+0x3b8>
				chunk_to_read--;
			}
			uart_putc('\n');
			fat_close_file(fd);
		}
		else if(strcmp_P(command_arg, PSTR("disk")) == 0)
    240a:	c8 01       	movw	r24, r16
    240c:	67 e6       	ldi	r22, 0x67	; 103
    240e:	7a e0       	ldi	r23, 0x0A	; 10
    2410:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    2414:	89 2b       	or	r24, r25
    2416:	09 f0       	breq	.+2      	; 0x241a <command_shell+0x4ae>
    2418:	a8 c0       	rjmp	.+336    	; 0x256a <command_shell+0x5fe>
		{
			if(!print_disk_info(fs))
    241a:	00 91 80 04 	lds	r16, 0x0480
    241e:	10 91 81 04 	lds	r17, 0x0481
	return fat_open_file(fs, &file_entry);
}

uint8_t print_disk_info(const struct fat_fs_struct* fs)
{
    if(!fs)
    2422:	01 15       	cp	r16, r1
    2424:	11 05       	cpc	r17, r1
    2426:	09 f4       	brne	.+2      	; 0x242a <command_shell+0x4be>
    2428:	9d c0       	rjmp	.+314    	; 0x2564 <command_shell+0x5f8>
        return 0;

    struct sd_raw_info disk_info;
    if(!sd_raw_get_info(&disk_info))
    242a:	ce 01       	movw	r24, r28
    242c:	86 96       	adiw	r24, 0x26	; 38
    242e:	0e 94 02 17 	call	0x2e04	; 0x2e04 <sd_raw_get_info>
    2432:	88 23       	and	r24, r24
    2434:	09 f4       	brne	.+2      	; 0x2438 <command_shell+0x4cc>
    2436:	96 c0       	rjmp	.+300    	; 0x2564 <command_shell+0x5f8>
        return 0;

    uart_puts_p(PSTR("manuf:  0x")); uart_putc_hex(disk_info.manufacturer); uart_putc('\n');
    2438:	89 e6       	ldi	r24, 0x69	; 105
    243a:	9b e0       	ldi	r25, 0x0B	; 11
    243c:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
    2440:	8e a1       	ldd	r24, Y+38	; 0x26
    2442:	0e 94 32 2b 	call	0x5664	; 0x5664 <uart_putc_hex>
    2446:	8a e0       	ldi	r24, 0x0A	; 10
    2448:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    uart_puts_p(PSTR("oem:    ")); uart_puts((char*) disk_info.oem); uart_putc('\n');
    244c:	80 e6       	ldi	r24, 0x60	; 96
    244e:	9b e0       	ldi	r25, 0x0B	; 11
    2450:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
    2454:	ce 01       	movw	r24, r28
    2456:	87 96       	adiw	r24, 0x27	; 39
    2458:	0e 94 12 2c 	call	0x5824	; 0x5824 <uart_puts>
    245c:	8a e0       	ldi	r24, 0x0A	; 10
    245e:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    uart_puts_p(PSTR("prod:   ")); uart_puts((char*) disk_info.product); uart_putc('\n');
    2462:	87 e5       	ldi	r24, 0x57	; 87
    2464:	9b e0       	ldi	r25, 0x0B	; 11
    2466:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
    246a:	ce 01       	movw	r24, r28
    246c:	8a 96       	adiw	r24, 0x2a	; 42
    246e:	0e 94 12 2c 	call	0x5824	; 0x5824 <uart_puts>
    2472:	8a e0       	ldi	r24, 0x0A	; 10
    2474:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    uart_puts_p(PSTR("rev:    ")); uart_putc_hex(disk_info.revision); uart_putc('\n');
    2478:	8e e4       	ldi	r24, 0x4E	; 78
    247a:	9b e0       	ldi	r25, 0x0B	; 11
    247c:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
    2480:	88 a9       	ldd	r24, Y+48	; 0x30
    2482:	0e 94 32 2b 	call	0x5664	; 0x5664 <uart_putc_hex>
    2486:	8a e0       	ldi	r24, 0x0A	; 10
    2488:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    uart_puts_p(PSTR("serial: 0x")); uart_putdw_hex(disk_info.serial); uart_putc('\n');
    248c:	83 e4       	ldi	r24, 0x43	; 67
    248e:	9b e0       	ldi	r25, 0x0B	; 11
    2490:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
    2494:	69 a9       	ldd	r22, Y+49	; 0x31
    2496:	7a a9       	ldd	r23, Y+50	; 0x32
    2498:	8b a9       	ldd	r24, Y+51	; 0x33
    249a:	9c a9       	ldd	r25, Y+52	; 0x34
    249c:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <uart_putdw_hex>
    24a0:	8a e0       	ldi	r24, 0x0A	; 10
    24a2:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    uart_puts_p(PSTR("date:   ")); uart_putw_dec(disk_info.manufacturing_month); uart_putc('/');
    24a6:	8a e3       	ldi	r24, 0x3A	; 58
    24a8:	9b e0       	ldi	r25, 0x0B	; 11
    24aa:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
    24ae:	8e a9       	ldd	r24, Y+54	; 0x36
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <uart_putw_dec>
    24b6:	8f e2       	ldi	r24, 0x2F	; 47
    24b8:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
                                   uart_putw_dec(disk_info.manufacturing_year); uart_putc('\n');
    24bc:	8d a9       	ldd	r24, Y+53	; 0x35
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <uart_putw_dec>
    24c4:	8a e0       	ldi	r24, 0x0A	; 10
    24c6:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    uart_puts_p(PSTR("size:   ")); uart_putdw_dec(disk_info.capacity / 1024 / 1024); uart_puts_p(PSTR("MB\n"));
    24ca:	81 e3       	ldi	r24, 0x31	; 49
    24cc:	9b e0       	ldi	r25, 0x0B	; 11
    24ce:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
    24d2:	6f a9       	ldd	r22, Y+55	; 0x37
    24d4:	78 ad       	ldd	r23, Y+56	; 0x38
    24d6:	89 ad       	ldd	r24, Y+57	; 0x39
    24d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    24da:	a4 e1       	ldi	r26, 0x14	; 20
    24dc:	96 95       	lsr	r25
    24de:	87 95       	ror	r24
    24e0:	77 95       	ror	r23
    24e2:	67 95       	ror	r22
    24e4:	aa 95       	dec	r26
    24e6:	d1 f7       	brne	.-12     	; 0x24dc <command_shell+0x570>
    24e8:	0e 94 a9 2b 	call	0x5752	; 0x5752 <uart_putdw_dec>
    24ec:	8d e2       	ldi	r24, 0x2D	; 45
    24ee:	9b e0       	ldi	r25, 0x0B	; 11
    24f0:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
    uart_puts_p(PSTR("copy:   ")); uart_putw_dec(disk_info.flag_copy); uart_putc('\n');
    24f4:	84 e2       	ldi	r24, 0x24	; 36
    24f6:	9b e0       	ldi	r25, 0x0B	; 11
    24f8:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
    24fc:	8b ad       	ldd	r24, Y+59	; 0x3b
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <uart_putw_dec>
    2504:	8a e0       	ldi	r24, 0x0A	; 10
    2506:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    uart_puts_p(PSTR("wr.pr.: ")); uart_putw_dec(disk_info.flag_write_protect_temp); uart_putc('/');
    250a:	8b e1       	ldi	r24, 0x1B	; 27
    250c:	9b e0       	ldi	r25, 0x0B	; 11
    250e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
    2512:	8d ad       	ldd	r24, Y+61	; 0x3d
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <uart_putw_dec>
    251a:	8f e2       	ldi	r24, 0x2F	; 47
    251c:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
                                   uart_putw_dec(disk_info.flag_write_protect); uart_putc('\n');
    2520:	8c ad       	ldd	r24, Y+60	; 0x3c
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <uart_putw_dec>
    2528:	8a e0       	ldi	r24, 0x0A	; 10
    252a:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    uart_puts_p(PSTR("format: ")); uart_putw_dec(disk_info.format); uart_putc('\n');
    252e:	82 e1       	ldi	r24, 0x12	; 18
    2530:	9b e0       	ldi	r25, 0x0B	; 11
    2532:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
    2536:	8e ad       	ldd	r24, Y+62	; 0x3e
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <uart_putw_dec>
    253e:	8a e0       	ldi	r24, 0x0A	; 10
    2540:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    uart_puts_p(PSTR("free:   ")); uart_putdw_dec(fat_get_fs_free(fs)); uart_putc('/');
    2544:	89 e0       	ldi	r24, 0x09	; 9
    2546:	9b e0       	ldi	r25, 0x0B	; 11
    2548:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
    254c:	c8 01       	movw	r24, r16
    254e:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <fat_get_fs_free>
    2552:	0e 94 a9 2b 	call	0x5752	; 0x5752 <uart_putdw_dec>
    2556:	8f e2       	ldi	r24, 0x2F	; 47
    2558:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
                                   uart_putdw_dec(fat_get_fs_size(fs)); uart_putc('\n');
    255c:	c8 01       	movw	r24, r16
    255e:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <fat_get_fs_size>
    2562:	2f c0       	rjmp	.+94     	; 0x25c2 <command_shell+0x656>
			fat_close_file(fd);
		}
		else if(strcmp_P(command_arg, PSTR("disk")) == 0)
		{
			if(!print_disk_info(fs))
				uart_puts_p(PSTR("error reading disk info\n"));
    2564:	8e e4       	ldi	r24, 0x4E	; 78
    2566:	9a e0       	ldi	r25, 0x0A	; 10
    2568:	7d c1       	rjmp	.+762    	; 0x2864 <command_shell+0x8f8>
		}
		else if(strncmp_P(command_arg, PSTR("size"), 4) == 0)
    256a:	c8 01       	movw	r24, r16
    256c:	69 e4       	ldi	r22, 0x49	; 73
    256e:	7a e0       	ldi	r23, 0x0A	; 10
    2570:	44 e0       	ldi	r20, 0x04	; 4
    2572:	50 e0       	ldi	r21, 0x00	; 0
    2574:	0e 94 de 2c 	call	0x59bc	; 0x59bc <strncmp_P>
    2578:	89 2b       	or	r24, r25
    257a:	59 f5       	brne	.+86     	; 0x25d2 <command_shell+0x666>
		{
			//Expecting only 2 arguments
			if (too_many_arguments_error(2, command))
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	b3 01       	movw	r22, r6
    2580:	0e 94 da 07 	call	0xfb4	; 0xfb4 <too_many_arguments_error>
    2584:	88 23       	and	r24, r24
    2586:	09 f0       	breq	.+2      	; 0x258a <command_shell+0x61e>
    2588:	1b cd       	rjmp	.-1482   	; 0x1fc0 <command_shell+0x54>
				continue;

			//Argument 2: File name - no wildcard search
			command_arg = get_cmd_arg(1);
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_cmd_arg>
    2590:	ac 01       	movw	r20, r24
			if(command_arg == 0)
    2592:	00 97       	sbiw	r24, 0x00	; 0
    2594:	09 f4       	brne	.+2      	; 0x2598 <command_shell+0x62c>
    2596:	14 cd       	rjmp	.-1496   	; 0x1fc0 <command_shell+0x54>
				continue;

			struct fat_dir_entry_struct file_entry;
			if(find_file_in_dir(fs, dd, command_arg, &file_entry, 0))
    2598:	60 91 47 07 	lds	r22, 0x0747
    259c:	70 91 48 07 	lds	r23, 0x0748
    25a0:	80 91 80 04 	lds	r24, 0x0480
    25a4:	90 91 81 04 	lds	r25, 0x0481
    25a8:	9e 01       	movw	r18, r28
    25aa:	21 5c       	subi	r18, 0xC1	; 193
    25ac:	3f 4f       	sbci	r19, 0xFF	; 255
    25ae:	00 e0       	ldi	r16, 0x00	; 0
    25b0:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <find_file_in_dir>
    25b4:	88 23       	and	r24, r24
    25b6:	41 f0       	breq	.+16     	; 0x25c8 <command_shell+0x65c>
			{
				uart_putdw_dec(file_entry.file_size);
    25b8:	d1 01       	movw	r26, r2
    25ba:	6d 91       	ld	r22, X+
    25bc:	7d 91       	ld	r23, X+
    25be:	8d 91       	ld	r24, X+
    25c0:	9c 91       	ld	r25, X
    25c2:	0e 94 a9 2b 	call	0x5752	; 0x5752 <uart_putdw_dec>
    25c6:	58 c1       	rjmp	.+688    	; 0x2878 <command_shell+0x90c>
				uart_putc('\n');
			}
            else
				uart_puts("-1\n");
    25c8:	8d e9       	ldi	r24, 0x9D	; 157
    25ca:	91 e0       	ldi	r25, 0x01	; 1
    25cc:	0e 94 12 2c 	call	0x5824	; 0x5824 <uart_puts>
    25d0:	f7 cc       	rjmp	.-1554   	; 0x1fc0 <command_shell+0x54>
		}
#if FAT_WRITE_SUPPORT
		else if(strncmp_P(command_arg, PSTR("rm"), 2) == 0)
    25d2:	c8 01       	movw	r24, r16
    25d4:	66 e4       	ldi	r22, 0x46	; 70
    25d6:	7a e0       	ldi	r23, 0x0A	; 10
    25d8:	42 e0       	ldi	r20, 0x02	; 2
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	0e 94 de 2c 	call	0x59bc	; 0x59bc <strncmp_P>
    25e0:	89 2b       	or	r24, r25
    25e2:	b9 f5       	brne	.+110    	; 0x2652 <command_shell+0x6e6>
		{
			//Expecting max 3 arguments
			if (too_many_arguments_error(3, command))
    25e4:	83 e0       	ldi	r24, 0x03	; 3
    25e6:	b3 01       	movw	r22, r6
    25e8:	0e 94 da 07 	call	0xfb4	; 0xfb4 <too_many_arguments_error>
    25ec:	88 23       	and	r24, r24
    25ee:	09 f0       	breq	.+2      	; 0x25f2 <command_shell+0x686>
    25f0:	e7 cc       	rjmp	.-1586   	; 0x1fc0 <command_shell+0x54>
				continue;

			//Argument 2: File name or wildcard removal
			command_arg = get_cmd_arg(1);
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_cmd_arg>
    25f8:	7c 01       	movw	r14, r24
			if(command_arg == 0)
    25fa:	00 97       	sbiw	r24, 0x00	; 0
    25fc:	a9 f4       	brne	.+42     	; 0x2628 <command_shell+0x6bc>
    25fe:	e0 cc       	rjmp	.-1600   	; 0x1fc0 <command_shell+0x54>
				continue;

			struct fat_dir_entry_struct file_entry;
			while(find_file_in_dir(fs, dd, command_arg, &file_entry, 1))
			{
				if(!fat_delete_file(fs, &file_entry))
    2600:	80 91 80 04 	lds	r24, 0x0480
    2604:	90 91 81 04 	lds	r25, 0x0481
    2608:	b6 01       	movw	r22, r12
    260a:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <fat_delete_file>
    260e:	88 23       	and	r24, r24
    2610:	81 f4       	brne	.+32     	; 0x2632 <command_shell+0x6c6>
				{
					//Some kind of error, but continue anyway
					uart_puts_p(PSTR("error deleting file: "));
    2612:	80 e3       	ldi	r24, 0x30	; 48
    2614:	9a e0       	ldi	r25, 0x0A	; 10
    2616:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
					uart_puts(command);
    261a:	c3 01       	movw	r24, r6
    261c:	0e 94 12 2c 	call	0x5824	; 0x5824 <uart_puts>
					uart_putc('\n');
    2620:	8a e0       	ldi	r24, 0x0A	; 10
    2622:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    2626:	05 c0       	rjmp	.+10     	; 0x2632 <command_shell+0x6c6>
			command_arg = get_cmd_arg(1);
			if(command_arg == 0)
				continue;

			struct fat_dir_entry_struct file_entry;
			while(find_file_in_dir(fs, dd, command_arg, &file_entry, 1))
    2628:	ff e3       	ldi	r31, 0x3F	; 63
    262a:	cf 2e       	mov	r12, r31
    262c:	d1 2c       	mov	r13, r1
    262e:	cc 0e       	add	r12, r28
    2630:	dd 1e       	adc	r13, r29
    2632:	60 91 47 07 	lds	r22, 0x0747
    2636:	70 91 48 07 	lds	r23, 0x0748
    263a:	80 91 80 04 	lds	r24, 0x0480
    263e:	90 91 81 04 	lds	r25, 0x0481
    2642:	a7 01       	movw	r20, r14
    2644:	96 01       	movw	r18, r12
    2646:	01 e0       	ldi	r16, 0x01	; 1
    2648:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <find_file_in_dir>
    264c:	88 23       	and	r24, r24
    264e:	c1 f6       	brne	.-80     	; 0x2600 <command_shell+0x694>
    2650:	b7 cc       	rjmp	.-1682   	; 0x1fc0 <command_shell+0x54>
					uart_putc('\n');
				}
			}

		}
		else if(strncmp_P(command_arg, PSTR("new"), 3) == 0)
    2652:	c8 01       	movw	r24, r16
    2654:	6c e2       	ldi	r22, 0x2C	; 44
    2656:	7a e0       	ldi	r23, 0x0A	; 10
    2658:	43 e0       	ldi	r20, 0x03	; 3
    265a:	50 e0       	ldi	r21, 0x00	; 0
    265c:	0e 94 de 2c 	call	0x59bc	; 0x59bc <strncmp_P>
    2660:	89 2b       	or	r24, r25
    2662:	01 f5       	brne	.+64     	; 0x26a4 <command_shell+0x738>
		{
			//Expecting only 2 arguments
			if (too_many_arguments_error(2, command))
    2664:	82 e0       	ldi	r24, 0x02	; 2
    2666:	b3 01       	movw	r22, r6
    2668:	0e 94 da 07 	call	0xfb4	; 0xfb4 <too_many_arguments_error>
    266c:	88 23       	and	r24, r24
    266e:	09 f0       	breq	.+2      	; 0x2672 <command_shell+0x706>
    2670:	a7 cc       	rjmp	.-1714   	; 0x1fc0 <command_shell+0x54>
				continue;

			//Argument 2: File name
			command_arg = get_cmd_arg(1);
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_cmd_arg>
    2678:	bc 01       	movw	r22, r24
			if(command_arg == 0)
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	09 f4       	brne	.+2      	; 0x2680 <command_shell+0x714>
    267e:	a0 cc       	rjmp	.-1728   	; 0x1fc0 <command_shell+0x54>
				continue;

			struct fat_dir_entry_struct file_entry;
			if(!fat_create_file(dd, command_arg, &file_entry))
    2680:	80 91 47 07 	lds	r24, 0x0747
    2684:	90 91 48 07 	lds	r25, 0x0748
    2688:	ae 01       	movw	r20, r28
    268a:	41 5c       	subi	r20, 0xC1	; 193
    268c:	5f 4f       	sbci	r21, 0xFF	; 255
    268e:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fat_create_file>
    2692:	88 23       	and	r24, r24
    2694:	09 f0       	breq	.+2      	; 0x2698 <command_shell+0x72c>
    2696:	94 cc       	rjmp	.-1752   	; 0x1fc0 <command_shell+0x54>
			{
				uart_puts_p(PSTR("error creating file: "));
    2698:	86 e1       	ldi	r24, 0x16	; 22
    269a:	9a e0       	ldi	r25, 0x0A	; 10
    269c:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
				uart_puts(command);
    26a0:	c3 01       	movw	r24, r6
    26a2:	e8 c0       	rjmp	.+464    	; 0x2874 <command_shell+0x908>
				uart_putc('\n');
			}
		}
		else if(strncmp_P(command_arg, PSTR("write"), 5) == 0)
    26a4:	c8 01       	movw	r24, r16
    26a6:	60 e1       	ldi	r22, 0x10	; 16
    26a8:	7a e0       	ldi	r23, 0x0A	; 10
    26aa:	45 e0       	ldi	r20, 0x05	; 5
    26ac:	50 e0       	ldi	r21, 0x00	; 0
    26ae:	0e 94 de 2c 	call	0x59bc	; 0x59bc <strncmp_P>
    26b2:	89 2b       	or	r24, r25
    26b4:	09 f0       	breq	.+2      	; 0x26b8 <command_shell+0x74c>
    26b6:	8f c0       	rjmp	.+286    	; 0x27d6 <command_shell+0x86a>
		{
			//Argument 2: File name
			command_arg = get_cmd_arg(1);
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_cmd_arg>
    26be:	5c 01       	movw	r10, r24
			if(command_arg == 0)
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	09 f4       	brne	.+2      	; 0x26c6 <command_shell+0x75a>
    26c4:	7d cc       	rjmp	.-1798   	; 0x1fc0 <command_shell+0x54>
				continue;

			//Argument 3: Offset value - do not continue if the value is not correct
			char* offset_buffer;
			if ((offset_buffer = get_cmd_arg(2)) != 0)
    26c6:	82 e0       	ldi	r24, 0x02	; 2
    26c8:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_cmd_arg>
    26cc:	8c 01       	movw	r16, r24
    26ce:	00 97       	sbiw	r24, 0x00	; 0
    26d0:	c9 f0       	breq	.+50     	; 0x2704 <command_shell+0x798>
				if ((offset_buffer = is_number(offset_buffer, strlen(offset_buffer))) == 0)
    26d2:	fc 01       	movw	r30, r24
    26d4:	01 90       	ld	r0, Z+
    26d6:	00 20       	and	r0, r0
    26d8:	e9 f7       	brne	.-6      	; 0x26d4 <command_shell+0x768>
    26da:	31 97       	sbiw	r30, 0x01	; 1
    26dc:	e8 1b       	sub	r30, r24
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    26e2:	4e 2f       	mov	r20, r30
    26e4:	50 e0       	ldi	r21, 0x00	; 0
    26e6:	0b c0       	rjmp	.+22     	; 0x26fe <command_shell+0x792>
		if (!isdigit(buffer[i]))
    26e8:	f8 01       	movw	r30, r16
    26ea:	e2 0f       	add	r30, r18
    26ec:	f3 1f       	adc	r31, r19
    26ee:	80 81       	ld	r24, Z
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	c0 97       	sbiw	r24, 0x30	; 48
    26f4:	0a 97       	sbiw	r24, 0x0a	; 10
    26f6:	08 f0       	brcs	.+2      	; 0x26fa <command_shell+0x78e>
    26f8:	63 cc       	rjmp	.-1850   	; 0x1fc0 <command_shell+0x54>

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    26fa:	2f 5f       	subi	r18, 0xFF	; 255
    26fc:	3f 4f       	sbci	r19, 0xFF	; 255
    26fe:	24 17       	cp	r18, r20
    2700:	35 07       	cpc	r19, r21
    2702:	94 f3       	brlt	.-28     	; 0x26e8 <command_shell+0x77c>
				if ((offset_buffer = is_number(offset_buffer, strlen(offset_buffer))) == 0)
					continue;


			/* search file in current directory and open it */
			struct fat_file_struct* fd = open_file_in_dir(fs, dd, command_arg);
    2704:	60 91 47 07 	lds	r22, 0x0747
    2708:	70 91 48 07 	lds	r23, 0x0748
    270c:	80 91 80 04 	lds	r24, 0x0480
    2710:	90 91 81 04 	lds	r25, 0x0481
    2714:	a5 01       	movw	r20, r10
    2716:	0e 94 8c 09 	call	0x1318	; 0x1318 <open_file_in_dir>
    271a:	7c 01       	movw	r14, r24
			if(!fd)
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	29 f0       	breq	.+10     	; 0x272a <command_shell+0x7be>
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	1d c0       	rjmp	.+58     	; 0x2764 <command_shell+0x7f8>
			{
				uart_puts_p(PSTR("error opening "));
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	9a e0       	ldi	r25, 0x0A	; 10
    272e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
				uart_puts(command_arg);
    2732:	c5 01       	movw	r24, r10
    2734:	9f c0       	rjmp	.+318    	; 0x2874 <command_shell+0x908>

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
        l = l * 10 + (*str++ - '0');
    2736:	ca 01       	movw	r24, r20
    2738:	b9 01       	movw	r22, r18
    273a:	2a e0       	ldi	r18, 0x0A	; 10
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	50 e0       	ldi	r21, 0x00	; 0
    2742:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    2746:	9b 01       	movw	r18, r22
    2748:	ac 01       	movw	r20, r24
    274a:	8d 2d       	mov	r24, r13
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	c0 97       	sbiw	r24, 0x30	; 48
    2750:	aa 27       	eor	r26, r26
    2752:	97 fd       	sbrc	r25, 7
    2754:	a0 95       	com	r26
    2756:	ba 2f       	mov	r27, r26
    2758:	28 0f       	add	r18, r24
    275a:	39 1f       	adc	r19, r25
    275c:	4a 1f       	adc	r20, r26
    275e:	5b 1f       	adc	r21, r27
    2760:	0f 5f       	subi	r16, 0xFF	; 255
    2762:	1f 4f       	sbci	r17, 0xFF	; 255
}

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
    2764:	f8 01       	movw	r30, r16
    2766:	d0 80       	ld	r13, Z
    2768:	8d 2d       	mov	r24, r13
    276a:	80 53       	subi	r24, 0x30	; 48
    276c:	8a 30       	cpi	r24, 0x0A	; 10
    276e:	18 f3       	brcs	.-58     	; 0x2736 <command_shell+0x7ca>
				uart_putc('\n');
				continue;
			}

			//Seek file position
			int32_t offset = strtolong(offset_buffer);
    2770:	2a 83       	std	Y+2, r18	; 0x02
    2772:	3b 83       	std	Y+3, r19	; 0x03
    2774:	4c 83       	std	Y+4, r20	; 0x04
    2776:	5d 83       	std	Y+5, r21	; 0x05
			if(!fat_seek_file(fd, &offset, FAT_SEEK_SET))
    2778:	c7 01       	movw	r24, r14
    277a:	be 01       	movw	r22, r28
    277c:	6e 5f       	subi	r22, 0xFE	; 254
    277e:	7f 4f       	sbci	r23, 0xFF	; 255
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	0e 94 1c 28 	call	0x5038	; 0x5038 <fat_seek_file>
    2786:	88 23       	and	r24, r24
    2788:	59 f4       	brne	.+22     	; 0x27a0 <command_shell+0x834>
			{
				uart_puts_p(PSTR("error seeking on "));
    278a:	8f ee       	ldi	r24, 0xEF	; 239
    278c:	99 e0       	ldi	r25, 0x09	; 9
    278e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
				uart_puts(command_arg);
    2792:	c5 01       	movw	r24, r10
    2794:	0e 94 12 2c 	call	0x5824	; 0x5824 <uart_puts>
				uart_putc('\n');
    2798:	8a e0       	ldi	r24, 0x0A	; 10
    279a:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    279e:	19 c0       	rjmp	.+50     	; 0x27d2 <command_shell+0x866>
			/* read text from the shell and write it to the file */
			uint8_t data_len;
			while(1)
			{
				/* give a different prompt */
				uart_putc('<');
    27a0:	8c e3       	ldi	r24, 0x3C	; 60
    27a2:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
				//uart_putc(' ');

				/* read one line of text */
				data_len = read_line(buffer, sizeof(buffer));
    27a6:	c3 01       	movw	r24, r6
    27a8:	68 e1       	ldi	r22, 0x18	; 24
    27aa:	0e 94 67 08 	call	0x10ce	; 0x10ce <read_line>
    27ae:	18 2f       	mov	r17, r24
				if(!data_len)
    27b0:	88 23       	and	r24, r24
    27b2:	79 f0       	breq	.+30     	; 0x27d2 <command_shell+0x866>
					break;

				/* write text to file */
				if(fat_write_file(fd, (uint8_t*) buffer, data_len) != data_len)
    27b4:	c7 01       	movw	r24, r14
    27b6:	b3 01       	movw	r22, r6
    27b8:	41 2f       	mov	r20, r17
    27ba:	50 e0       	ldi	r21, 0x00	; 0
    27bc:	0e 94 78 28 	call	0x50f0	; 0x50f0 <fat_write_file>
    27c0:	21 2f       	mov	r18, r17
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	82 17       	cp	r24, r18
    27c6:	93 07       	cpc	r25, r19
    27c8:	59 f3       	breq	.-42     	; 0x27a0 <command_shell+0x834>
				{
					uart_puts_p(PSTR("error writing to file\n"));
    27ca:	88 ed       	ldi	r24, 0xD8	; 216
    27cc:	99 e0       	ldi	r25, 0x09	; 9
    27ce:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
					break;
				}
			}

			fat_close_file(fd);
    27d2:	c7 01       	movw	r24, r14
    27d4:	ab cd       	rjmp	.-1194   	; 0x232c <command_shell+0x3c0>
		}

		else if(strncmp_P(command_arg, PSTR("append"), 6) == 0)
    27d6:	c8 01       	movw	r24, r16
    27d8:	61 ed       	ldi	r22, 0xD1	; 209
    27da:	79 e0       	ldi	r23, 0x09	; 9
    27dc:	46 e0       	ldi	r20, 0x06	; 6
    27de:	50 e0       	ldi	r21, 0x00	; 0
    27e0:	0e 94 de 2c 	call	0x59bc	; 0x59bc <strncmp_P>
    27e4:	89 2b       	or	r24, r25
    27e6:	81 f4       	brne	.+32     	; 0x2808 <command_shell+0x89c>
		{
			//Expecting only 2 arguments
			if (too_many_arguments_error(2, command))
    27e8:	82 e0       	ldi	r24, 0x02	; 2
    27ea:	b3 01       	movw	r22, r6
    27ec:	0e 94 da 07 	call	0xfb4	; 0xfb4 <too_many_arguments_error>
    27f0:	88 23       	and	r24, r24
    27f2:	09 f0       	breq	.+2      	; 0x27f6 <command_shell+0x88a>
    27f4:	e5 cb       	rjmp	.-2102   	; 0x1fc0 <command_shell+0x54>
				continue;

			//Argument 2: File name
			//Find the end of a current file and begins writing to it
			//Ends only when the user inputs Ctrl+z (ASCII 26)
			command_arg = get_cmd_arg(1);
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_cmd_arg>
			if(command_arg == 0)
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	09 f4       	brne	.+2      	; 0x2802 <command_shell+0x896>
    2800:	df cb       	rjmp	.-2114   	; 0x1fc0 <command_shell+0x54>
				continue;
				
			append_file(command_arg); //Uses circular buffer to capture full stream of text and append to file
    2802:	0e 94 bd 09 	call	0x137a	; 0x137a <append_file>
    2806:	dc cb       	rjmp	.-2120   	; 0x1fc0 <command_shell+0x54>
		}
		else if(strncmp_P(command_arg, PSTR("md"), 2) == 0)
    2808:	c8 01       	movw	r24, r16
    280a:	6e ec       	ldi	r22, 0xCE	; 206
    280c:	79 e0       	ldi	r23, 0x09	; 9
    280e:	42 e0       	ldi	r20, 0x02	; 2
    2810:	50 e0       	ldi	r21, 0x00	; 0
    2812:	0e 94 de 2c 	call	0x59bc	; 0x59bc <strncmp_P>
    2816:	89 2b       	or	r24, r25
    2818:	b9 f4       	brne	.+46     	; 0x2848 <command_shell+0x8dc>
		{
			//Argument 2: Directory name
			command_arg = get_cmd_arg(1);
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_cmd_arg>
    2820:	8c 01       	movw	r16, r24
			if(command_arg == 0)
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	09 f4       	brne	.+2      	; 0x2828 <command_shell+0x8bc>
    2826:	cc cb       	rjmp	.-2152   	; 0x1fc0 <command_shell+0x54>
				continue;

			struct fat_dir_entry_struct dir_entry;
			if(!fat_create_dir(dd, command_arg, &dir_entry))
    2828:	80 91 47 07 	lds	r24, 0x0747
    282c:	90 91 48 07 	lds	r25, 0x0748
    2830:	b8 01       	movw	r22, r16
    2832:	ae 01       	movw	r20, r28
    2834:	41 5c       	subi	r20, 0xC1	; 193
    2836:	5f 4f       	sbci	r21, 0xFF	; 255
    2838:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <fat_create_dir>
    283c:	88 23       	and	r24, r24
    283e:	09 f0       	breq	.+2      	; 0x2842 <command_shell+0x8d6>
    2840:	bf cb       	rjmp	.-2178   	; 0x1fc0 <command_shell+0x54>
			{
				uart_puts_p(PSTR("error creating directory: "));
    2842:	83 eb       	ldi	r24, 0xB3	; 179
    2844:	99 e0       	ldi	r25, 0x09	; 9
    2846:	13 c0       	rjmp	.+38     	; 0x286e <command_shell+0x902>
				uart_putc('\n');
			}
		}
#endif
#if SD_RAW_WRITE_BUFFERING
		else if(strcmp_P(command_arg, PSTR("sync")) == 0)
    2848:	c8 01       	movw	r24, r16
    284a:	6e ea       	ldi	r22, 0xAE	; 174
    284c:	79 e0       	ldi	r23, 0x09	; 9
    284e:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strcmp_P>
    2852:	89 2b       	or	r24, r25
    2854:	51 f4       	brne	.+20     	; 0x286a <command_shell+0x8fe>
		{
			if(!sd_raw_sync())
    2856:	0e 94 f5 18 	call	0x31ea	; 0x31ea <sd_raw_sync>
    285a:	88 23       	and	r24, r24
    285c:	09 f0       	breq	.+2      	; 0x2860 <command_shell+0x8f4>
    285e:	b0 cb       	rjmp	.-2208   	; 0x1fc0 <command_shell+0x54>
				uart_puts_p(PSTR("error syncing disk\n"));
    2860:	8a e9       	ldi	r24, 0x9A	; 154
    2862:	99 e0       	ldi	r25, 0x09	; 9
    2864:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
    2868:	ab cb       	rjmp	.-2218   	; 0x1fc0 <command_shell+0x54>
		}
#endif
		else
		{
			uart_puts_p(PSTR("unknown command: "));
    286a:	88 e8       	ldi	r24, 0x88	; 136
    286c:	99 e0       	ldi	r25, 0x09	; 9
    286e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
			uart_puts(command_arg);
    2872:	c8 01       	movw	r24, r16
    2874:	0e 94 12 2c 	call	0x5824	; 0x5824 <uart_puts>
			uart_putc('\n');
    2878:	8a e0       	ldi	r24, 0x0A	; 10
    287a:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    287e:	a0 cb       	rjmp	.-2240   	; 0x1fc0 <command_shell+0x54>

00002880 <read_config_file>:
	
	read_config_file(); //Read the system settings from the config file	
}

void read_config_file(void)
{
    2880:	4f 92       	push	r4
    2882:	5f 92       	push	r5
    2884:	6f 92       	push	r6
    2886:	7f 92       	push	r7
    2888:	8f 92       	push	r8
    288a:	9f 92       	push	r9
    288c:	af 92       	push	r10
    288e:	bf 92       	push	r11
    2890:	cf 92       	push	r12
    2892:	df 92       	push	r13
    2894:	ef 92       	push	r14
    2896:	ff 92       	push	r15
    2898:	0f 93       	push	r16
    289a:	1f 93       	push	r17
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	cf 54       	subi	r28, 0x4F	; 79
    28a6:	d0 40       	sbci	r29, 0x00	; 0
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
	char config_file_name[13];
	sprintf(config_file_name, CFG_FILENAME); //This is the name of the config file. 'config.sys' is probably a bad idea.
    28b2:	e8 e0       	ldi	r30, 0x08	; 8
    28b4:	ee 2e       	mov	r14, r30
    28b6:	f1 2c       	mov	r15, r1
    28b8:	ec 0e       	add	r14, r28
    28ba:	fd 1e       	adc	r15, r29
    28bc:	c7 01       	movw	r24, r14
    28be:	69 e1       	ldi	r22, 0x19	; 25
    28c0:	71 e0       	ldi	r23, 0x01	; 1
    28c2:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <strcpy>

	struct fat_dir_entry_struct file_entry;

	//Check to see if we have a config file
	if(find_file_in_dir(fs, dd, config_file_name, &file_entry, 0))
    28c6:	60 91 47 07 	lds	r22, 0x0747
    28ca:	70 91 48 07 	lds	r23, 0x0748
    28ce:	80 91 80 04 	lds	r24, 0x0480
    28d2:	90 91 81 04 	lds	r25, 0x0481
    28d6:	a7 01       	movw	r20, r14
    28d8:	9e 01       	movw	r18, r28
    28da:	2b 5d       	subi	r18, 0xDB	; 219
    28dc:	3f 4f       	sbci	r19, 0xFF	; 255
    28de:	00 e0       	ldi	r16, 0x00	; 0
    28e0:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <find_file_in_dir>
    28e4:	88 23       	and	r24, r24
    28e6:	09 f4       	brne	.+2      	; 0x28ea <read_config_file+0x6a>
    28e8:	d9 c0       	rjmp	.+434    	; 0x2a9c <read_config_file+0x21c>
		#endif
		
		//Now load settings from file
		
		//search file in current directory and open it
		struct fat_file_struct* fd = open_file_in_dir(fs, dd, config_file_name);
    28ea:	60 91 47 07 	lds	r22, 0x0747
    28ee:	70 91 48 07 	lds	r23, 0x0748
    28f2:	80 91 80 04 	lds	r24, 0x0480
    28f6:	90 91 81 04 	lds	r25, 0x0481
    28fa:	a7 01       	movw	r20, r14
    28fc:	0e 94 8c 09 	call	0x1318	; 0x1318 <open_file_in_dir>
    2900:	7c 01       	movw	r14, r24
		if(!fd)
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	29 f4       	brne	.+10     	; 0x2910 <read_config_file+0x90>
		{
			uart_puts_p(PSTR("error opening config file"));
    2906:	80 ec       	ldi	r24, 0xC0	; 192
    2908:	9b e0       	ldi	r25, 0x0B	; 11
    290a:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
    290e:	c8 c0       	rjmp	.+400    	; 0x2aa0 <read_config_file+0x220>


		//Read line from file
		uint8_t settings_string[16]; //"115200,103,14,0\0" = 115200 bps, escape char of ASCII(103), 14 times, new log mode
		uint8_t len;
		len = fat_read_file(fd, settings_string, sizeof(settings_string)); //Read first line of file
    2910:	75 e1       	ldi	r23, 0x15	; 21
    2912:	a7 2e       	mov	r10, r23
    2914:	b1 2c       	mov	r11, r1
    2916:	ac 0e       	add	r10, r28
    2918:	bd 1e       	adc	r11, r29
    291a:	b5 01       	movw	r22, r10
    291c:	40 e1       	ldi	r20, 0x10	; 16
    291e:	50 e0       	ldi	r21, 0x00	; 0
    2920:	0e 94 c2 1c 	call	0x3984	; 0x3984 <fat_read_file>
    2924:	68 2e       	mov	r6, r24

		fat_close_file(fd);
    2926:	c7 01       	movw	r24, r14
    2928:	0e 94 bc 1c 	call	0x3978	; 0x3978 <fat_close_file>
    292c:	11 e0       	ldi	r17, 0x01	; 1
    292e:	99 24       	eor	r9, r9
    2930:	6a e1       	ldi	r22, 0x1A	; 26
    2932:	86 2e       	mov	r8, r22
    2934:	53 e0       	ldi	r21, 0x03	; 3
    2936:	75 2e       	mov	r7, r21
    2938:	dd 24       	eor	r13, r13
    293a:	cc 24       	eor	r12, r12
		char new_system_max_escape = 3;

		//Parse the settings out
		uint8_t i = 0, j = 0, setting_number = 0;
		char new_setting[7]; //Max length of a setting is 6, the bps setting = '115200' plus '\0'
		for(i = 0 ; i < len; i++)
    293c:	7e 01       	movw	r14, r28
    293e:	08 94       	sec
    2940:	e1 1c       	adc	r14, r1
    2942:	f1 1c       	adc	r15, r1
		{
			//Pick out one setting from the line of text
			for(j = 0 ; settings_string[i] != ',' && i < len && j < 6 ; )
    2944:	25 01       	movw	r4, r10
    2946:	47 e0       	ldi	r20, 0x07	; 7
    2948:	a4 2e       	mov	r10, r20
    294a:	b1 2c       	mov	r11, r1
    294c:	ac 0e       	add	r10, r28
    294e:	bd 1e       	adc	r11, r29
    2950:	72 c0       	rjmp	.+228    	; 0x2a36 <read_config_file+0x1b6>
			{
				new_setting[j] = settings_string[i];
    2952:	ed 93       	st	X+, r30
				i++;
    2954:	d3 94       	inc	r13
    2956:	8a 2f       	mov	r24, r26
    2958:	8e 19       	sub	r24, r14
		uint8_t i = 0, j = 0, setting_number = 0;
		char new_setting[7]; //Max length of a setting is 6, the bps setting = '115200' plus '\0'
		for(i = 0 ; i < len; i++)
		{
			//Pick out one setting from the line of text
			for(j = 0 ; settings_string[i] != ',' && i < len && j < 6 ; )
    295a:	f2 01       	movw	r30, r4
    295c:	ed 0d       	add	r30, r13
    295e:	f1 1d       	adc	r31, r1
    2960:	e0 81       	ld	r30, Z
    2962:	ec 32       	cpi	r30, 0x2C	; 44
    2964:	29 f0       	breq	.+10     	; 0x2970 <read_config_file+0xf0>
    2966:	d6 14       	cp	r13, r6
    2968:	18 f4       	brcc	.+6      	; 0x2970 <read_config_file+0xf0>
    296a:	aa 15       	cp	r26, r10
    296c:	bb 05       	cpc	r27, r11
    296e:	89 f7       	brne	.-30     	; 0x2952 <read_config_file+0xd2>
				new_setting[j] = settings_string[i];
				i++;
				j++;
			}
			
			new_setting[j] = '\0'; //Terminate the string for array compare
    2970:	f7 01       	movw	r30, r14
    2972:	e8 0f       	add	r30, r24
    2974:	f1 1d       	adc	r31, r1
    2976:	10 82       	st	Z, r1
			
			if(setting_number == 0) //Baud rate
    2978:	cc 20       	and	r12, r12
    297a:	a9 f5       	brne	.+106    	; 0x29e6 <read_config_file+0x166>
			{
				if( strcmp(new_setting, "2400") == 0) new_system_baud = BAUD_2400;
    297c:	c7 01       	movw	r24, r14
    297e:	6d e5       	ldi	r22, 0x5D	; 93
    2980:	71 e0       	ldi	r23, 0x01	; 1
    2982:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <strcmp>
    2986:	00 97       	sbiw	r24, 0x00	; 0
    2988:	11 f4       	brne	.+4      	; 0x298e <read_config_file+0x10e>
    298a:	10 e0       	ldi	r17, 0x00	; 0
    298c:	52 c0       	rjmp	.+164    	; 0x2a32 <read_config_file+0x1b2>
				else if( strcmp(new_setting, "4800") == 0) new_system_baud = BAUD_4800;
    298e:	c7 01       	movw	r24, r14
    2990:	62 e6       	ldi	r22, 0x62	; 98
    2992:	71 e0       	ldi	r23, 0x01	; 1
    2994:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <strcmp>
    2998:	00 97       	sbiw	r24, 0x00	; 0
    299a:	11 f4       	brne	.+4      	; 0x29a0 <read_config_file+0x120>
    299c:	14 e0       	ldi	r17, 0x04	; 4
    299e:	49 c0       	rjmp	.+146    	; 0x2a32 <read_config_file+0x1b2>
				else if( strcmp(new_setting, "9600") == 0) new_system_baud = BAUD_9600;
    29a0:	c7 01       	movw	r24, r14
    29a2:	67 e6       	ldi	r22, 0x67	; 103
    29a4:	71 e0       	ldi	r23, 0x01	; 1
    29a6:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <strcmp>
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <read_config_file+0x130>
    29ae:	40 c0       	rjmp	.+128    	; 0x2a30 <read_config_file+0x1b0>
				else if( strcmp(new_setting, "19200") == 0) new_system_baud = BAUD_19200;
    29b0:	c7 01       	movw	r24, r14
    29b2:	6c e6       	ldi	r22, 0x6C	; 108
    29b4:	71 e0       	ldi	r23, 0x01	; 1
    29b6:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <strcmp>
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	11 f4       	brne	.+4      	; 0x29c2 <read_config_file+0x142>
    29be:	15 e0       	ldi	r17, 0x05	; 5
    29c0:	38 c0       	rjmp	.+112    	; 0x2a32 <read_config_file+0x1b2>
				else if( strcmp(new_setting, "57600") == 0) new_system_baud = BAUD_57600;
    29c2:	c7 01       	movw	r24, r14
    29c4:	62 e7       	ldi	r22, 0x72	; 114
    29c6:	71 e0       	ldi	r23, 0x01	; 1
    29c8:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <strcmp>
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	11 f4       	brne	.+4      	; 0x29d4 <read_config_file+0x154>
    29d0:	12 e0       	ldi	r17, 0x02	; 2
    29d2:	2f c0       	rjmp	.+94     	; 0x2a32 <read_config_file+0x1b2>
				else if( strcmp(new_setting, "115200") == 0) new_system_baud = BAUD_115200;
    29d4:	c7 01       	movw	r24, r14
    29d6:	68 e7       	ldi	r22, 0x78	; 120
    29d8:	71 e0       	ldi	r23, 0x01	; 1
    29da:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <strcmp>
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	39 f5       	brne	.+78     	; 0x2a30 <read_config_file+0x1b0>
    29e2:	13 e0       	ldi	r17, 0x03	; 3
    29e4:	26 c0       	rjmp	.+76     	; 0x2a32 <read_config_file+0x1b2>
				else new_system_baud = BAUD_9600; //Default is 9600bps
			}
			else if(setting_number == 1) //Escape character
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	c8 16       	cp	r12, r24
    29ea:	49 f4       	brne	.+18     	; 0x29fe <read_config_file+0x17e>
			{
				new_system_escape = atoi(new_setting);
    29ec:	c7 01       	movw	r24, r14
    29ee:	0e 94 b7 2c 	call	0x596e	; 0x596e <atoi>
    29f2:	88 2e       	mov	r8, r24
				if(new_system_escape == 0 || new_system_escape > 127) new_system_escape = 26; //Default is ctrl+z
    29f4:	18 16       	cp	r1, r24
    29f6:	ec f0       	brlt	.+58     	; 0x2a32 <read_config_file+0x1b2>
    29f8:	3a e1       	ldi	r19, 0x1A	; 26
    29fa:	83 2e       	mov	r8, r19
    29fc:	1a c0       	rjmp	.+52     	; 0x2a32 <read_config_file+0x1b2>
			}
			else if(setting_number == 2) //Max amount escape character
    29fe:	82 e0       	ldi	r24, 0x02	; 2
    2a00:	c8 16       	cp	r12, r24
    2a02:	51 f4       	brne	.+20     	; 0x2a18 <read_config_file+0x198>
			{
				new_system_max_escape = atoi(new_setting);
    2a04:	c7 01       	movw	r24, r14
    2a06:	0e 94 b7 2c 	call	0x596e	; 0x596e <atoi>
    2a0a:	78 2e       	mov	r7, r24
				if(new_system_max_escape == 0 || new_system_max_escape > 10) new_system_max_escape = 3; //Default is 3
    2a0c:	81 50       	subi	r24, 0x01	; 1
    2a0e:	8a 30       	cpi	r24, 0x0A	; 10
    2a10:	80 f0       	brcs	.+32     	; 0x2a32 <read_config_file+0x1b2>
    2a12:	23 e0       	ldi	r18, 0x03	; 3
    2a14:	72 2e       	mov	r7, r18
    2a16:	0d c0       	rjmp	.+26     	; 0x2a32 <read_config_file+0x1b2>
			}
			else if(setting_number == 3) //System mode
    2a18:	83 e0       	ldi	r24, 0x03	; 3
    2a1a:	c8 16       	cp	r12, r24
    2a1c:	81 f4       	brne	.+32     	; 0x2a3e <read_config_file+0x1be>
			{
				new_system_mode = atoi(new_setting);
    2a1e:	c7 01       	movw	r24, r14
    2a20:	0e 94 b7 2c 	call	0x596e	; 0x596e <atoi>
    2a24:	98 2e       	mov	r9, r24
				if(new_system_mode == 0 || new_system_mode > 5) new_system_mode = MODE_NEWLOG; //Default is NEWLOG
    2a26:	81 50       	subi	r24, 0x01	; 1
    2a28:	85 30       	cpi	r24, 0x05	; 5
    2a2a:	18 f0       	brcs	.+6      	; 0x2a32 <read_config_file+0x1b2>
    2a2c:	99 24       	eor	r9, r9
    2a2e:	01 c0       	rjmp	.+2      	; 0x2a32 <read_config_file+0x1b2>
    2a30:	11 e0       	ldi	r17, 0x01	; 1
			}
			else
				//We're done! Stop looking for settings
				break;
			
			setting_number++;
    2a32:	c3 94       	inc	r12
		char new_system_max_escape = 3;

		//Parse the settings out
		uint8_t i = 0, j = 0, setting_number = 0;
		char new_setting[7]; //Max length of a setting is 6, the bps setting = '115200' plus '\0'
		for(i = 0 ; i < len; i++)
    2a34:	d3 94       	inc	r13
    2a36:	d6 14       	cp	r13, r6
    2a38:	10 f4       	brcc	.+4      	; 0x2a3e <read_config_file+0x1be>
    2a3a:	d7 01       	movw	r26, r14
    2a3c:	8c cf       	rjmp	.-232    	; 0x2956 <read_config_file+0xd6>
		uart_puts_p(PSTR("\n"));
		*/
		
		//We now have the settings loaded into the global variables. Now check if they're different from EEPROM settings

		if(new_system_baud != setting_uart_speed)
    2a3e:	80 91 88 04 	lds	r24, 0x0488
    2a42:	18 17       	cp	r17, r24
    2a44:	51 f0       	breq	.+20     	; 0x2a5a <read_config_file+0x1da>
		{
			//If the baud rate from the file is different from the current setting,
			//Then update the setting to the file setting
			//And re-init the UART
			EEPROM_write(LOCATION_BAUD_SETTING, new_system_baud);
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	61 2f       	mov	r22, r17
    2a4c:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>
			setting_uart_speed = new_system_baud;
    2a50:	10 93 88 04 	sts	0x0488, r17
		    uart_init(setting_uart_speed);
    2a54:	81 2f       	mov	r24, r17
    2a56:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <uart_init>
		}

		if(new_system_mode != setting_system_mode)
    2a5a:	80 91 82 04 	lds	r24, 0x0482
    2a5e:	98 16       	cp	r9, r24
    2a60:	39 f0       	breq	.+14     	; 0x2a70 <read_config_file+0x1f0>
		{
			//Goto new system mode
			setting_system_mode = new_system_mode;
    2a62:	90 92 82 04 	sts	0x0482, r9
			EEPROM_write(LOCATION_SYSTEM_SETTING, setting_system_mode);
    2a66:	82 e0       	ldi	r24, 0x02	; 2
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	69 2d       	mov	r22, r9
    2a6c:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>
		}
		
		if(new_system_escape != setting_escape_character)
    2a70:	80 91 49 07 	lds	r24, 0x0749
    2a74:	88 16       	cp	r8, r24
    2a76:	39 f0       	breq	.+14     	; 0x2a86 <read_config_file+0x206>
		{
			//Goto new system escape char
			setting_escape_character = new_system_escape;
    2a78:	80 92 49 07 	sts	0x0749, r8
			EEPROM_write(LOCATION_ESCAPE_CHAR, setting_escape_character); 
    2a7c:	85 e0       	ldi	r24, 0x05	; 5
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	68 2d       	mov	r22, r8
    2a82:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>
		}
		
		if(new_system_max_escape != setting_max_escape_character)
    2a86:	80 91 85 04 	lds	r24, 0x0485
    2a8a:	78 16       	cp	r7, r24
    2a8c:	39 f0       	breq	.+14     	; 0x2a9c <read_config_file+0x21c>
		{
			//Goto new max escape
			setting_max_escape_character = new_system_max_escape;
    2a8e:	70 92 85 04 	sts	0x0485, r7
			EEPROM_write(LOCATION_MAX_ESCAPE_CHAR, setting_max_escape_character);
    2a92:	86 e0       	ldi	r24, 0x06	; 6
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	67 2d       	mov	r22, r7
    2a98:	0e 94 43 06 	call	0xc86	; 0xc86 <EEPROM_write>
		#if DEBUG
			uart_puts("No config found - creating default:\n");
		#endif

		//Record the current eeprom settings to the config file
		record_config_file();
    2a9c:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <record_config_file>
	}
	
}
    2aa0:	c1 5b       	subi	r28, 0xB1	; 177
    2aa2:	df 4f       	sbci	r29, 0xFF	; 255
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	f8 94       	cli
    2aa8:	de bf       	out	0x3e, r29	; 62
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	1f 91       	pop	r17
    2ab4:	0f 91       	pop	r16
    2ab6:	ff 90       	pop	r15
    2ab8:	ef 90       	pop	r14
    2aba:	df 90       	pop	r13
    2abc:	cf 90       	pop	r12
    2abe:	bf 90       	pop	r11
    2ac0:	af 90       	pop	r10
    2ac2:	9f 90       	pop	r9
    2ac4:	8f 90       	pop	r8
    2ac6:	7f 90       	pop	r7
    2ac8:	6f 90       	pop	r6
    2aca:	5f 90       	pop	r5
    2acc:	4f 90       	pop	r4
    2ace:	08 95       	ret

00002ad0 <ioinit>:

    return 0;
}

void ioinit(void)
{
    2ad0:	1f 93       	push	r17
    //Init Timer0 for delay_us
    //TCCR0B = (1<<CS00); //Set Prescaler to clk/1 (assume we are running at internal 1MHz). CS00=1 
    TCCR0B = (1<<CS01); //Set Prescaler to clk/8 : 1click = 1us(assume we are running at internal 8MHz). CS01=1 
    2ad2:	82 e0       	ldi	r24, 0x02	; 2
    2ad4:	85 bd       	out	0x25, r24	; 37
    //Since we are running at 16MHz, this is a hack job. We will double the count during delay_us function.
	//TCCR0B = (1<<CS01)|(1<<CS00); //Set Prescaler to clk/64

	//Running power is 7.66mA at 3.3V / 7.23 at 5V before power tweaking
	//Let's see if we can shut off some peripherals and save some power
	PRR |= (1<<PRTWI) | (1<<PRTIM2) | (1<<PRTIM1) | (1<<PRADC); //Shut off TWI, Timer2, Timer1, ADC
    2ad6:	80 91 64 00 	lds	r24, 0x0064
    2ada:	89 6c       	ori	r24, 0xC9	; 201
    2adc:	80 93 64 00 	sts	0x0064, r24
	//Running power is 7.02mA at 3.3V / 6.66mA at 5V after power tweaking - so a little bit, and it still works!
	
	set_sleep_mode(SLEEP_MODE_IDLE); //I believe this is the lowest we can go and still get woken up by UART
    2ae0:	83 b7       	in	r24, 0x33	; 51
    2ae2:	81 7f       	andi	r24, 0xF1	; 241
    2ae4:	83 bf       	out	0x33, r24	; 51
	sleep_enable(); //Set Sleep Enable bit to 1
    2ae6:	83 b7       	in	r24, 0x33	; 51
    2ae8:	81 60       	ori	r24, 0x01	; 1
    2aea:	83 bf       	out	0x33, r24	; 51

    //1 = output, 0 = input
    DDRD |= (1<<STAT1); //PORTD (STAT1 on PD5)
    2aec:	55 9a       	sbi	0x0a, 5	; 10
    DDRB |= (1<<STAT2); //PORTC (STAT2 on PB5)
    2aee:	25 9a       	sbi	0x04, 5	; 4

	if(check_emergency_reset()) //Look to see if the RX pin is being pulled low
    2af0:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <check_emergency_reset>
    2af4:	88 23       	and	r24, r24
    2af6:	a1 f0       	breq	.+40     	; 0x2b20 <ioinit+0x50>
	{
		set_default_settings(); //Reset baud, escape characters, escape number, system mode
    2af8:	0e 94 4b 06 	call	0xc96	; 0xc96 <set_default_settings>

		init_media(); //Try to setup the SD card so we can record these new settings
    2afc:	0e 94 ff 08 	call	0x11fe	; 0x11fe <init_media>
		
		record_config_file(); //Record new config settings
    2b00:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <record_config_file>

		//Now sit in forever loop indicating system is now at 9600bps
		sbi(PORTD, STAT1); 
    2b04:	5d 9a       	sbi	0x0b, 5	; 11
		sbi(PORTB, STAT2);
    2b06:	2d 9a       	sbi	0x05, 5	; 5
		while(1)
		{
			delay_ms(500);
			PORTD ^= (1<<STAT1); //Blink the stat LEDs
    2b08:	10 e2       	ldi	r17, 0x20	; 32
		//Now sit in forever loop indicating system is now at 9600bps
		sbi(PORTD, STAT1); 
		sbi(PORTB, STAT2);
		while(1)
		{
			delay_ms(500);
    2b0a:	84 ef       	ldi	r24, 0xF4	; 244
    2b0c:	91 e0       	ldi	r25, 0x01	; 1
    2b0e:	0e 94 c0 06 	call	0xd80	; 0xd80 <delay_ms>
			PORTD ^= (1<<STAT1); //Blink the stat LEDs
    2b12:	8b b1       	in	r24, 0x0b	; 11
    2b14:	81 27       	eor	r24, r17
    2b16:	8b b9       	out	0x0b, r24	; 11
			PORTB ^= (1<<STAT2); //Blink the stat LEDs
    2b18:	85 b1       	in	r24, 0x05	; 5
    2b1a:	81 27       	eor	r24, r17
    2b1c:	85 b9       	out	0x05, r24	; 5
    2b1e:	f5 cf       	rjmp	.-22     	; 0x2b0a <ioinit+0x3a>
		}
	}
	
	read_system_settings(); //Read the system settings into some global variables
    2b20:	0e 94 67 06 	call	0xcce	; 0xcce <read_system_settings>

    //Setup uart
    uart_init(setting_uart_speed);
    2b24:	80 91 88 04 	lds	r24, 0x0488
    2b28:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <uart_init>
#if DEBUG
	uart_puts_p(PSTR("UART Init\n"));
#else
	uart_puts_p(PSTR("1"));
    2b2c:	8c ed       	ldi	r24, 0xDC	; 220
    2b2e:	9b e0       	ldi	r25, 0x0B	; 11
    2b30:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
#endif
	
	//Setup SPI, init SD card, etc
	init_media();
    2b34:	0e 94 ff 08 	call	0x11fe	; 0x11fe <init_media>
	uart_puts_p(PSTR("2"));
    2b38:	8a ed       	ldi	r24, 0xDA	; 218
    2b3a:	9b e0       	ldi	r25, 0x0B	; 11
    2b3c:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_puts_p>
	
	read_config_file(); //Read the system settings from the config file	
    2b40:	0e 94 40 14 	call	0x2880	; 0x2880 <read_config_file>
}
    2b44:	1f 91       	pop	r17
    2b46:	08 95       	ret

00002b48 <main>:
	if(read_spot == BUFF_LEN) read_spot = 0;
}

int main(void)
{
	ioinit();
    2b48:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <ioinit>

	//If we are in new log mode, find a new file name to write to
	if(setting_system_mode == MODE_NEWLOG)
    2b4c:	80 91 82 04 	lds	r24, 0x0482
    2b50:	88 23       	and	r24, r24
    2b52:	11 f4       	brne	.+4      	; 0x2b58 <main+0x10>
		newlog();
    2b54:	0e 94 5f 0b 	call	0x16be	; 0x16be <newlog>

	//If we are in sequential log mode, determine if seqlog.txt has been created or not, and then open it for logging
	if(setting_system_mode == MODE_SEQLOG)
    2b58:	80 91 82 04 	lds	r24, 0x0482
    2b5c:	81 30       	cpi	r24, 0x01	; 1
    2b5e:	11 f4       	brne	.+4      	; 0x2b64 <main+0x1c>
		seqlog();
    2b60:	0e 94 1d 0c 	call	0x183a	; 0x183a <seqlog>

	//Once either one of these modes exits, go to normal command mode, which is called by returning to main()
	command_shell();
    2b64:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <command_shell>

    return 0;
}
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	08 95       	ret

00002b6e <partition_close>:
 * \param[in] partition The partition descriptor to destroy.
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    2b6e:	fc 01       	movw	r30, r24
    if(!partition)
    2b70:	00 97       	sbiw	r24, 0x00	; 0
    2b72:	11 f4       	brne	.+4      	; 0x2b78 <partition_close+0xa>
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	08 95       	ret

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
    2b78:	10 86       	std	Z+8, r1	; 0x08
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
#endif

    return 1;
}
    2b7c:	08 95       	ret

00002b7e <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    2b7e:	8f 92       	push	r8
    2b80:	9f 92       	push	r9
    2b82:	af 92       	push	r10
    2b84:	bf 92       	push	r11
    2b86:	cf 92       	push	r12
    2b88:	df 92       	push	r13
    2b8a:	ef 92       	push	r14
    2b8c:	ff 92       	push	r15
    2b8e:	0f 93       	push	r16
    2b90:	df 93       	push	r29
    2b92:	cf 93       	push	r28
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62
    2b98:	60 97       	sbiw	r28, 0x10	; 16
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	7c 01       	movw	r14, r24
    2ba6:	6b 01       	movw	r12, r22
    2ba8:	5a 01       	movw	r10, r20
    2baa:	49 01       	movw	r8, r18
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	09 f4       	brne	.+2      	; 0x2bb2 <partition_open+0x34>
    2bb0:	93 c0       	rjmp	.+294    	; 0x2cd8 <partition_open+0x15a>
    2bb2:	61 15       	cp	r22, r1
    2bb4:	71 05       	cpc	r23, r1
    2bb6:	09 f4       	brne	.+2      	; 0x2bba <partition_open+0x3c>
    2bb8:	8f c0       	rjmp	.+286    	; 0x2cd8 <partition_open+0x15a>
    2bba:	04 30       	cpi	r16, 0x04	; 4
    2bbc:	0c f0       	brlt	.+2      	; 0x2bc0 <partition_open+0x42>
    2bbe:	8c c0       	rjmp	.+280    	; 0x2cd8 <partition_open+0x15a>
        return 0;

    if(index >= 0)
    2bc0:	07 fd       	sbrc	r16, 7
    2bc2:	1d c0       	rjmp	.+58     	; 0x2bfe <partition_open+0x80>
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    2bc4:	60 2f       	mov	r22, r16
    2bc6:	77 27       	eor	r23, r23
    2bc8:	67 fd       	sbrc	r22, 7
    2bca:	70 95       	com	r23
    2bcc:	e4 e0       	ldi	r30, 0x04	; 4
    2bce:	66 0f       	add	r22, r22
    2bd0:	77 1f       	adc	r23, r23
    2bd2:	ea 95       	dec	r30
    2bd4:	e1 f7       	brne	.-8      	; 0x2bce <partition_open+0x50>
    2bd6:	62 54       	subi	r22, 0x42	; 66
    2bd8:	7e 4f       	sbci	r23, 0xFE	; 254
    2bda:	88 27       	eor	r24, r24
    2bdc:	77 fd       	sbrc	r23, 7
    2bde:	80 95       	com	r24
    2be0:	98 2f       	mov	r25, r24
    2be2:	ae 01       	movw	r20, r28
    2be4:	4f 5f       	subi	r20, 0xFF	; 255
    2be6:	5f 4f       	sbci	r21, 0xFF	; 255
    2be8:	20 e1       	ldi	r18, 0x10	; 16
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	f7 01       	movw	r30, r14
    2bee:	09 95       	icall
    2bf0:	88 23       	and	r24, r24
    2bf2:	09 f4       	brne	.+2      	; 0x2bf6 <partition_open+0x78>
    2bf4:	71 c0       	rjmp	.+226    	; 0x2cd8 <partition_open+0x15a>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    2bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf8:	88 23       	and	r24, r24
    2bfa:	09 f4       	brne	.+2      	; 0x2bfe <partition_open+0x80>
    2bfc:	6d c0       	rjmp	.+218    	; 0x2cd8 <partition_open+0x15a>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    2bfe:	80 91 c2 01 	lds	r24, 0x01C2
    2c02:	88 23       	and	r24, r24
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <partition_open+0x8a>
    2c06:	68 c0       	rjmp	.+208    	; 0x2cd8 <partition_open+0x15a>
    2c08:	7c c0       	rjmp	.+248    	; 0x2d02 <partition_open+0x184>
    new_partition->device_write = device_write;
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
    2c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0c:	80 93 c2 01 	sts	0x01C2, r24
        new_partition->offset = ((uint32_t) buffer[8]) |
    2c10:	2a 85       	ldd	r18, Y+10	; 0x0a
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	40 e0       	ldi	r20, 0x00	; 0
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	54 2f       	mov	r21, r20
    2c1a:	43 2f       	mov	r20, r19
    2c1c:	32 2f       	mov	r19, r18
    2c1e:	22 27       	eor	r18, r18
    2c20:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	a0 e0       	ldi	r26, 0x00	; 0
    2c26:	b0 e0       	ldi	r27, 0x00	; 0
    2c28:	dc 01       	movw	r26, r24
    2c2a:	99 27       	eor	r25, r25
    2c2c:	88 27       	eor	r24, r24
    2c2e:	28 2b       	or	r18, r24
    2c30:	39 2b       	or	r19, r25
    2c32:	4a 2b       	or	r20, r26
    2c34:	5b 2b       	or	r21, r27
    2c36:	89 85       	ldd	r24, Y+9	; 0x09
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	a0 e0       	ldi	r26, 0x00	; 0
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	28 2b       	or	r18, r24
    2c40:	39 2b       	or	r19, r25
    2c42:	4a 2b       	or	r20, r26
    2c44:	5b 2b       	or	r21, r27
    2c46:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	a0 e0       	ldi	r26, 0x00	; 0
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	b8 2f       	mov	r27, r24
    2c50:	aa 27       	eor	r26, r26
    2c52:	99 27       	eor	r25, r25
    2c54:	88 27       	eor	r24, r24
    2c56:	28 2b       	or	r18, r24
    2c58:	39 2b       	or	r19, r25
    2c5a:	4a 2b       	or	r20, r26
    2c5c:	5b 2b       	or	r21, r27
    2c5e:	20 93 c3 01 	sts	0x01C3, r18
    2c62:	30 93 c4 01 	sts	0x01C4, r19
    2c66:	40 93 c5 01 	sts	0x01C5, r20
    2c6a:	50 93 c6 01 	sts	0x01C6, r21
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
    2c6e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	40 e0       	ldi	r20, 0x00	; 0
    2c74:	50 e0       	ldi	r21, 0x00	; 0
    2c76:	54 2f       	mov	r21, r20
    2c78:	43 2f       	mov	r20, r19
    2c7a:	32 2f       	mov	r19, r18
    2c7c:	22 27       	eor	r18, r18
    2c7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	a0 e0       	ldi	r26, 0x00	; 0
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	dc 01       	movw	r26, r24
    2c88:	99 27       	eor	r25, r25
    2c8a:	88 27       	eor	r24, r24
    2c8c:	28 2b       	or	r18, r24
    2c8e:	39 2b       	or	r19, r25
    2c90:	4a 2b       	or	r20, r26
    2c92:	5b 2b       	or	r21, r27
    2c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	a0 e0       	ldi	r26, 0x00	; 0
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	28 2b       	or	r18, r24
    2c9e:	39 2b       	or	r19, r25
    2ca0:	4a 2b       	or	r20, r26
    2ca2:	5b 2b       	or	r21, r27
    2ca4:	88 89       	ldd	r24, Y+16	; 0x10
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	a0 e0       	ldi	r26, 0x00	; 0
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	b8 2f       	mov	r27, r24
    2cae:	aa 27       	eor	r26, r26
    2cb0:	99 27       	eor	r25, r25
    2cb2:	88 27       	eor	r24, r24
    2cb4:	28 2b       	or	r18, r24
    2cb6:	39 2b       	or	r19, r25
    2cb8:	4a 2b       	or	r20, r26
    2cba:	5b 2b       	or	r21, r27
    2cbc:	20 93 c7 01 	sts	0x01C7, r18
    2cc0:	30 93 c8 01 	sts	0x01C8, r19
    2cc4:	40 93 c9 01 	sts	0x01C9, r20
    2cc8:	50 93 ca 01 	sts	0x01CA, r21
    2ccc:	03 c0       	rjmp	.+6      	; 0x2cd4 <partition_open+0x156>
                                ((uint32_t) buffer[14] << 16) |
                                ((uint32_t) buffer[15] << 24);
    }
    else
    {
        new_partition->type = 0xff;
    2cce:	8f ef       	ldi	r24, 0xFF	; 255
    2cd0:	80 93 c2 01 	sts	0x01C2, r24
    2cd4:	9f 01       	movw	r18, r30
    2cd6:	02 c0       	rjmp	.+4      	; 0x2cdc <partition_open+0x15e>
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    }

    return new_partition;
}
    2cdc:	c9 01       	movw	r24, r18
    2cde:	60 96       	adiw	r28, 0x10	; 16
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	f8 94       	cli
    2ce4:	de bf       	out	0x3e, r29	; 62
    2ce6:	0f be       	out	0x3f, r0	; 63
    2ce8:	cd bf       	out	0x3d, r28	; 61
    2cea:	cf 91       	pop	r28
    2cec:	df 91       	pop	r29
    2cee:	0f 91       	pop	r16
    2cf0:	ff 90       	pop	r15
    2cf2:	ef 90       	pop	r14
    2cf4:	df 90       	pop	r13
    2cf6:	cf 90       	pop	r12
    2cf8:	bf 90       	pop	r11
    2cfa:	af 90       	pop	r10
    2cfc:	9f 90       	pop	r9
    2cfe:	8f 90       	pop	r8
    2d00:	08 95       	ret
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    2d02:	ea eb       	ldi	r30, 0xBA	; 186
    2d04:	f1 e0       	ldi	r31, 0x01	; 1
    2d06:	81 e1       	ldi	r24, 0x11	; 17
    2d08:	df 01       	movw	r26, r30
    2d0a:	1d 92       	st	X+, r1
    2d0c:	8a 95       	dec	r24
    2d0e:	e9 f7       	brne	.-6      	; 0x2d0a <partition_open+0x18c>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    2d10:	f0 92 bb 01 	sts	0x01BB, r15
    2d14:	e0 92 ba 01 	sts	0x01BA, r14
    new_partition->device_read_interval = device_read_interval;
    2d18:	d0 92 bd 01 	sts	0x01BD, r13
    2d1c:	c0 92 bc 01 	sts	0x01BC, r12
    new_partition->device_write = device_write;
    2d20:	b0 92 bf 01 	sts	0x01BF, r11
    2d24:	a0 92 be 01 	sts	0x01BE, r10
    new_partition->device_write_interval = device_write_interval;
    2d28:	90 92 c1 01 	sts	0x01C1, r9
    2d2c:	80 92 c0 01 	sts	0x01C0, r8

    if(index >= 0)
    2d30:	07 ff       	sbrs	r16, 7
    2d32:	6b cf       	rjmp	.-298    	; 0x2c0a <partition_open+0x8c>
    2d34:	cc cf       	rjmp	.-104    	; 0x2cce <partition_open+0x150>

00002d36 <sd_raw_available>:
 * \returns 1 if the card is available, 0 if it is not.
 */
uint8_t sd_raw_available()
{
    return get_pin_available() == 0x00;
}
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	08 95       	ret

00002d3a <sd_raw_locked>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	08 95       	ret

00002d3e <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    2d3e:	28 2f       	mov	r18, r24
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    2d40:	8f ef       	ldi	r24, 0xFF	; 255
    2d42:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    2d44:	0d b4       	in	r0, 0x2d	; 45
    2d46:	07 fe       	sbrs	r0, 7
    2d48:	fd cf       	rjmp	.-6      	; 0x2d44 <sd_raw_send_command+0x6>
    SPSR &= ~(1 << SPIF);
    2d4a:	8d b5       	in	r24, 0x2d	; 45
    2d4c:	8f 77       	andi	r24, 0x7F	; 127
    2d4e:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    2d50:	8e b5       	in	r24, 0x2e	; 46

    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    2d52:	82 2f       	mov	r24, r18
    2d54:	80 64       	ori	r24, 0x40	; 64
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    2d56:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    2d58:	0d b4       	in	r0, 0x2d	; 45
    2d5a:	07 fe       	sbrs	r0, 7
    2d5c:	fd cf       	rjmp	.-6      	; 0x2d58 <sd_raw_send_command+0x1a>
    SPSR &= ~(1 << SPIF);
    2d5e:	8d b5       	in	r24, 0x2d	; 45
    2d60:	8f 77       	andi	r24, 0x7F	; 127
    2d62:	8d bd       	out	0x2d, r24	; 45
    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    2d64:	87 2f       	mov	r24, r23
    2d66:	99 27       	eor	r25, r25
    2d68:	aa 27       	eor	r26, r26
    2d6a:	bb 27       	eor	r27, r27
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    2d6c:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    2d6e:	0d b4       	in	r0, 0x2d	; 45
    2d70:	07 fe       	sbrs	r0, 7
    2d72:	fd cf       	rjmp	.-6      	; 0x2d6e <sd_raw_send_command+0x30>
    SPSR &= ~(1 << SPIF);
    2d74:	8d b5       	in	r24, 0x2d	; 45
    2d76:	8f 77       	andi	r24, 0x7F	; 127
    2d78:	8d bd       	out	0x2d, r24	; 45
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	aa 27       	eor	r26, r26
    2d7e:	bb 27       	eor	r27, r27
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    2d80:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    2d82:	0d b4       	in	r0, 0x2d	; 45
    2d84:	07 fe       	sbrs	r0, 7
    2d86:	fd cf       	rjmp	.-6      	; 0x2d82 <sd_raw_send_command+0x44>
    SPSR &= ~(1 << SPIF);
    2d88:	8d b5       	in	r24, 0x2d	; 45
    2d8a:	8f 77       	andi	r24, 0x7F	; 127
    2d8c:	8d bd       	out	0x2d, r24	; 45

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    2d8e:	bb 27       	eor	r27, r27
    2d90:	a7 2f       	mov	r26, r23
    2d92:	96 2f       	mov	r25, r22
    2d94:	85 2f       	mov	r24, r21
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    2d96:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    2d98:	0d b4       	in	r0, 0x2d	; 45
    2d9a:	07 fe       	sbrs	r0, 7
    2d9c:	fd cf       	rjmp	.-6      	; 0x2d98 <sd_raw_send_command+0x5a>
    SPSR &= ~(1 << SPIF);
    2d9e:	8d b5       	in	r24, 0x2d	; 45
    2da0:	8f 77       	andi	r24, 0x7F	; 127
    2da2:	8d bd       	out	0x2d, r24	; 45
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    2da4:	4e bd       	out	0x2e, r20	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    2da6:	0d b4       	in	r0, 0x2d	; 45
    2da8:	07 fe       	sbrs	r0, 7
    2daa:	fd cf       	rjmp	.-6      	; 0x2da6 <sd_raw_send_command+0x68>
    SPSR &= ~(1 << SPIF);
    2dac:	8d b5       	in	r24, 0x2d	; 45
    2dae:	8f 77       	andi	r24, 0x7F	; 127
    2db0:	8d bd       	out	0x2d, r24	; 45
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
    switch(command)
    2db2:	22 23       	and	r18, r18
    2db4:	19 f0       	breq	.+6      	; 0x2dbc <sd_raw_send_command+0x7e>
    2db6:	28 30       	cpi	r18, 0x08	; 8
    2db8:	69 f4       	brne	.+26     	; 0x2dd4 <sd_raw_send_command+0x96>
    2dba:	06 c0       	rjmp	.+12     	; 0x2dc8 <sd_raw_send_command+0x8a>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    2dbc:	85 e9       	ldi	r24, 0x95	; 149
    2dbe:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    2dc0:	0d b4       	in	r0, 0x2d	; 45
    2dc2:	07 fe       	sbrs	r0, 7
    2dc4:	fd cf       	rjmp	.-6      	; 0x2dc0 <sd_raw_send_command+0x82>
    2dc6:	0b c0       	rjmp	.+22     	; 0x2dde <sd_raw_send_command+0xa0>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    2dc8:	87 e8       	ldi	r24, 0x87	; 135
    2dca:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    2dcc:	0d b4       	in	r0, 0x2d	; 45
    2dce:	07 fe       	sbrs	r0, 7
    2dd0:	fd cf       	rjmp	.-6      	; 0x2dcc <sd_raw_send_command+0x8e>
    2dd2:	05 c0       	rjmp	.+10     	; 0x2dde <sd_raw_send_command+0xa0>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    2dd4:	8f ef       	ldi	r24, 0xFF	; 255
    2dd6:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    2dd8:	0d b4       	in	r0, 0x2d	; 45
    2dda:	07 fe       	sbrs	r0, 7
    2ddc:	fd cf       	rjmp	.-6      	; 0x2dd8 <sd_raw_send_command+0x9a>
    SPSR &= ~(1 << SPIF);
    2dde:	8d b5       	in	r24, 0x2d	; 45
    2de0:	8f 77       	andi	r24, 0x7F	; 127
    2de2:	8d bd       	out	0x2d, r24	; 45
    2de4:	90 e0       	ldi	r25, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    2de6:	2f ef       	ldi	r18, 0xFF	; 255
    2de8:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
    2dea:	0d b4       	in	r0, 0x2d	; 45
    2dec:	07 fe       	sbrs	r0, 7
    2dee:	fd cf       	rjmp	.-6      	; 0x2dea <sd_raw_send_command+0xac>
    SPSR &= ~(1 << SPIF);
    2df0:	8d b5       	in	r24, 0x2d	; 45
    2df2:	8f 77       	andi	r24, 0x7F	; 127
    2df4:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    2df6:	8e b5       	in	r24, 0x2e	; 46
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
        if(response != 0xff)
    2df8:	8f 3f       	cpi	r24, 0xFF	; 255
    2dfa:	19 f4       	brne	.+6      	; 0x2e02 <sd_raw_send_command+0xc4>
           sd_raw_send_byte(0xff);
           break;
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    2dfc:	9f 5f       	subi	r25, 0xFF	; 255
    2dfe:	9a 30       	cpi	r25, 0x0A	; 10
    2e00:	99 f7       	brne	.-26     	; 0x2de8 <sd_raw_send_command+0xaa>
        if(response != 0xff)
            break;
    }

    return response;
}
    2e02:	08 95       	ret

00002e04 <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    2e04:	cf 92       	push	r12
    2e06:	df 92       	push	r13
    2e08:	ef 92       	push	r14
    2e0a:	ff 92       	push	r15
    2e0c:	0f 93       	push	r16
    2e0e:	1f 93       	push	r17
    2e10:	cf 93       	push	r28
    2e12:	df 93       	push	r29
    2e14:	ec 01       	movw	r28, r24
    if(!info || !sd_raw_available())
    2e16:	00 97       	sbiw	r24, 0x00	; 0
    2e18:	81 f0       	breq	.+32     	; 0x2e3a <sd_raw_get_info+0x36>
        return 0;

    memset(info, 0, sizeof(*info));
    2e1a:	89 e1       	ldi	r24, 0x19	; 25
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	11 92       	st	Z+, r1
    2e20:	8a 95       	dec	r24
    2e22:	e9 f7       	brne	.-6      	; 0x2e1e <sd_raw_get_info+0x1a>

    select_card();
    2e24:	2a 98       	cbi	0x05, 2	; 5

    /* read cid register */
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    2e26:	8a e0       	ldi	r24, 0x0A	; 10
    2e28:	40 e0       	ldi	r20, 0x00	; 0
    2e2a:	50 e0       	ldi	r21, 0x00	; 0
    2e2c:	60 e0       	ldi	r22, 0x00	; 0
    2e2e:	70 e0       	ldi	r23, 0x00	; 0
    2e30:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <sd_raw_send_command>
    2e34:	88 23       	and	r24, r24
    2e36:	19 f0       	breq	.+6      	; 0x2e3e <sd_raw_get_info+0x3a>
    {
        unselect_card();
    2e38:	2a 9a       	sbi	0x05, 2	; 5
    2e3a:	80 e0       	ldi	r24, 0x00	; 0
    2e3c:	f7 c0       	rjmp	.+494    	; 0x302c <sd_raw_get_info+0x228>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    2e3e:	9f ef       	ldi	r25, 0xFF	; 255
    2e40:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    2e42:	0d b4       	in	r0, 0x2d	; 45
    2e44:	07 fe       	sbrs	r0, 7
    2e46:	fd cf       	rjmp	.-6      	; 0x2e42 <sd_raw_get_info+0x3e>
    SPSR &= ~(1 << SPIF);
    2e48:	8d b5       	in	r24, 0x2d	; 45
    2e4a:	8f 77       	andi	r24, 0x7F	; 127
    2e4c:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    2e4e:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    2e50:	8e 3f       	cpi	r24, 0xFE	; 254
    2e52:	b1 f7       	brne	.-20     	; 0x2e40 <sd_raw_get_info+0x3c>
    2e54:	1c 2f       	mov	r17, r28
    2e56:	ce 01       	movw	r24, r28
    2e58:	fc 01       	movw	r30, r24
    2e5a:	60 e6       	ldi	r22, 0x60	; 96
    2e5c:	70 e0       	ldi	r23, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    2e5e:	0f ef       	ldi	r16, 0xFF	; 255
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    2e60:	9e 2f       	mov	r25, r30
    2e62:	91 1b       	sub	r25, r17
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    2e64:	0e bd       	out	0x2e, r16	; 46
    while(!(SPSR & (1 << SPIF)));
    2e66:	0d b4       	in	r0, 0x2d	; 45
    2e68:	07 fe       	sbrs	r0, 7
    2e6a:	fd cf       	rjmp	.-6      	; 0x2e66 <sd_raw_get_info+0x62>
    SPSR &= ~(1 << SPIF);
    2e6c:	8d b5       	in	r24, 0x2d	; 45
    2e6e:	8f 77       	andi	r24, 0x7F	; 127
    2e70:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    2e72:	2e b5       	in	r18, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        switch(i)
    2e74:	98 30       	cpi	r25, 0x08	; 8
    2e76:	28 f4       	brcc	.+10     	; 0x2e82 <sd_raw_get_info+0x7e>
    2e78:	93 30       	cpi	r25, 0x03	; 3
    2e7a:	88 f4       	brcc	.+34     	; 0x2e9e <sd_raw_get_info+0x9a>
    2e7c:	99 23       	and	r25, r25
    2e7e:	59 f0       	breq	.+22     	; 0x2e96 <sd_raw_get_info+0x92>
    2e80:	0c c0       	rjmp	.+24     	; 0x2e9a <sd_raw_get_info+0x96>
    2e82:	9d 30       	cpi	r25, 0x0D	; 13
    2e84:	18 f4       	brcc	.+6      	; 0x2e8c <sd_raw_get_info+0x88>
    2e86:	99 30       	cpi	r25, 0x09	; 9
    2e88:	70 f4       	brcc	.+28     	; 0x2ea6 <sd_raw_get_info+0xa2>
    2e8a:	0b c0       	rjmp	.+22     	; 0x2ea2 <sd_raw_get_info+0x9e>
    2e8c:	9d 30       	cpi	r25, 0x0D	; 13
    2e8e:	19 f1       	breq	.+70     	; 0x2ed6 <sd_raw_get_info+0xd2>
    2e90:	9e 30       	cpi	r25, 0x0E	; 14
    2e92:	69 f5       	brne	.+90     	; 0x2eee <sd_raw_get_info+0xea>
    2e94:	24 c0       	rjmp	.+72     	; 0x2ede <sd_raw_get_info+0xda>
        {
            case 0:
                info->manufacturer = b;
    2e96:	28 83       	st	Y, r18
    2e98:	2a c0       	rjmp	.+84     	; 0x2eee <sd_raw_get_info+0xea>
                break;
            case 1:
            case 2:
                info->oem[i - 1] = b;
    2e9a:	20 83       	st	Z, r18
    2e9c:	28 c0       	rjmp	.+80     	; 0x2eee <sd_raw_get_info+0xea>
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
    2e9e:	21 83       	std	Z+1, r18	; 0x01
    2ea0:	26 c0       	rjmp	.+76     	; 0x2eee <sd_raw_get_info+0xea>
                break;
            case 8:
                info->revision = b;
    2ea2:	2a 87       	std	Y+10, r18	; 0x0a
    2ea4:	24 c0       	rjmp	.+72     	; 0x2eee <sd_raw_get_info+0xea>
                break;
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (uint32_t) b << ((12 - i) * 8);
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e0       	ldi	r20, 0x00	; 0
    2eaa:	50 e0       	ldi	r21, 0x00	; 0
    2eac:	06 2e       	mov	r0, r22
    2eae:	04 c0       	rjmp	.+8      	; 0x2eb8 <sd_raw_get_info+0xb4>
    2eb0:	22 0f       	add	r18, r18
    2eb2:	33 1f       	adc	r19, r19
    2eb4:	44 1f       	adc	r20, r20
    2eb6:	55 1f       	adc	r21, r21
    2eb8:	0a 94       	dec	r0
    2eba:	d2 f7       	brpl	.-12     	; 0x2eb0 <sd_raw_get_info+0xac>
    2ebc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ebe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ec0:	ad 85       	ldd	r26, Y+13	; 0x0d
    2ec2:	be 85       	ldd	r27, Y+14	; 0x0e
    2ec4:	82 2b       	or	r24, r18
    2ec6:	93 2b       	or	r25, r19
    2ec8:	a4 2b       	or	r26, r20
    2eca:	b5 2b       	or	r27, r21
    2ecc:	8b 87       	std	Y+11, r24	; 0x0b
    2ece:	9c 87       	std	Y+12, r25	; 0x0c
    2ed0:	ad 87       	std	Y+13, r26	; 0x0d
    2ed2:	be 87       	std	Y+14, r27	; 0x0e
    2ed4:	0c c0       	rjmp	.+24     	; 0x2eee <sd_raw_get_info+0xea>
                break;
            case 13:
                info->manufacturing_year = b << 4;
    2ed6:	22 95       	swap	r18
    2ed8:	20 7f       	andi	r18, 0xF0	; 240
    2eda:	2f 87       	std	Y+15, r18	; 0x0f
    2edc:	08 c0       	rjmp	.+16     	; 0x2eee <sd_raw_get_info+0xea>
                break;
            case 14:
                info->manufacturing_year |= b >> 4;
    2ede:	92 2f       	mov	r25, r18
    2ee0:	92 95       	swap	r25
    2ee2:	9f 70       	andi	r25, 0x0F	; 15
    2ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ee6:	89 2b       	or	r24, r25
    2ee8:	8f 87       	std	Y+15, r24	; 0x0f
                info->manufacturing_month = b & 0x0f;
    2eea:	2f 70       	andi	r18, 0x0F	; 15
    2eec:	28 8b       	std	Y+16, r18	; 0x10
    2eee:	31 96       	adiw	r30, 0x01	; 1
    2ef0:	68 50       	subi	r22, 0x08	; 8
    2ef2:	70 40       	sbci	r23, 0x00	; 0
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    2ef4:	8f ef       	ldi	r24, 0xFF	; 255
    2ef6:	60 3d       	cpi	r22, 0xD0	; 208
    2ef8:	78 07       	cpc	r23, r24
    2efa:	09 f0       	breq	.+2      	; 0x2efe <sd_raw_get_info+0xfa>
    2efc:	b1 cf       	rjmp	.-158    	; 0x2e60 <sd_raw_get_info+0x5c>
#if SD_RAW_SDHC
    uint16_t csd_c_size = 0;
#else
    uint32_t csd_c_size = 0;
#endif
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    2efe:	89 e0       	ldi	r24, 0x09	; 9
    2f00:	40 e0       	ldi	r20, 0x00	; 0
    2f02:	50 e0       	ldi	r21, 0x00	; 0
    2f04:	60 e0       	ldi	r22, 0x00	; 0
    2f06:	70 e0       	ldi	r23, 0x00	; 0
    2f08:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <sd_raw_send_command>
    2f0c:	88 23       	and	r24, r24
    2f0e:	09 f0       	breq	.+2      	; 0x2f12 <sd_raw_get_info+0x10e>
    2f10:	93 cf       	rjmp	.-218    	; 0x2e38 <sd_raw_get_info+0x34>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    2f12:	9f ef       	ldi	r25, 0xFF	; 255
    2f14:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    2f16:	0d b4       	in	r0, 0x2d	; 45
    2f18:	07 fe       	sbrs	r0, 7
    2f1a:	fd cf       	rjmp	.-6      	; 0x2f16 <sd_raw_get_info+0x112>
    SPSR &= ~(1 << SPIF);
    2f1c:	8d b5       	in	r24, 0x2d	; 45
    2f1e:	8f 77       	andi	r24, 0x7F	; 127
    2f20:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    2f22:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    2f24:	8e 3f       	cpi	r24, 0xFE	; 254
    2f26:	b1 f7       	brne	.-20     	; 0x2f14 <sd_raw_get_info+0x110>
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	70 e0       	ldi	r23, 0x00	; 0
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	40 e0       	ldi	r20, 0x00	; 0
    2f32:	50 e0       	ldi	r21, 0x00	; 0
    2f34:	60 e0       	ldi	r22, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    2f36:	1f ef       	ldi	r17, 0xFF	; 255
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
    2f38:	e1 e0       	ldi	r30, 0x01	; 1
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    2f3a:	1e bd       	out	0x2e, r17	; 46
    while(!(SPSR & (1 << SPIF)));
    2f3c:	0d b4       	in	r0, 0x2d	; 45
    2f3e:	07 fe       	sbrs	r0, 7
    2f40:	fd cf       	rjmp	.-6      	; 0x2f3c <sd_raw_get_info+0x138>
    SPSR &= ~(1 << SPIF);
    2f42:	8d b5       	in	r24, 0x2d	; 45
    2f44:	8f 77       	andi	r24, 0x7F	; 127
    2f46:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    2f48:	8e b5       	in	r24, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        if(i == 14)
    2f4a:	6e 30       	cpi	r22, 0x0E	; 14
    2f4c:	79 f4       	brne	.+30     	; 0x2f6c <sd_raw_get_info+0x168>
        {
            if(b & 0x40)
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	86 fd       	sbrc	r24, 6
                info->flag_copy = 1;
    2f52:	ed 8b       	std	Y+21, r30	; 0x15
            if(b & 0x20)
    2f54:	85 fd       	sbrc	r24, 5
                info->flag_write_protect = 1;
    2f56:	ee 8b       	std	Y+22, r30	; 0x16
            if(b & 0x10)
    2f58:	84 fd       	sbrc	r24, 4
                info->flag_write_protect_temp = 1;
    2f5a:	ef 8b       	std	Y+23, r30	; 0x17
            info->format = (b & 0x0c) >> 2;
    2f5c:	8c 70       	andi	r24, 0x0C	; 12
    2f5e:	90 70       	andi	r25, 0x00	; 0
    2f60:	95 95       	asr	r25
    2f62:	87 95       	ror	r24
    2f64:	95 95       	asr	r25
    2f66:	87 95       	ror	r24
    2f68:	88 8f       	std	Y+24, r24	; 0x18
    2f6a:	5a c0       	rjmp	.+180    	; 0x3020 <sd_raw_get_info+0x21c>
                }
            }
            else
#endif
            {
                switch(i)
    2f6c:	67 30       	cpi	r22, 0x07	; 7
    2f6e:	f9 f0       	breq	.+62     	; 0x2fae <sd_raw_get_info+0x1aa>
    2f70:	68 30       	cpi	r22, 0x08	; 8
    2f72:	30 f4       	brcc	.+12     	; 0x2f80 <sd_raw_get_info+0x17c>
    2f74:	65 30       	cpi	r22, 0x05	; 5
    2f76:	61 f0       	breq	.+24     	; 0x2f90 <sd_raw_get_info+0x18c>
    2f78:	66 30       	cpi	r22, 0x06	; 6
    2f7a:	09 f0       	breq	.+2      	; 0x2f7e <sd_raw_get_info+0x17a>
    2f7c:	51 c0       	rjmp	.+162    	; 0x3020 <sd_raw_get_info+0x21c>
    2f7e:	0b c0       	rjmp	.+22     	; 0x2f96 <sd_raw_get_info+0x192>
    2f80:	69 30       	cpi	r22, 0x09	; 9
    2f82:	a1 f1       	breq	.+104    	; 0x2fec <sd_raw_get_info+0x1e8>
    2f84:	69 30       	cpi	r22, 0x09	; 9
    2f86:	10 f1       	brcs	.+68     	; 0x2fcc <sd_raw_get_info+0x1c8>
    2f88:	6a 30       	cpi	r22, 0x0A	; 10
    2f8a:	09 f0       	breq	.+2      	; 0x2f8e <sd_raw_get_info+0x18a>
    2f8c:	49 c0       	rjmp	.+146    	; 0x3020 <sd_raw_get_info+0x21c>
    2f8e:	32 c0       	rjmp	.+100    	; 0x2ff4 <sd_raw_get_info+0x1f0>
                {
                    case 5:
                        csd_read_bl_len = b & 0x0f;
    2f90:	f8 2f       	mov	r31, r24
    2f92:	ff 70       	andi	r31, 0x0F	; 15
    2f94:	45 c0       	rjmp	.+138    	; 0x3020 <sd_raw_get_info+0x21c>
                        break;
                    case 6:
                        csd_c_size = b & 0x03;
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	a0 e0       	ldi	r26, 0x00	; 0
    2f9a:	b0 e0       	ldi	r27, 0x00	; 0
    2f9c:	83 70       	andi	r24, 0x03	; 3
    2f9e:	90 70       	andi	r25, 0x00	; 0
    2fa0:	a0 70       	andi	r26, 0x00	; 0
    2fa2:	b0 70       	andi	r27, 0x00	; 0
                        csd_c_size <<= 8;
    2fa4:	22 27       	eor	r18, r18
    2fa6:	38 2f       	mov	r19, r24
    2fa8:	49 2f       	mov	r20, r25
    2faa:	5a 2f       	mov	r21, r26
    2fac:	39 c0       	rjmp	.+114    	; 0x3020 <sd_raw_get_info+0x21c>
                        break;
                    case 7:
                        csd_c_size |= b;
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	a0 e0       	ldi	r26, 0x00	; 0
    2fb2:	b0 e0       	ldi	r27, 0x00	; 0
    2fb4:	28 2b       	or	r18, r24
    2fb6:	39 2b       	or	r19, r25
    2fb8:	4a 2b       	or	r20, r26
    2fba:	5b 2b       	or	r21, r27
                        csd_c_size <<= 2;
    2fbc:	a2 e0       	ldi	r26, 0x02	; 2
    2fbe:	22 0f       	add	r18, r18
    2fc0:	33 1f       	adc	r19, r19
    2fc2:	44 1f       	adc	r20, r20
    2fc4:	55 1f       	adc	r21, r21
    2fc6:	aa 95       	dec	r26
    2fc8:	d1 f7       	brne	.-12     	; 0x2fbe <sd_raw_get_info+0x1ba>
    2fca:	2a c0       	rjmp	.+84     	; 0x3020 <sd_raw_get_info+0x21c>
                        break;
                    case 8:
                        csd_c_size |= b >> 6;
    2fcc:	82 95       	swap	r24
    2fce:	86 95       	lsr	r24
    2fd0:	86 95       	lsr	r24
    2fd2:	83 70       	andi	r24, 0x03	; 3
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	a0 e0       	ldi	r26, 0x00	; 0
    2fd8:	b0 e0       	ldi	r27, 0x00	; 0
    2fda:	28 2b       	or	r18, r24
    2fdc:	39 2b       	or	r19, r25
    2fde:	4a 2b       	or	r20, r26
    2fe0:	5b 2b       	or	r21, r27
                        ++csd_c_size;
    2fe2:	2f 5f       	subi	r18, 0xFF	; 255
    2fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe6:	4f 4f       	sbci	r20, 0xFF	; 255
    2fe8:	5f 4f       	sbci	r21, 0xFF	; 255
    2fea:	1a c0       	rjmp	.+52     	; 0x3020 <sd_raw_get_info+0x21c>
                        break;
                    case 9:
                        csd_c_size_mult = b & 0x03;
    2fec:	78 2f       	mov	r23, r24
    2fee:	73 70       	andi	r23, 0x03	; 3
                        csd_c_size_mult <<= 1;
    2ff0:	77 0f       	add	r23, r23
    2ff2:	16 c0       	rjmp	.+44     	; 0x3020 <sd_raw_get_info+0x21c>
                        break;
                    case 10:
                        csd_c_size_mult |= b >> 7;
    2ff4:	88 1f       	adc	r24, r24
    2ff6:	88 27       	eor	r24, r24
    2ff8:	88 1f       	adc	r24, r24
    2ffa:	78 2b       	or	r23, r24

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
    2ffc:	8f 2f       	mov	r24, r31
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	02 96       	adiw	r24, 0x02	; 2
    3002:	87 0f       	add	r24, r23
    3004:	91 1d       	adc	r25, r1
    3006:	69 01       	movw	r12, r18
    3008:	7a 01       	movw	r14, r20
    300a:	04 c0       	rjmp	.+8      	; 0x3014 <sd_raw_get_info+0x210>
    300c:	cc 0c       	add	r12, r12
    300e:	dd 1c       	adc	r13, r13
    3010:	ee 1c       	adc	r14, r14
    3012:	ff 1c       	adc	r15, r15
    3014:	8a 95       	dec	r24
    3016:	d2 f7       	brpl	.-12     	; 0x300c <sd_raw_get_info+0x208>
    3018:	c9 8a       	std	Y+17, r12	; 0x11
    301a:	da 8a       	std	Y+18, r13	; 0x12
    301c:	eb 8a       	std	Y+19, r14	; 0x13
    301e:	fc 8a       	std	Y+20, r15	; 0x14
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    3020:	6f 5f       	subi	r22, 0xFF	; 255
    3022:	62 31       	cpi	r22, 0x12	; 18
    3024:	09 f0       	breq	.+2      	; 0x3028 <sd_raw_get_info+0x224>
    3026:	89 cf       	rjmp	.-238    	; 0x2f3a <sd_raw_get_info+0x136>
                }
            }
        }
    }

    unselect_card();
    3028:	2a 9a       	sbi	0x05, 2	; 5
    302a:	81 e0       	ldi	r24, 0x01	; 1

    return 1;
}
    302c:	df 91       	pop	r29
    302e:	cf 91       	pop	r28
    3030:	1f 91       	pop	r17
    3032:	0f 91       	pop	r16
    3034:	ff 90       	pop	r15
    3036:	ef 90       	pop	r14
    3038:	df 90       	pop	r13
    303a:	cf 90       	pop	r12
    303c:	08 95       	ret

0000303e <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    303e:	2f 92       	push	r2
    3040:	3f 92       	push	r3
    3042:	4f 92       	push	r4
    3044:	5f 92       	push	r5
    3046:	6f 92       	push	r6
    3048:	7f 92       	push	r7
    304a:	8f 92       	push	r8
    304c:	9f 92       	push	r9
    304e:	af 92       	push	r10
    3050:	bf 92       	push	r11
    3052:	cf 92       	push	r12
    3054:	df 92       	push	r13
    3056:	ef 92       	push	r14
    3058:	ff 92       	push	r15
    305a:	0f 93       	push	r16
    305c:	1f 93       	push	r17
    305e:	cf 93       	push	r28
    3060:	df 93       	push	r29
    3062:	4b 01       	movw	r8, r22
    3064:	5c 01       	movw	r10, r24
    3066:	2a 01       	movw	r4, r20
    3068:	39 01       	movw	r6, r18
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    306a:	33 24       	eor	r3, r3
    306c:	3a 94       	dec	r3
        buffer += write_length;
        offset += write_length;
        length -= write_length;

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    306e:	22 24       	eor	r2, r2
    3070:	23 94       	inc	r2
    3072:	a1 c0       	rjmp	.+322    	; 0x31b6 <sd_raw_write+0x178>
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    3074:	e4 01       	movw	r28, r8
    3076:	d1 70       	andi	r29, 0x01	; 1
        block_address = offset - block_offset;
    3078:	ce 01       	movw	r24, r28
    307a:	a0 e0       	ldi	r26, 0x00	; 0
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	85 01       	movw	r16, r10
    3080:	74 01       	movw	r14, r8
    3082:	e8 1a       	sub	r14, r24
    3084:	f9 0a       	sbc	r15, r25
    3086:	0a 0b       	sbc	r16, r26
    3088:	1b 0b       	sbc	r17, r27
        write_length = 512 - block_offset; /* write up to block border */
    308a:	c1 2c       	mov	r12, r1
    308c:	b2 e0       	ldi	r27, 0x02	; 2
    308e:	db 2e       	mov	r13, r27
    3090:	cc 1a       	sub	r12, r28
    3092:	dd 0a       	sbc	r13, r29
    3094:	6c 14       	cp	r6, r12
    3096:	7d 04       	cpc	r7, r13
    3098:	08 f4       	brcc	.+2      	; 0x309c <sd_raw_write+0x5e>
    309a:	63 01       	movw	r12, r6
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    309c:	80 91 cb 03 	lds	r24, 0x03CB
    30a0:	90 91 cc 03 	lds	r25, 0x03CC
    30a4:	a0 91 cd 03 	lds	r26, 0x03CD
    30a8:	b0 91 ce 03 	lds	r27, 0x03CE
    30ac:	e8 16       	cp	r14, r24
    30ae:	f9 06       	cpc	r15, r25
    30b0:	0a 07       	cpc	r16, r26
    30b2:	1b 07       	cpc	r17, r27
    30b4:	f9 f0       	breq	.+62     	; 0x30f4 <sd_raw_write+0xb6>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    30b6:	0e 94 f5 18 	call	0x31ea	; 0x31ea <sd_raw_sync>
    30ba:	88 23       	and	r24, r24
    30bc:	09 f4       	brne	.+2      	; 0x30c0 <sd_raw_write+0x82>
    30be:	81 c0       	rjmp	.+258    	; 0x31c2 <sd_raw_write+0x184>
                return 0;
#endif

            if(block_offset || write_length < 512)
    30c0:	20 97       	sbiw	r28, 0x00	; 0
    30c2:	29 f4       	brne	.+10     	; 0x30ce <sd_raw_write+0x90>
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	c8 16       	cp	r12, r24
    30c8:	82 e0       	ldi	r24, 0x02	; 2
    30ca:	d8 06       	cpc	r13, r24
    30cc:	58 f4       	brcc	.+22     	; 0x30e4 <sd_raw_write+0xa6>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    30ce:	c8 01       	movw	r24, r16
    30d0:	b7 01       	movw	r22, r14
    30d2:	4b ec       	ldi	r20, 0xCB	; 203
    30d4:	51 e0       	ldi	r21, 0x01	; 1
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	32 e0       	ldi	r19, 0x02	; 2
    30da:	0e 94 0f 19 	call	0x321e	; 0x321e <sd_raw_read>
    30de:	88 23       	and	r24, r24
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <sd_raw_write+0xa6>
    30e2:	6f c0       	rjmp	.+222    	; 0x31c2 <sd_raw_write+0x184>
                    return 0;
            }
            raw_block_address = block_address;
    30e4:	e0 92 cb 03 	sts	0x03CB, r14
    30e8:	f0 92 cc 03 	sts	0x03CC, r15
    30ec:	00 93 cd 03 	sts	0x03CD, r16
    30f0:	10 93 ce 03 	sts	0x03CE, r17
        }

        if(buffer != raw_block)
    30f4:	8b ec       	ldi	r24, 0xCB	; 203
    30f6:	48 16       	cp	r4, r24
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	58 06       	cpc	r5, r24
    30fc:	71 f0       	breq	.+28     	; 0x311a <sd_raw_write+0xdc>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    30fe:	9e 01       	movw	r18, r28
    3100:	25 53       	subi	r18, 0x35	; 53
    3102:	3e 4f       	sbci	r19, 0xFE	; 254
    3104:	c9 01       	movw	r24, r18
    3106:	b2 01       	movw	r22, r4
    3108:	a6 01       	movw	r20, r12
    310a:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    310e:	10 92 cf 03 	sts	0x03CF, r1

            if(length == write_length)
    3112:	6c 14       	cp	r6, r12
    3114:	7d 04       	cpc	r7, r13
    3116:	09 f4       	brne	.+2      	; 0x311a <sd_raw_write+0xdc>
    3118:	52 c0       	rjmp	.+164    	; 0x31be <sd_raw_write+0x180>
                return 1;
#endif
        }

        /* address card */
        select_card();
    311a:	2a 98       	cbi	0x05, 2	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
    311c:	88 e1       	ldi	r24, 0x18	; 24
    311e:	b8 01       	movw	r22, r16
    3120:	a7 01       	movw	r20, r14
    3122:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <sd_raw_send_command>
    3126:	88 23       	and	r24, r24
    3128:	11 f0       	breq	.+4      	; 0x312e <sd_raw_write+0xf0>
#endif
        {
            unselect_card();
    312a:	2a 9a       	sbi	0x05, 2	; 5
    312c:	4a c0       	rjmp	.+148    	; 0x31c2 <sd_raw_write+0x184>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    312e:	8e ef       	ldi	r24, 0xFE	; 254
    3130:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    3132:	0d b4       	in	r0, 0x2d	; 45
    3134:	07 fe       	sbrs	r0, 7
    3136:	fd cf       	rjmp	.-6      	; 0x3132 <sd_raw_write+0xf4>
    SPSR &= ~(1 << SPIF);
    3138:	8d b5       	in	r24, 0x2d	; 45
    313a:	8f 77       	andi	r24, 0x7F	; 127
    313c:	8d bd       	out	0x2d, r24	; 45
    313e:	eb ec       	ldi	r30, 0xCB	; 203
    3140:	f1 e0       	ldi	r31, 0x01	; 1
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    3142:	81 91       	ld	r24, Z+
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3144:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    3146:	0d b4       	in	r0, 0x2d	; 45
    3148:	07 fe       	sbrs	r0, 7
    314a:	fd cf       	rjmp	.-6      	; 0x3146 <sd_raw_write+0x108>
    SPSR &= ~(1 << SPIF);
    314c:	8d b5       	in	r24, 0x2d	; 45
    314e:	8f 77       	andi	r24, 0x7F	; 127
    3150:	8d bd       	out	0x2d, r24	; 45
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    3152:	83 e0       	ldi	r24, 0x03	; 3
    3154:	eb 3c       	cpi	r30, 0xCB	; 203
    3156:	f8 07       	cpc	r31, r24
    3158:	a1 f7       	brne	.-24     	; 0x3142 <sd_raw_write+0x104>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    315a:	3e bc       	out	0x2e, r3	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    315c:	0d b4       	in	r0, 0x2d	; 45
    315e:	07 fe       	sbrs	r0, 7
    3160:	fd cf       	rjmp	.-6      	; 0x315c <sd_raw_write+0x11e>
    SPSR &= ~(1 << SPIF);
    3162:	8d b5       	in	r24, 0x2d	; 45
    3164:	8f 77       	andi	r24, 0x7F	; 127
    3166:	8d bd       	out	0x2d, r24	; 45
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3168:	3e bc       	out	0x2e, r3	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    316a:	0d b4       	in	r0, 0x2d	; 45
    316c:	07 fe       	sbrs	r0, 7
    316e:	fd cf       	rjmp	.-6      	; 0x316a <sd_raw_write+0x12c>
    SPSR &= ~(1 << SPIF);
    3170:	8d b5       	in	r24, 0x2d	; 45
    3172:	8f 77       	andi	r24, 0x7F	; 127
    3174:	8d bd       	out	0x2d, r24	; 45
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3176:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    3178:	0d b4       	in	r0, 0x2d	; 45
    317a:	07 fe       	sbrs	r0, 7
    317c:	fd cf       	rjmp	.-6      	; 0x3178 <sd_raw_write+0x13a>
    SPSR &= ~(1 << SPIF);
    317e:	8d b5       	in	r24, 0x2d	; 45
    3180:	8f 77       	andi	r24, 0x7F	; 127
    3182:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3184:	8e b5       	in	r24, 0x2e	; 46
        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
        sd_raw_send_byte(0xff);

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    3186:	8f 3f       	cpi	r24, 0xFF	; 255
    3188:	b1 f7       	brne	.-20     	; 0x3176 <sd_raw_write+0x138>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    318a:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    318c:	0d b4       	in	r0, 0x2d	; 45
    318e:	07 fe       	sbrs	r0, 7
    3190:	fd cf       	rjmp	.-6      	; 0x318c <sd_raw_write+0x14e>
    SPSR &= ~(1 << SPIF);
    3192:	8d b5       	in	r24, 0x2d	; 45
    3194:	8f 77       	andi	r24, 0x7F	; 127
    3196:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3198:	8e b5       	in	r24, 0x2e	; 46
        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
        sd_raw_rec_byte();

        /* deaddress card */
        unselect_card();
    319a:	2a 9a       	sbi	0x05, 2	; 5

        buffer += write_length;
    319c:	4c 0c       	add	r4, r12
    319e:	5d 1c       	adc	r5, r13
        offset += write_length;
    31a0:	c6 01       	movw	r24, r12
    31a2:	a0 e0       	ldi	r26, 0x00	; 0
    31a4:	b0 e0       	ldi	r27, 0x00	; 0
    31a6:	88 0e       	add	r8, r24
    31a8:	99 1e       	adc	r9, r25
    31aa:	aa 1e       	adc	r10, r26
    31ac:	bb 1e       	adc	r11, r27
        length -= write_length;
    31ae:	6c 18       	sub	r6, r12
    31b0:	7d 08       	sbc	r7, r13

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    31b2:	20 92 cf 03 	sts	0x03CF, r2
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    31b6:	61 14       	cp	r6, r1
    31b8:	71 04       	cpc	r7, r1
    31ba:	09 f0       	breq	.+2      	; 0x31be <sd_raw_write+0x180>
    31bc:	5b cf       	rjmp	.-330    	; 0x3074 <sd_raw_write+0x36>
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	01 c0       	rjmp	.+2      	; 0x31c4 <sd_raw_write+0x186>
    31c2:	80 e0       	ldi	r24, 0x00	; 0
        raw_block_written = 1;
#endif
    }

    return 1;
}
    31c4:	df 91       	pop	r29
    31c6:	cf 91       	pop	r28
    31c8:	1f 91       	pop	r17
    31ca:	0f 91       	pop	r16
    31cc:	ff 90       	pop	r15
    31ce:	ef 90       	pop	r14
    31d0:	df 90       	pop	r13
    31d2:	cf 90       	pop	r12
    31d4:	bf 90       	pop	r11
    31d6:	af 90       	pop	r10
    31d8:	9f 90       	pop	r9
    31da:	8f 90       	pop	r8
    31dc:	7f 90       	pop	r7
    31de:	6f 90       	pop	r6
    31e0:	5f 90       	pop	r5
    31e2:	4f 90       	pop	r4
    31e4:	3f 90       	pop	r3
    31e6:	2f 90       	pop	r2
    31e8:	08 95       	ret

000031ea <sd_raw_sync>:
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    31ea:	80 91 cf 03 	lds	r24, 0x03CF
    31ee:	88 23       	and	r24, r24
    31f0:	11 f0       	breq	.+4      	; 0x31f6 <sd_raw_sync+0xc>
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	08 95       	ret
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    31f6:	60 91 cb 03 	lds	r22, 0x03CB
    31fa:	70 91 cc 03 	lds	r23, 0x03CC
    31fe:	80 91 cd 03 	lds	r24, 0x03CD
    3202:	90 91 ce 03 	lds	r25, 0x03CE
    3206:	4b ec       	ldi	r20, 0xCB	; 203
    3208:	51 e0       	ldi	r21, 0x01	; 1
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	32 e0       	ldi	r19, 0x02	; 2
    320e:	0e 94 1f 18 	call	0x303e	; 0x303e <sd_raw_write>
    3212:	88 23       	and	r24, r24
    3214:	19 f0       	breq	.+6      	; 0x321c <sd_raw_sync+0x32>
        return 0;
    raw_block_written = 1;
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	80 93 cf 03 	sts	0x03CF, r24
#endif
    return 1;
}
    321c:	08 95       	ret

0000321e <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    321e:	3f 92       	push	r3
    3220:	4f 92       	push	r4
    3222:	5f 92       	push	r5
    3224:	6f 92       	push	r6
    3226:	7f 92       	push	r7
    3228:	8f 92       	push	r8
    322a:	9f 92       	push	r9
    322c:	af 92       	push	r10
    322e:	bf 92       	push	r11
    3230:	cf 92       	push	r12
    3232:	df 92       	push	r13
    3234:	ef 92       	push	r14
    3236:	ff 92       	push	r15
    3238:	0f 93       	push	r16
    323a:	1f 93       	push	r17
    323c:	cf 93       	push	r28
    323e:	df 93       	push	r29
    3240:	3b 01       	movw	r6, r22
    3242:	4c 01       	movw	r8, r24
    3244:	6a 01       	movw	r12, r20
    3246:	29 01       	movw	r4, r18
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3248:	33 24       	eor	r3, r3
    324a:	3a 94       	dec	r3
    324c:	8f c0       	rjmp	.+286    	; 0x336c <sd_raw_read+0x14e>
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    324e:	1f ef       	ldi	r17, 0xFF	; 255
    3250:	a1 2e       	mov	r10, r17
    3252:	11 e0       	ldi	r17, 0x01	; 1
    3254:	b1 2e       	mov	r11, r17
    3256:	a6 20       	and	r10, r6
    3258:	b7 20       	and	r11, r7
        block_address = offset - block_offset;
    325a:	c5 01       	movw	r24, r10
    325c:	a0 e0       	ldi	r26, 0x00	; 0
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	84 01       	movw	r16, r8
    3262:	73 01       	movw	r14, r6
    3264:	e8 1a       	sub	r14, r24
    3266:	f9 0a       	sbc	r15, r25
    3268:	0a 0b       	sbc	r16, r26
    326a:	1b 0b       	sbc	r17, r27
        read_length = 512 - block_offset; /* read up to block border */
    326c:	c0 e0       	ldi	r28, 0x00	; 0
    326e:	d2 e0       	ldi	r29, 0x02	; 2
    3270:	ca 19       	sub	r28, r10
    3272:	db 09       	sbc	r29, r11
    3274:	4c 16       	cp	r4, r28
    3276:	5d 06       	cpc	r5, r29
    3278:	08 f4       	brcc	.+2      	; 0x327c <sd_raw_read+0x5e>
    327a:	e2 01       	movw	r28, r4
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    327c:	80 91 cb 03 	lds	r24, 0x03CB
    3280:	90 91 cc 03 	lds	r25, 0x03CC
    3284:	a0 91 cd 03 	lds	r26, 0x03CD
    3288:	b0 91 ce 03 	lds	r27, 0x03CE
    328c:	e8 16       	cp	r14, r24
    328e:	f9 06       	cpc	r15, r25
    3290:	0a 07       	cpc	r16, r26
    3292:	1b 07       	cpc	r17, r27
    3294:	09 f4       	brne	.+2      	; 0x3298 <sd_raw_read+0x7a>
    3296:	57 c0       	rjmp	.+174    	; 0x3346 <sd_raw_read+0x128>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    3298:	0e 94 f5 18 	call	0x31ea	; 0x31ea <sd_raw_sync>
    329c:	88 23       	and	r24, r24
    329e:	09 f4       	brne	.+2      	; 0x32a2 <sd_raw_read+0x84>
    32a0:	6a c0       	rjmp	.+212    	; 0x3376 <sd_raw_read+0x158>
                return 0;
#endif

            /* address card */
            select_card();
    32a2:	2a 98       	cbi	0x05, 2	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
    32a4:	81 e1       	ldi	r24, 0x11	; 17
    32a6:	b8 01       	movw	r22, r16
    32a8:	a7 01       	movw	r20, r14
    32aa:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <sd_raw_send_command>
    32ae:	88 23       	and	r24, r24
    32b0:	19 f0       	breq	.+6      	; 0x32b8 <sd_raw_read+0x9a>
#endif
            {
                unselect_card();
    32b2:	2a 9a       	sbi	0x05, 2	; 5
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	5f c0       	rjmp	.+190    	; 0x3376 <sd_raw_read+0x158>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    32b8:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    32ba:	0d b4       	in	r0, 0x2d	; 45
    32bc:	07 fe       	sbrs	r0, 7
    32be:	fd cf       	rjmp	.-6      	; 0x32ba <sd_raw_read+0x9c>
    SPSR &= ~(1 << SPIF);
    32c0:	8d b5       	in	r24, 0x2d	; 45
    32c2:	8f 77       	andi	r24, 0x7F	; 127
    32c4:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    32c6:	8e b5       	in	r24, 0x2e	; 46
                unselect_card();
                return 0;
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    32c8:	8e 3f       	cpi	r24, 0xFE	; 254
    32ca:	b1 f7       	brne	.-20     	; 0x32b8 <sd_raw_read+0x9a>
    32cc:	eb ec       	ldi	r30, 0xCB	; 203
    32ce:	f1 e0       	ldi	r31, 0x01	; 1
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    32d0:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    32d2:	0d b4       	in	r0, 0x2d	; 45
    32d4:	07 fe       	sbrs	r0, 7
    32d6:	fd cf       	rjmp	.-6      	; 0x32d2 <sd_raw_read+0xb4>
    SPSR &= ~(1 << SPIF);
    32d8:	8d b5       	in	r24, 0x2d	; 45
    32da:	8f 77       	andi	r24, 0x7F	; 127
    32dc:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    32de:	8e b5       	in	r24, 0x2e	; 46
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    32e0:	80 83       	st	Z, r24
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    32e2:	83 e0       	ldi	r24, 0x03	; 3
    32e4:	ea 3c       	cpi	r30, 0xCA	; 202
    32e6:	f8 07       	cpc	r31, r24
    32e8:	11 f0       	breq	.+4      	; 0x32ee <sd_raw_read+0xd0>
                *cache++ = sd_raw_rec_byte();
    32ea:	31 96       	adiw	r30, 0x01	; 1
    32ec:	f1 cf       	rjmp	.-30     	; 0x32d0 <sd_raw_read+0xb2>
            raw_block_address = block_address;
    32ee:	e0 92 cb 03 	sts	0x03CB, r14
    32f2:	f0 92 cc 03 	sts	0x03CC, r15
    32f6:	00 93 cd 03 	sts	0x03CD, r16
    32fa:	10 93 ce 03 	sts	0x03CE, r17

            memcpy(buffer, raw_block + block_offset, read_length);
    32fe:	95 01       	movw	r18, r10
    3300:	25 53       	subi	r18, 0x35	; 53
    3302:	3e 4f       	sbci	r19, 0xFE	; 254
    3304:	c6 01       	movw	r24, r12
    3306:	b9 01       	movw	r22, r18
    3308:	ae 01       	movw	r20, r28
    330a:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <memcpy>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    330e:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    3310:	0d b4       	in	r0, 0x2d	; 45
    3312:	07 fe       	sbrs	r0, 7
    3314:	fd cf       	rjmp	.-6      	; 0x3310 <sd_raw_read+0xf2>
    SPSR &= ~(1 << SPIF);
    3316:	8d b5       	in	r24, 0x2d	; 45
    3318:	8f 77       	andi	r24, 0x7F	; 127
    331a:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    331c:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    331e:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    3320:	0d b4       	in	r0, 0x2d	; 45
    3322:	07 fe       	sbrs	r0, 7
    3324:	fd cf       	rjmp	.-6      	; 0x3320 <sd_raw_read+0x102>
    SPSR &= ~(1 << SPIF);
    3326:	8d b5       	in	r24, 0x2d	; 45
    3328:	8f 77       	andi	r24, 0x7F	; 127
    332a:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    332c:	8e b5       	in	r24, 0x2e	; 46
            /* read crc16 */
            sd_raw_rec_byte();
            sd_raw_rec_byte();
            
            /* deaddress card */
            unselect_card();
    332e:	2a 9a       	sbi	0x05, 2	; 5
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3330:	3e bc       	out	0x2e, r3	; 46
    while(!(SPSR & (1 << SPIF)));
    3332:	0d b4       	in	r0, 0x2d	; 45
    3334:	07 fe       	sbrs	r0, 7
    3336:	fd cf       	rjmp	.-6      	; 0x3332 <sd_raw_read+0x114>
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;

            memcpy(buffer, raw_block + block_offset, read_length);
            buffer += read_length;
    3338:	cc 0e       	add	r12, r28
    333a:	dd 1e       	adc	r13, r29
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    while(!(SPSR & (1 << SPIF)));
    SPSR &= ~(1 << SPIF);
    333c:	8d b5       	in	r24, 0x2d	; 45
    333e:	8f 77       	andi	r24, 0x7F	; 127
    3340:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3342:	8e b5       	in	r24, 0x2e	; 46
    3344:	0a c0       	rjmp	.+20     	; 0x335a <sd_raw_read+0x13c>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    3346:	95 01       	movw	r18, r10
    3348:	25 53       	subi	r18, 0x35	; 53
    334a:	3e 4f       	sbci	r19, 0xFE	; 254
    334c:	c6 01       	movw	r24, r12
    334e:	b9 01       	movw	r22, r18
    3350:	ae 01       	movw	r20, r28
    3352:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <memcpy>
            buffer += read_length;
    3356:	cc 0e       	add	r12, r28
    3358:	dd 1e       	adc	r13, r29
        }
#endif

        length -= read_length;
    335a:	4c 1a       	sub	r4, r28
    335c:	5d 0a       	sbc	r5, r29
        offset += read_length;
    335e:	ce 01       	movw	r24, r28
    3360:	a0 e0       	ldi	r26, 0x00	; 0
    3362:	b0 e0       	ldi	r27, 0x00	; 0
    3364:	68 0e       	add	r6, r24
    3366:	79 1e       	adc	r7, r25
    3368:	8a 1e       	adc	r8, r26
    336a:	9b 1e       	adc	r9, r27
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    336c:	41 14       	cp	r4, r1
    336e:	51 04       	cpc	r5, r1
    3370:	09 f0       	breq	.+2      	; 0x3374 <sd_raw_read+0x156>
    3372:	6d cf       	rjmp	.-294    	; 0x324e <sd_raw_read+0x30>
    3374:	81 e0       	ldi	r24, 0x01	; 1
        length -= read_length;
        offset += read_length;
    }

    return 1;
}
    3376:	df 91       	pop	r29
    3378:	cf 91       	pop	r28
    337a:	1f 91       	pop	r17
    337c:	0f 91       	pop	r16
    337e:	ff 90       	pop	r15
    3380:	ef 90       	pop	r14
    3382:	df 90       	pop	r13
    3384:	cf 90       	pop	r12
    3386:	bf 90       	pop	r11
    3388:	af 90       	pop	r10
    338a:	9f 90       	pop	r9
    338c:	8f 90       	pop	r8
    338e:	7f 90       	pop	r7
    3390:	6f 90       	pop	r6
    3392:	5f 90       	pop	r5
    3394:	4f 90       	pop	r4
    3396:	3f 90       	pop	r3
    3398:	08 95       	ret

0000339a <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    339a:	2f 92       	push	r2
    339c:	3f 92       	push	r3
    339e:	4f 92       	push	r4
    33a0:	5f 92       	push	r5
    33a2:	6f 92       	push	r6
    33a4:	7f 92       	push	r7
    33a6:	8f 92       	push	r8
    33a8:	9f 92       	push	r9
    33aa:	af 92       	push	r10
    33ac:	bf 92       	push	r11
    33ae:	cf 92       	push	r12
    33b0:	df 92       	push	r13
    33b2:	ef 92       	push	r14
    33b4:	ff 92       	push	r15
    33b6:	0f 93       	push	r16
    33b8:	1f 93       	push	r17
    33ba:	df 93       	push	r29
    33bc:	cf 93       	push	r28
    33be:	00 d0       	rcall	.+0      	; 0x33c0 <sd_raw_read_interval+0x26>
    33c0:	00 d0       	rcall	.+0      	; 0x33c2 <sd_raw_read_interval+0x28>
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	4b 01       	movw	r8, r22
    33c8:	5c 01       	movw	r10, r24
    33ca:	3a 01       	movw	r6, r20
    33cc:	3c 83       	std	Y+4, r19	; 0x04
    33ce:	2b 83       	std	Y+3, r18	; 0x03
    33d0:	27 01       	movw	r4, r14
    33d2:	da 82       	std	Y+2, r13	; 0x02
    33d4:	c9 82       	std	Y+1, r12	; 0x01
    if(!buffer || interval == 0 || length < interval || !callback)
    33d6:	41 15       	cp	r20, r1
    33d8:	51 05       	cpc	r21, r1
    33da:	a9 f1       	breq	.+106    	; 0x3446 <sd_raw_read_interval+0xac>
    33dc:	21 15       	cp	r18, r1
    33de:	31 05       	cpc	r19, r1
    33e0:	91 f1       	breq	.+100    	; 0x3446 <sd_raw_read_interval+0xac>
    33e2:	02 17       	cp	r16, r18
    33e4:	13 07       	cpc	r17, r19
    33e6:	78 f1       	brcs	.+94     	; 0x3446 <sd_raw_read_interval+0xac>
    33e8:	e1 14       	cp	r14, r1
    33ea:	f1 04       	cpc	r15, r1
    33ec:	61 f1       	breq	.+88     	; 0x3446 <sd_raw_read_interval+0xac>
    33ee:	19 01       	movw	r2, r18
    33f0:	30 94       	com	r3
    33f2:	21 94       	neg	r2
    33f4:	31 08       	sbc	r3, r1
    33f6:	33 94       	inc	r3
    33f8:	02 1b       	sub	r16, r18
    33fa:	13 0b       	sbc	r17, r19
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    33fc:	69 01       	movw	r12, r18
    33fe:	ee 24       	eor	r14, r14
    3400:	ff 24       	eor	r15, r15
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    3402:	c5 01       	movw	r24, r10
    3404:	b4 01       	movw	r22, r8
    3406:	a3 01       	movw	r20, r6
    3408:	2b 81       	ldd	r18, Y+3	; 0x03
    340a:	3c 81       	ldd	r19, Y+4	; 0x04
    340c:	0e 94 0f 19 	call	0x321e	; 0x321e <sd_raw_read>
    3410:	88 23       	and	r24, r24
    3412:	c9 f0       	breq	.+50     	; 0x3446 <sd_raw_read_interval+0xac>
            return 0;
        if(!callback(buffer, offset, p))
    3414:	c3 01       	movw	r24, r6
    3416:	b5 01       	movw	r22, r10
    3418:	a4 01       	movw	r20, r8
    341a:	29 81       	ldd	r18, Y+1	; 0x01
    341c:	3a 81       	ldd	r19, Y+2	; 0x02
    341e:	f2 01       	movw	r30, r4
    3420:	09 95       	icall
    3422:	88 23       	and	r24, r24
    3424:	91 f0       	breq	.+36     	; 0x344a <sd_raw_read_interval+0xb0>
            break;
    3426:	02 0d       	add	r16, r2
    3428:	13 1d       	adc	r17, r3
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    342a:	8b 81       	ldd	r24, Y+3	; 0x03
    342c:	9c 81       	ldd	r25, Y+4	; 0x04
    342e:	80 0f       	add	r24, r16
    3430:	91 1f       	adc	r25, r17
    3432:	2b 81       	ldd	r18, Y+3	; 0x03
    3434:	3c 81       	ldd	r19, Y+4	; 0x04
    3436:	82 17       	cp	r24, r18
    3438:	93 07       	cpc	r25, r19
    343a:	38 f0       	brcs	.+14     	; 0x344a <sd_raw_read_interval+0xb0>
    343c:	8c 0c       	add	r8, r12
    343e:	9d 1c       	adc	r9, r13
    3440:	ae 1c       	adc	r10, r14
    3442:	bf 1c       	adc	r11, r15
    3444:	de cf       	rjmp	.-68     	; 0x3402 <sd_raw_read_interval+0x68>
    3446:	80 e0       	ldi	r24, 0x00	; 0
    3448:	01 c0       	rjmp	.+2      	; 0x344c <sd_raw_read_interval+0xb2>
    344a:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	cf 91       	pop	r28
    3456:	df 91       	pop	r29
    3458:	1f 91       	pop	r17
    345a:	0f 91       	pop	r16
    345c:	ff 90       	pop	r15
    345e:	ef 90       	pop	r14
    3460:	df 90       	pop	r13
    3462:	cf 90       	pop	r12
    3464:	bf 90       	pop	r11
    3466:	af 90       	pop	r10
    3468:	9f 90       	pop	r9
    346a:	8f 90       	pop	r8
    346c:	7f 90       	pop	r7
    346e:	6f 90       	pop	r6
    3470:	5f 90       	pop	r5
    3472:	4f 90       	pop	r4
    3474:	3f 90       	pop	r3
    3476:	2f 90       	pop	r2
    3478:	08 95       	ret

0000347a <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    347a:	0f 93       	push	r16
    347c:	1f 93       	push	r17
    347e:	cf 93       	push	r28
    3480:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    3482:	23 9a       	sbi	0x04, 3	; 4
    configure_pin_sck();
    3484:	25 9a       	sbi	0x04, 5	; 4
    configure_pin_ss();
    3486:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_miso();
    3488:	24 98       	cbi	0x04, 4	; 4

    unselect_card();
    348a:	2a 9a       	sbi	0x05, 2	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    348c:	83 e5       	ldi	r24, 0x53	; 83
    348e:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    3490:	8d b5       	in	r24, 0x2d	; 45
    3492:	8e 7f       	andi	r24, 0xFE	; 254
    3494:	8d bd       	out	0x2d, r24	; 45

    /* initialization procedure */
    sd_raw_card_type = 0;
    3496:	10 92 d0 03 	sts	0x03D0, r1
    349a:	90 e0       	ldi	r25, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    349c:	2f ef       	ldi	r18, 0xFF	; 255
    349e:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
    34a0:	0d b4       	in	r0, 0x2d	; 45
    34a2:	07 fe       	sbrs	r0, 7
    34a4:	fd cf       	rjmp	.-6      	; 0x34a0 <sd_raw_init+0x26>
    SPSR &= ~(1 << SPIF);
    34a6:	8d b5       	in	r24, 0x2d	; 45
    34a8:	8f 77       	andi	r24, 0x7F	; 127
    34aa:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    34ac:	8e b5       	in	r24, 0x2e	; 46
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    34ae:	9f 5f       	subi	r25, 0xFF	; 255
    34b0:	9a 30       	cpi	r25, 0x0A	; 10
    34b2:	a9 f7       	brne	.-22     	; 0x349e <sd_raw_init+0x24>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    34b4:	2a 98       	cbi	0x05, 2	; 5
    34b6:	c0 e0       	ldi	r28, 0x00	; 0
    34b8:	d0 e0       	ldi	r29, 0x00	; 0

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	40 e0       	ldi	r20, 0x00	; 0
    34be:	50 e0       	ldi	r21, 0x00	; 0
    34c0:	60 e0       	ldi	r22, 0x00	; 0
    34c2:	70 e0       	ldi	r23, 0x00	; 0
    34c4:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <sd_raw_send_command>
    34c8:	18 2f       	mov	r17, r24
        if(response == (1 << R1_IDLE_STATE))
    34ca:	81 30       	cpi	r24, 0x01	; 1
    34cc:	39 f0       	breq	.+14     	; 0x34dc <sd_raw_init+0x62>
            break;

        if(i == 0x1ff)
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	cf 3f       	cpi	r28, 0xFF	; 255
    34d2:	d8 07       	cpc	r29, r24
    34d4:	09 f4       	brne	.+2      	; 0x34d8 <sd_raw_init+0x5e>
    34d6:	40 c0       	rjmp	.+128    	; 0x3558 <sd_raw_init+0xde>
    /* address card */
    select_card();

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    34d8:	21 96       	adiw	r28, 0x01	; 1
    34da:	ef cf       	rjmp	.-34     	; 0x34ba <sd_raw_init+0x40>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    34dc:	87 e3       	ldi	r24, 0x37	; 55
    34de:	40 e0       	ldi	r20, 0x00	; 0
    34e0:	50 e0       	ldi	r21, 0x00	; 0
    34e2:	60 e0       	ldi	r22, 0x00	; 0
    34e4:	70 e0       	ldi	r23, 0x00	; 0
    34e6:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    34ea:	89 e2       	ldi	r24, 0x29	; 41
    34ec:	40 e0       	ldi	r20, 0x00	; 0
    34ee:	50 e0       	ldi	r21, 0x00	; 0
    34f0:	60 e0       	ldi	r22, 0x00	; 0
    34f2:	70 e0       	ldi	r23, 0x00	; 0
    34f4:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    34f8:	82 fd       	sbrc	r24, 2
    34fa:	02 c0       	rjmp	.+4      	; 0x3500 <sd_raw_init+0x86>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    34fc:	10 93 d0 03 	sts	0x03D0, r17
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    3500:	80 91 d0 03 	lds	r24, 0x03D0
    3504:	08 2f       	mov	r16, r24
    3506:	10 e0       	ldi	r17, 0x00	; 0
    3508:	03 70       	andi	r16, 0x03	; 3
    350a:	10 70       	andi	r17, 0x00	; 0
    350c:	c0 e0       	ldi	r28, 0x00	; 0
    350e:	d0 e0       	ldi	r29, 0x00	; 0
    3510:	01 15       	cp	r16, r1
    3512:	11 05       	cpc	r17, r1
    3514:	49 f0       	breq	.+18     	; 0x3528 <sd_raw_init+0xae>
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    3516:	87 e3       	ldi	r24, 0x37	; 55
    3518:	40 e0       	ldi	r20, 0x00	; 0
    351a:	50 e0       	ldi	r21, 0x00	; 0
    351c:	60 e0       	ldi	r22, 0x00	; 0
    351e:	70 e0       	ldi	r23, 0x00	; 0
    3520:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    3524:	89 e2       	ldi	r24, 0x29	; 41
    3526:	01 c0       	rjmp	.+2      	; 0x352a <sd_raw_init+0xb0>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	40 e0       	ldi	r20, 0x00	; 0
    352c:	50 e0       	ldi	r21, 0x00	; 0
    352e:	60 e0       	ldi	r22, 0x00	; 0
    3530:	70 e0       	ldi	r23, 0x00	; 0
    3532:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    3536:	80 ff       	sbrs	r24, 0
    3538:	06 c0       	rjmp	.+12     	; 0x3546 <sd_raw_init+0xcc>
            break;

        if(i == 0x7fff)
    353a:	8f e7       	ldi	r24, 0x7F	; 127
    353c:	cf 3f       	cpi	r28, 0xFF	; 255
    353e:	d8 07       	cpc	r29, r24
    3540:	59 f0       	breq	.+22     	; 0x3558 <sd_raw_init+0xde>
            /* MMC card */
        }
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    3542:	21 96       	adiw	r28, 0x01	; 1
    3544:	e5 cf       	rjmp	.-54     	; 0x3510 <sd_raw_init+0x96>
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    3546:	80 e1       	ldi	r24, 0x10	; 16
    3548:	40 e0       	ldi	r20, 0x00	; 0
    354a:	52 e0       	ldi	r21, 0x02	; 2
    354c:	60 e0       	ldi	r22, 0x00	; 0
    354e:	70 e0       	ldi	r23, 0x00	; 0
    3550:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <sd_raw_send_command>
    3554:	88 23       	and	r24, r24
    3556:	19 f0       	breq	.+6      	; 0x355e <sd_raw_init+0xe4>
    {
        unselect_card();
    3558:	2a 9a       	sbi	0x05, 2	; 5
    355a:	80 e0       	ldi	r24, 0x00	; 0
    355c:	22 c0       	rjmp	.+68     	; 0x35a2 <sd_raw_init+0x128>
        return 0;
    }

    /* deaddress card */
    unselect_card();
    355e:	2a 9a       	sbi	0x05, 2	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    3560:	8c b5       	in	r24, 0x2c	; 44
    3562:	8c 7f       	andi	r24, 0xFC	; 252
    3564:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    3566:	8d b5       	in	r24, 0x2d	; 45
    3568:	81 60       	ori	r24, 0x01	; 1
    356a:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    356c:	8f ef       	ldi	r24, 0xFF	; 255
    356e:	9f ef       	ldi	r25, 0xFF	; 255
    3570:	af ef       	ldi	r26, 0xFF	; 255
    3572:	bf ef       	ldi	r27, 0xFF	; 255
    3574:	80 93 cb 03 	sts	0x03CB, r24
    3578:	90 93 cc 03 	sts	0x03CC, r25
    357c:	a0 93 cd 03 	sts	0x03CD, r26
    3580:	b0 93 ce 03 	sts	0x03CE, r27
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    3584:	81 e0       	ldi	r24, 0x01	; 1
    3586:	80 93 cf 03 	sts	0x03CF, r24
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    358a:	60 e0       	ldi	r22, 0x00	; 0
    358c:	70 e0       	ldi	r23, 0x00	; 0
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	4b ec       	ldi	r20, 0xCB	; 203
    3594:	51 e0       	ldi	r21, 0x01	; 1
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	32 e0       	ldi	r19, 0x02	; 2
    359a:	0e 94 0f 19 	call	0x321e	; 0x321e <sd_raw_read>
    359e:	81 11       	cpse	r24, r1
    35a0:	81 e0       	ldi	r24, 0x01	; 1
        return 0;
#endif

    return 1;
}
    35a2:	df 91       	pop	r29
    35a4:	cf 91       	pop	r28
    35a6:	1f 91       	pop	r17
    35a8:	0f 91       	pop	r16
    35aa:	08 95       	ret

000035ac <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    35ac:	4f 92       	push	r4
    35ae:	5f 92       	push	r5
    35b0:	6f 92       	push	r6
    35b2:	7f 92       	push	r7
    35b4:	8f 92       	push	r8
    35b6:	9f 92       	push	r9
    35b8:	af 92       	push	r10
    35ba:	bf 92       	push	r11
    35bc:	cf 92       	push	r12
    35be:	df 92       	push	r13
    35c0:	ef 92       	push	r14
    35c2:	ff 92       	push	r15
    35c4:	0f 93       	push	r16
    35c6:	1f 93       	push	r17
    35c8:	cf 93       	push	r28
    35ca:	df 93       	push	r29
    35cc:	5b 01       	movw	r10, r22
    35ce:	6c 01       	movw	r12, r24
    35d0:	4a 01       	movw	r8, r20
    35d2:	e9 01       	movw	r28, r18
    35d4:	38 01       	movw	r6, r16
    35d6:	27 01       	movw	r4, r14
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    35d8:	41 15       	cp	r20, r1
    35da:	51 05       	cpc	r21, r1
    35dc:	71 f1       	breq	.+92     	; 0x363a <sd_raw_write_interval+0x8e>
    35de:	01 15       	cp	r16, r1
    35e0:	11 05       	cpc	r17, r1
    35e2:	59 f1       	breq	.+86     	; 0x363a <sd_raw_write_interval+0x8e>
        return 0;

    uint8_t endless = (length == 0);
    35e4:	ff 24       	eor	r15, r15
    35e6:	21 15       	cp	r18, r1
    35e8:	31 05       	cpc	r19, r1
    35ea:	11 f5       	brne	.+68     	; 0x3630 <sd_raw_write_interval+0x84>
    35ec:	ff 24       	eor	r15, r15
    35ee:	f3 94       	inc	r15
    35f0:	1f c0       	rjmp	.+62     	; 0x3630 <sd_raw_write_interval+0x84>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    35f2:	c4 01       	movw	r24, r8
    35f4:	b6 01       	movw	r22, r12
    35f6:	a5 01       	movw	r20, r10
    35f8:	92 01       	movw	r18, r4
    35fa:	f3 01       	movw	r30, r6
    35fc:	09 95       	icall
    35fe:	8c 01       	movw	r16, r24
        if(!bytes_to_write)
    3600:	00 97       	sbiw	r24, 0x00	; 0
    3602:	e9 f0       	breq	.+58     	; 0x363e <sd_raw_write_interval+0x92>
            break;
        if(!endless && bytes_to_write > length)
    3604:	ff 20       	and	r15, r15
    3606:	19 f4       	brne	.+6      	; 0x360e <sd_raw_write_interval+0x62>
    3608:	c8 17       	cp	r28, r24
    360a:	d9 07       	cpc	r29, r25
    360c:	b0 f0       	brcs	.+44     	; 0x363a <sd_raw_write_interval+0x8e>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    360e:	c6 01       	movw	r24, r12
    3610:	b5 01       	movw	r22, r10
    3612:	a4 01       	movw	r20, r8
    3614:	98 01       	movw	r18, r16
    3616:	0e 94 1f 18 	call	0x303e	; 0x303e <sd_raw_write>
    361a:	88 23       	and	r24, r24
    361c:	71 f0       	breq	.+28     	; 0x363a <sd_raw_write_interval+0x8e>
            return 0;

        offset += bytes_to_write;
    361e:	c8 01       	movw	r24, r16
    3620:	a0 e0       	ldi	r26, 0x00	; 0
    3622:	b0 e0       	ldi	r27, 0x00	; 0
    3624:	a8 0e       	add	r10, r24
    3626:	b9 1e       	adc	r11, r25
    3628:	ca 1e       	adc	r12, r26
    362a:	db 1e       	adc	r13, r27
        length -= bytes_to_write;
    362c:	c0 1b       	sub	r28, r16
    362e:	d1 0b       	sbc	r29, r17

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    3630:	ff 20       	and	r15, r15
    3632:	f9 f6       	brne	.-66     	; 0x35f2 <sd_raw_write_interval+0x46>
    3634:	20 97       	sbiw	r28, 0x00	; 0
    3636:	e9 f6       	brne	.-70     	; 0x35f2 <sd_raw_write_interval+0x46>
    3638:	02 c0       	rjmp	.+4      	; 0x363e <sd_raw_write_interval+0x92>
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	01 c0       	rjmp	.+2      	; 0x3640 <sd_raw_write_interval+0x94>
    363e:	81 e0       	ldi	r24, 0x01	; 1
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    3640:	df 91       	pop	r29
    3642:	cf 91       	pop	r28
    3644:	1f 91       	pop	r17
    3646:	0f 91       	pop	r16
    3648:	ff 90       	pop	r15
    364a:	ef 90       	pop	r14
    364c:	df 90       	pop	r13
    364e:	cf 90       	pop	r12
    3650:	bf 90       	pop	r11
    3652:	af 90       	pop	r10
    3654:	9f 90       	pop	r9
    3656:	8f 90       	pop	r8
    3658:	7f 90       	pop	r7
    365a:	6f 90       	pop	r6
    365c:	5f 90       	pop	r5
    365e:	4f 90       	pop	r4
    3660:	08 95       	ret

00003662 <fat_close>:
 *
 * \param[in] fs The filesystem to close.
 * \see fat_open
 */
void fat_close(struct fat_fs_struct* fs)
{
    3662:	fc 01       	movw	r30, r24
    if(!fs)
    3664:	00 97       	sbiw	r24, 0x00	; 0
    3666:	11 f0       	breq	.+4      	; 0x366c <fat_close+0xa>
        return;

#if USE_DYNAMIC_MEMORY
    free(fs);
#else
    fs->partition = 0;
    3668:	11 82       	std	Z+1, r1	; 0x01
    366a:	10 82       	st	Z, r1
    366c:	08 95       	ret

0000366e <fat_get_next_cluster>:
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    366e:	df 93       	push	r29
    3670:	cf 93       	push	r28
    3672:	00 d0       	rcall	.+0      	; 0x3674 <fat_get_next_cluster+0x6>
    3674:	cd b7       	in	r28, 0x3d	; 61
    3676:	de b7       	in	r29, 0x3e	; 62
    3678:	dc 01       	movw	r26, r24
    if(!fs || cluster_num < 2)
    367a:	00 97       	sbiw	r24, 0x00	; 0
    367c:	91 f1       	breq	.+100    	; 0x36e2 <fat_get_next_cluster+0x74>
    367e:	62 30       	cpi	r22, 0x02	; 2
    3680:	71 05       	cpc	r23, r1
    3682:	78 f1       	brcs	.+94     	; 0x36e2 <fat_get_next_cluster+0x74>
    else
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        uint32_t cluster_offset = cluster_num;
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	90 e0       	ldi	r25, 0x00	; 0
        cluster_offset *= sizeof(fat_entry);
    3688:	66 0f       	add	r22, r22
    368a:	77 1f       	adc	r23, r23
    368c:	88 1f       	adc	r24, r24
    368e:	99 1f       	adc	r25, r25
        cluster_offset += fs->header.fat_offset;

        if(!fs->partition->device_read(cluster_offset, (uint8_t*) &fat_entry, sizeof(fat_entry)))
    3690:	ed 91       	ld	r30, X+
    3692:	fc 91       	ld	r31, X
    3694:	11 97       	sbiw	r26, 0x01	; 1
    3696:	16 96       	adiw	r26, 0x06	; 6
    3698:	2d 91       	ld	r18, X+
    369a:	3d 91       	ld	r19, X+
    369c:	4d 91       	ld	r20, X+
    369e:	5c 91       	ld	r21, X
    36a0:	19 97       	sbiw	r26, 0x09	; 9
    36a2:	62 0f       	add	r22, r18
    36a4:	73 1f       	adc	r23, r19
    36a6:	84 1f       	adc	r24, r20
    36a8:	95 1f       	adc	r25, r21
    36aa:	01 90       	ld	r0, Z+
    36ac:	f0 81       	ld	r31, Z
    36ae:	e0 2d       	mov	r30, r0
    36b0:	ae 01       	movw	r20, r28
    36b2:	4f 5f       	subi	r20, 0xFF	; 255
    36b4:	5f 4f       	sbci	r21, 0xFF	; 255
    36b6:	22 e0       	ldi	r18, 0x02	; 2
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	09 95       	icall
    36bc:	88 23       	and	r24, r24
    36be:	89 f0       	breq	.+34     	; 0x36e2 <fat_get_next_cluster+0x74>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
    36c0:	29 81       	ldd	r18, Y+1	; 0x01
    36c2:	3a 81       	ldd	r19, Y+2	; 0x02
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
    36c4:	21 15       	cp	r18, r1
    36c6:	31 05       	cpc	r19, r1
    36c8:	71 f0       	breq	.+28     	; 0x36e6 <fat_get_next_cluster+0x78>
    36ca:	8f ef       	ldi	r24, 0xFF	; 255
    36cc:	27 3f       	cpi	r18, 0xF7	; 247
    36ce:	38 07       	cpc	r19, r24
    36d0:	41 f0       	breq	.+16     	; 0x36e2 <fat_get_next_cluster+0x74>
    36d2:	c9 01       	movw	r24, r18
    36d4:	40 96       	adiw	r24, 0x10	; 16
    36d6:	07 97       	sbiw	r24, 0x07	; 7
    36d8:	20 f0       	brcs	.+8      	; 0x36e2 <fat_get_next_cluster+0x74>
    36da:	8f ef       	ldi	r24, 0xFF	; 255
    36dc:	28 3f       	cpi	r18, 0xF8	; 248
    36de:	38 07       	cpc	r19, r24
    36e0:	10 f0       	brcs	.+4      	; 0x36e6 <fat_get_next_cluster+0x78>
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    }

    return cluster_num;
}
    36e6:	c9 01       	movw	r24, r18
    36e8:	0f 90       	pop	r0
    36ea:	0f 90       	pop	r0
    36ec:	cf 91       	pop	r28
    36ee:	df 91       	pop	r29
    36f0:	08 95       	ret

000036f2 <fat_free_clusters>:
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    36f2:	4f 92       	push	r4
    36f4:	5f 92       	push	r5
    36f6:	6f 92       	push	r6
    36f8:	7f 92       	push	r7
    36fa:	8f 92       	push	r8
    36fc:	9f 92       	push	r9
    36fe:	af 92       	push	r10
    3700:	bf 92       	push	r11
    3702:	cf 92       	push	r12
    3704:	df 92       	push	r13
    3706:	ef 92       	push	r14
    3708:	ff 92       	push	r15
    370a:	0f 93       	push	r16
    370c:	1f 93       	push	r17
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	00 d0       	rcall	.+0      	; 0x3714 <fat_free_clusters+0x22>
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	5c 01       	movw	r10, r24
    if(!fs || cluster_num < 2)
    371a:	00 97       	sbiw	r24, 0x00	; 0
    371c:	09 f4       	brne	.+2      	; 0x3720 <fat_free_clusters+0x2e>
    371e:	49 c0       	rjmp	.+146    	; 0x37b2 <fat_free_clusters+0xc0>
    3720:	62 30       	cpi	r22, 0x02	; 2
    3722:	71 05       	cpc	r23, r1
    3724:	08 f4       	brcc	.+2      	; 0x3728 <fat_free_clusters+0x36>
    3726:	45 c0       	rjmp	.+138    	; 0x37b2 <fat_free_clusters+0xc0>
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
    3728:	dc 01       	movw	r26, r24
    372a:	16 96       	adiw	r26, 0x06	; 6
    372c:	6d 90       	ld	r6, X+
    372e:	7d 90       	ld	r7, X+
    3730:	8d 90       	ld	r8, X+
    3732:	9c 90       	ld	r9, X
    3734:	19 97       	sbiw	r26, 0x09	; 9
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    3736:	2e 01       	movw	r4, r28
    3738:	08 94       	sec
    373a:	41 1c       	adc	r4, r1
    373c:	51 1c       	adc	r5, r1
    373e:	66 0f       	add	r22, r22
    3740:	77 1f       	adc	r23, r23
    3742:	7b 01       	movw	r14, r22
    3744:	00 e0       	ldi	r16, 0x00	; 0
    3746:	10 e0       	ldi	r17, 0x00	; 0
    3748:	e6 0c       	add	r14, r6
    374a:	f7 1c       	adc	r15, r7
    374c:	08 1d       	adc	r16, r8
    374e:	19 1d       	adc	r17, r9
    3750:	d5 01       	movw	r26, r10
    3752:	ed 91       	ld	r30, X+
    3754:	fc 91       	ld	r31, X
    3756:	01 90       	ld	r0, Z+
    3758:	f0 81       	ld	r31, Z
    375a:	e0 2d       	mov	r30, r0
    375c:	c8 01       	movw	r24, r16
    375e:	b7 01       	movw	r22, r14
    3760:	a2 01       	movw	r20, r4
    3762:	22 e0       	ldi	r18, 0x02	; 2
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	09 95       	icall
    3768:	88 23       	and	r24, r24
    376a:	19 f1       	breq	.+70     	; 0x37b2 <fat_free_clusters+0xc0>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);
    376c:	c9 80       	ldd	r12, Y+1	; 0x01
    376e:	da 80       	ldd	r13, Y+2	; 0x02

            if(cluster_num_next == FAT16_CLUSTER_FREE)
    3770:	c1 14       	cp	r12, r1
    3772:	d1 04       	cpc	r13, r1
    3774:	01 f1       	breq	.+64     	; 0x37b6 <fat_free_clusters+0xc4>
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
    3776:	c6 01       	movw	r24, r12
    3778:	40 96       	adiw	r24, 0x10	; 16
    377a:	08 97       	sbiw	r24, 0x08	; 8
    377c:	d0 f0       	brcs	.+52     	; 0x37b2 <fat_free_clusters+0xc0>
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
    377e:	b8 ef       	ldi	r27, 0xF8	; 248
    3780:	cb 16       	cp	r12, r27
    3782:	bf ef       	ldi	r27, 0xFF	; 255
    3784:	db 06       	cpc	r13, r27
    3786:	10 f0       	brcs	.+4      	; 0x378c <fat_free_clusters+0x9a>
    3788:	cc 24       	eor	r12, r12
    378a:	dd 24       	eor	r13, r13
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
    378c:	1a 82       	std	Y+2, r1	; 0x02
    378e:	19 82       	std	Y+1, r1	; 0x01
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    3790:	d5 01       	movw	r26, r10
    3792:	ed 91       	ld	r30, X+
    3794:	fc 91       	ld	r31, X
    3796:	04 80       	ldd	r0, Z+4	; 0x04
    3798:	f5 81       	ldd	r31, Z+5	; 0x05
    379a:	e0 2d       	mov	r30, r0
    379c:	c8 01       	movw	r24, r16
    379e:	b7 01       	movw	r22, r14
    37a0:	a2 01       	movw	r20, r4
    37a2:	22 e0       	ldi	r18, 0x02	; 2
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	09 95       	icall
    37a8:	b6 01       	movw	r22, r12
    }
    else
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
    37aa:	c1 14       	cp	r12, r1
    37ac:	d1 04       	cpc	r13, r1
    37ae:	39 f6       	brne	.-114    	; 0x373e <fat_free_clusters+0x4c>
    37b0:	02 c0       	rjmp	.+4      	; 0x37b6 <fat_free_clusters+0xc4>
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	01 c0       	rjmp	.+2      	; 0x37b8 <fat_free_clusters+0xc6>
    37b6:	81 e0       	ldi	r24, 0x01	; 1
            cluster_num = cluster_num_next;
        }
    }

    return 1;
}
    37b8:	0f 90       	pop	r0
    37ba:	0f 90       	pop	r0
    37bc:	cf 91       	pop	r28
    37be:	df 91       	pop	r29
    37c0:	1f 91       	pop	r17
    37c2:	0f 91       	pop	r16
    37c4:	ff 90       	pop	r15
    37c6:	ef 90       	pop	r14
    37c8:	df 90       	pop	r13
    37ca:	cf 90       	pop	r12
    37cc:	bf 90       	pop	r11
    37ce:	af 90       	pop	r10
    37d0:	9f 90       	pop	r9
    37d2:	8f 90       	pop	r8
    37d4:	7f 90       	pop	r7
    37d6:	6f 90       	pop	r6
    37d8:	5f 90       	pop	r5
    37da:	4f 90       	pop	r4
    37dc:	08 95       	ret

000037de <fat_append_clusters>:
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
    37de:	2f 92       	push	r2
    37e0:	3f 92       	push	r3
    37e2:	4f 92       	push	r4
    37e4:	5f 92       	push	r5
    37e6:	6f 92       	push	r6
    37e8:	7f 92       	push	r7
    37ea:	8f 92       	push	r8
    37ec:	9f 92       	push	r9
    37ee:	af 92       	push	r10
    37f0:	bf 92       	push	r11
    37f2:	cf 92       	push	r12
    37f4:	df 92       	push	r13
    37f6:	ef 92       	push	r14
    37f8:	ff 92       	push	r15
    37fa:	0f 93       	push	r16
    37fc:	1f 93       	push	r17
    37fe:	df 93       	push	r29
    3800:	cf 93       	push	r28
    3802:	cd b7       	in	r28, 0x3d	; 61
    3804:	de b7       	in	r29, 0x3e	; 62
    3806:	2a 97       	sbiw	r28, 0x0a	; 10
    3808:	0f b6       	in	r0, 0x3f	; 63
    380a:	f8 94       	cli
    380c:	de bf       	out	0x3e, r29	; 62
    380e:	0f be       	out	0x3f, r0	; 63
    3810:	cd bf       	out	0x3d, r28	; 61
    3812:	3c 01       	movw	r6, r24
    3814:	2b 01       	movw	r4, r22
    if(!fs)
    3816:	00 97       	sbiw	r24, 0x00	; 0
    3818:	09 f4       	brne	.+2      	; 0x381c <fat_append_clusters+0x3e>
    381a:	8f c0       	rjmp	.+286    	; 0x393a <fat_append_clusters+0x15c>
        return 0;

    device_read_t device_read = fs->partition->device_read;
    381c:	dc 01       	movw	r26, r24
    381e:	ed 91       	ld	r30, X+
    3820:	fc 91       	ld	r31, X
    3822:	11 97       	sbiw	r26, 0x01	; 1
    3824:	20 81       	ld	r18, Z
    3826:	31 81       	ldd	r19, Z+1	; 0x01
    3828:	3a 87       	std	Y+10, r19	; 0x0a
    382a:	29 87       	std	Y+9, r18	; 0x09
    device_write_t device_write = fs->partition->device_write;
    382c:	24 80       	ldd	r2, Z+4	; 0x04
    382e:	35 80       	ldd	r3, Z+5	; 0x05
    offset_t fat_offset = fs->header.fat_offset;
    3830:	16 96       	adiw	r26, 0x06	; 6
    3832:	8d 91       	ld	r24, X+
    3834:	9d 91       	ld	r25, X+
    3836:	0d 90       	ld	r0, X+
    3838:	bc 91       	ld	r27, X
    383a:	a0 2d       	mov	r26, r0
    383c:	8d 83       	std	Y+5, r24	; 0x05
    383e:	9e 83       	std	Y+6, r25	; 0x06
    3840:	af 83       	std	Y+7, r26	; 0x07
    3842:	b8 87       	std	Y+8, r27	; 0x08

    if(is_fat32)
        cluster_max = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_max = fs->header.fat_size / sizeof(fat_entry16);
    3844:	f3 01       	movw	r30, r6
    3846:	82 85       	ldd	r24, Z+10	; 0x0a
    3848:	93 85       	ldd	r25, Z+11	; 0x0b
    384a:	a4 85       	ldd	r26, Z+12	; 0x0c
    384c:	b5 85       	ldd	r27, Z+13	; 0x0d
    384e:	b6 95       	lsr	r27
    3850:	a7 95       	ror	r26
    3852:	97 95       	ror	r25
    3854:	87 95       	ror	r24
    3856:	9c 83       	std	Y+4, r25	; 0x04
    3858:	8b 83       	std	Y+3, r24	; 0x03
    385a:	4a 01       	movw	r8, r20
    385c:	cc 24       	eor	r12, r12
    385e:	dd 24       	eor	r13, r13
    3860:	62 e0       	ldi	r22, 0x02	; 2
    3862:	a6 2e       	mov	r10, r22
    3864:	b1 2c       	mov	r11, r1
    3866:	41 c0       	rjmp	.+130    	; 0x38ea <fat_append_clusters+0x10c>
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + cluster_new * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    3868:	c5 01       	movw	r24, r10
    386a:	88 0f       	add	r24, r24
    386c:	99 1f       	adc	r25, r25
    386e:	7c 01       	movw	r14, r24
    3870:	00 e0       	ldi	r16, 0x00	; 0
    3872:	10 e0       	ldi	r17, 0x00	; 0
    3874:	2d 81       	ldd	r18, Y+5	; 0x05
    3876:	3e 81       	ldd	r19, Y+6	; 0x06
    3878:	4f 81       	ldd	r20, Y+7	; 0x07
    387a:	58 85       	ldd	r21, Y+8	; 0x08
    387c:	e2 0e       	add	r14, r18
    387e:	f3 1e       	adc	r15, r19
    3880:	04 1f       	adc	r16, r20
    3882:	15 1f       	adc	r17, r21
    3884:	c8 01       	movw	r24, r16
    3886:	b7 01       	movw	r22, r14
    3888:	ae 01       	movw	r20, r28
    388a:	4f 5f       	subi	r20, 0xFF	; 255
    388c:	5f 4f       	sbci	r21, 0xFF	; 255
    388e:	22 e0       	ldi	r18, 0x02	; 2
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	a9 85       	ldd	r26, Y+9	; 0x09
    3894:	ba 85       	ldd	r27, Y+10	; 0x0a
    3896:	fd 01       	movw	r30, r26
    3898:	09 95       	icall
    389a:	88 23       	and	r24, r24
    389c:	09 f4       	brne	.+2      	; 0x38a0 <fat_append_clusters+0xc2>
    389e:	4d c0       	rjmp	.+154    	; 0x393a <fat_append_clusters+0x15c>
        }
        else
#endif
        {
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
    38a0:	89 81       	ldd	r24, Y+1	; 0x01
    38a2:	9a 81       	ldd	r25, Y+2	; 0x02
    38a4:	89 2b       	or	r24, r25
    38a6:	f1 f4       	brne	.+60     	; 0x38e4 <fat_append_clusters+0x106>
                continue;

            /* allocate cluster */
            if(cluster_next == 0)
    38a8:	c1 14       	cp	r12, r1
    38aa:	d1 04       	cpc	r13, r1
    38ac:	29 f4       	brne	.+10     	; 0x38b8 <fat_append_clusters+0xda>
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
    38ae:	ef ef       	ldi	r30, 0xFF	; 255
    38b0:	ff ef       	ldi	r31, 0xFF	; 255
    38b2:	fa 83       	std	Y+2, r31	; 0x02
    38b4:	e9 83       	std	Y+1, r30	; 0x01
    38b6:	02 c0       	rjmp	.+4      	; 0x38bc <fat_append_clusters+0xde>
            else
                fat_entry16 = htol16((uint16_t) cluster_next);
    38b8:	da 82       	std	Y+2, r13	; 0x02
    38ba:	c9 82       	std	Y+1, r12	; 0x01

            if(!device_write(fat_offset + cluster_new * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    38bc:	c8 01       	movw	r24, r16
    38be:	b7 01       	movw	r22, r14
    38c0:	ae 01       	movw	r20, r28
    38c2:	4f 5f       	subi	r20, 0xFF	; 255
    38c4:	5f 4f       	sbci	r21, 0xFF	; 255
    38c6:	22 e0       	ldi	r18, 0x02	; 2
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	f1 01       	movw	r30, r2
    38cc:	09 95       	icall
    38ce:	88 23       	and	r24, r24
    38d0:	91 f0       	breq	.+36     	; 0x38f6 <fat_append_clusters+0x118>
                break;
        }

        cluster_next = cluster_new;
        if(--count_left == 0)
    38d2:	08 94       	sec
    38d4:	81 08       	sbc	r8, r1
    38d6:	91 08       	sbc	r9, r1
    38d8:	81 14       	cp	r8, r1
    38da:	91 04       	cpc	r9, r1
    38dc:	11 f4       	brne	.+4      	; 0x38e2 <fat_append_clusters+0x104>
    38de:	65 01       	movw	r12, r10
    38e0:	0c c0       	rjmp	.+24     	; 0x38fa <fat_append_clusters+0x11c>
    38e2:	65 01       	movw	r12, r10
        cluster_max = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_max = fs->header.fat_size / sizeof(fat_entry16);

    for(cluster_t cluster_new = 2; cluster_new < cluster_max; ++cluster_new)
    38e4:	08 94       	sec
    38e6:	a1 1c       	adc	r10, r1
    38e8:	b1 1c       	adc	r11, r1
    38ea:	2b 81       	ldd	r18, Y+3	; 0x03
    38ec:	3c 81       	ldd	r19, Y+4	; 0x04
    38ee:	a2 16       	cp	r10, r18
    38f0:	b3 06       	cpc	r11, r19
    38f2:	08 f4       	brcc	.+2      	; 0x38f6 <fat_append_clusters+0x118>
    38f4:	b9 cf       	rjmp	.-142    	; 0x3868 <fat_append_clusters+0x8a>
            break;
    }

    do
    {
        if(count_left > 0)
    38f6:	89 28       	or	r8, r9
    38f8:	e1 f4       	brne	.+56     	; 0x3932 <fat_append_clusters+0x154>
            break;

        /* We allocated a new cluster chain. Now join
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
    38fa:	32 e0       	ldi	r19, 0x02	; 2
    38fc:	43 16       	cp	r4, r19
    38fe:	51 04       	cpc	r5, r1
    3900:	f0 f0       	brcs	.+60     	; 0x393e <fat_append_clusters+0x160>
                    break;
            }
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);
    3902:	da 82       	std	Y+2, r13	; 0x02
    3904:	c9 82       	std	Y+1, r12	; 0x01

                if(!device_write(fat_offset + cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    3906:	44 0c       	add	r4, r4
    3908:	55 1c       	adc	r5, r5
    390a:	b2 01       	movw	r22, r4
    390c:	80 e0       	ldi	r24, 0x00	; 0
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	2d 81       	ldd	r18, Y+5	; 0x05
    3912:	3e 81       	ldd	r19, Y+6	; 0x06
    3914:	4f 81       	ldd	r20, Y+7	; 0x07
    3916:	58 85       	ldd	r21, Y+8	; 0x08
    3918:	62 0f       	add	r22, r18
    391a:	73 1f       	adc	r23, r19
    391c:	84 1f       	adc	r24, r20
    391e:	95 1f       	adc	r25, r21
    3920:	ae 01       	movw	r20, r28
    3922:	4f 5f       	subi	r20, 0xFF	; 255
    3924:	5f 4f       	sbci	r21, 0xFF	; 255
    3926:	22 e0       	ldi	r18, 0x02	; 2
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	f1 01       	movw	r30, r2
    392c:	09 95       	icall
    392e:	88 23       	and	r24, r24
    3930:	31 f4       	brne	.+12     	; 0x393e <fat_append_clusters+0x160>
    } while(0);

    /* No space left on device or writing error.
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);
    3932:	c3 01       	movw	r24, r6
    3934:	b6 01       	movw	r22, r12
    3936:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <fat_free_clusters>

    return 0;
    393a:	cc 24       	eor	r12, r12
    393c:	dd 24       	eor	r13, r13
}
    393e:	c6 01       	movw	r24, r12
    3940:	2a 96       	adiw	r28, 0x0a	; 10
    3942:	0f b6       	in	r0, 0x3f	; 63
    3944:	f8 94       	cli
    3946:	de bf       	out	0x3e, r29	; 62
    3948:	0f be       	out	0x3f, r0	; 63
    394a:	cd bf       	out	0x3d, r28	; 61
    394c:	cf 91       	pop	r28
    394e:	df 91       	pop	r29
    3950:	1f 91       	pop	r17
    3952:	0f 91       	pop	r16
    3954:	ff 90       	pop	r15
    3956:	ef 90       	pop	r14
    3958:	df 90       	pop	r13
    395a:	cf 90       	pop	r12
    395c:	bf 90       	pop	r11
    395e:	af 90       	pop	r10
    3960:	9f 90       	pop	r9
    3962:	8f 90       	pop	r8
    3964:	7f 90       	pop	r7
    3966:	6f 90       	pop	r6
    3968:	5f 90       	pop	r5
    396a:	4f 90       	pop	r4
    396c:	3f 90       	pop	r3
    396e:	2f 90       	pop	r2
    3970:	08 95       	ret

00003972 <fat_clear_cluster_callback>:
 * Callback function for clearing a cluster.
 */
uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
{
    return 16;
}
    3972:	80 e1       	ldi	r24, 0x10	; 16
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	08 95       	ret

00003978 <fat_close_file>:
 *
 * \param[in] fd The file handle of the file to close.
 * \see fat_open_file
 */
void fat_close_file(struct fat_file_struct* fd)
{
    3978:	fc 01       	movw	r30, r24
    if(fd)
    397a:	00 97       	sbiw	r24, 0x00	; 0
    397c:	11 f0       	breq	.+4      	; 0x3982 <fat_close_file+0xa>
#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
    397e:	11 82       	std	Z+1, r1	; 0x01
    3980:	10 82       	st	Z, r1
    3982:	08 95       	ret

00003984 <fat_read_file>:
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
    3984:	2f 92       	push	r2
    3986:	3f 92       	push	r3
    3988:	4f 92       	push	r4
    398a:	5f 92       	push	r5
    398c:	6f 92       	push	r6
    398e:	7f 92       	push	r7
    3990:	8f 92       	push	r8
    3992:	9f 92       	push	r9
    3994:	af 92       	push	r10
    3996:	bf 92       	push	r11
    3998:	cf 92       	push	r12
    399a:	df 92       	push	r13
    399c:	ef 92       	push	r14
    399e:	ff 92       	push	r15
    39a0:	0f 93       	push	r16
    39a2:	1f 93       	push	r17
    39a4:	df 93       	push	r29
    39a6:	cf 93       	push	r28
    39a8:	cd b7       	in	r28, 0x3d	; 61
    39aa:	de b7       	in	r29, 0x3e	; 62
    39ac:	2a 97       	sbiw	r28, 0x0a	; 10
    39ae:	0f b6       	in	r0, 0x3f	; 63
    39b0:	f8 94       	cli
    39b2:	de bf       	out	0x3e, r29	; 62
    39b4:	0f be       	out	0x3f, r0	; 63
    39b6:	cd bf       	out	0x3d, r28	; 61
    39b8:	2c 01       	movw	r4, r24
    39ba:	7a 83       	std	Y+2, r23	; 0x02
    39bc:	69 83       	std	Y+1, r22	; 0x01
    39be:	5c 83       	std	Y+4, r21	; 0x04
    39c0:	4b 83       	std	Y+3, r20	; 0x03
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    39c2:	00 97       	sbiw	r24, 0x00	; 0
    39c4:	09 f4       	brne	.+2      	; 0x39c8 <fat_read_file+0x44>
    39c6:	09 c1       	rjmp	.+530    	; 0x3bda <fat_read_file+0x256>
    39c8:	67 2b       	or	r22, r23
    39ca:	09 f4       	brne	.+2      	; 0x39ce <fat_read_file+0x4a>
    39cc:	06 c1       	rjmp	.+524    	; 0x3bda <fat_read_file+0x256>
    39ce:	45 2b       	or	r20, r21
    39d0:	09 f4       	brne	.+2      	; 0x39d4 <fat_read_file+0x50>
    39d2:	03 c1       	rjmp	.+518    	; 0x3bda <fat_read_file+0x256>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
    39d4:	dc 01       	movw	r26, r24
    39d6:	9d 96       	adiw	r26, 0x2d	; 45
    39d8:	ad 90       	ld	r10, X+
    39da:	bd 90       	ld	r11, X+
    39dc:	cd 90       	ld	r12, X+
    39de:	dc 90       	ld	r13, X
    39e0:	d0 97       	sbiw	r26, 0x30	; 48
    39e2:	95 96       	adiw	r26, 0x25	; 37
    39e4:	2d 91       	ld	r18, X+
    39e6:	3d 91       	ld	r19, X+
    39e8:	4d 91       	ld	r20, X+
    39ea:	5c 91       	ld	r21, X
    39ec:	98 97       	sbiw	r26, 0x28	; 40
    39ee:	eb 81       	ldd	r30, Y+3	; 0x03
    39f0:	fc 81       	ldd	r31, Y+4	; 0x04
    39f2:	cf 01       	movw	r24, r30
    39f4:	a0 e0       	ldi	r26, 0x00	; 0
    39f6:	b0 e0       	ldi	r27, 0x00	; 0
    39f8:	8a 0d       	add	r24, r10
    39fa:	9b 1d       	adc	r25, r11
    39fc:	ac 1d       	adc	r26, r12
    39fe:	bd 1d       	adc	r27, r13
    3a00:	28 17       	cp	r18, r24
    3a02:	39 07       	cpc	r19, r25
    3a04:	4a 07       	cpc	r20, r26
    3a06:	5b 07       	cpc	r21, r27
    3a08:	40 f4       	brcc	.+16     	; 0x3a1a <fat_read_file+0x96>
        buffer_len = fd->dir_entry.file_size - fd->pos;
    3a0a:	b9 01       	movw	r22, r18
    3a0c:	6a 19       	sub	r22, r10
    3a0e:	7b 09       	sbc	r23, r11
    3a10:	7c 83       	std	Y+4, r23	; 0x04
    3a12:	6b 83       	std	Y+3, r22	; 0x03
    if(buffer_len == 0)
    3a14:	67 2b       	or	r22, r23
    3a16:	09 f4       	brne	.+2      	; 0x3a1a <fat_read_file+0x96>
    3a18:	e3 c0       	rjmp	.+454    	; 0x3be0 <fat_read_file+0x25c>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    3a1a:	d2 01       	movw	r26, r4
    3a1c:	ed 91       	ld	r30, X+
    3a1e:	fc 91       	ld	r31, X
    3a20:	11 97       	sbiw	r26, 0x01	; 1
    3a22:	20 88       	ldd	r2, Z+16	; 0x10
    3a24:	31 88       	ldd	r3, Z+17	; 0x11
    cluster_t cluster_num = fd->pos_cluster;
    3a26:	d1 96       	adiw	r26, 0x31	; 49
    3a28:	ed 91       	ld	r30, X+
    3a2a:	fc 91       	ld	r31, X
    3a2c:	d2 97       	sbiw	r26, 0x32	; 50
    3a2e:	fa 87       	std	Y+10, r31	; 0x0a
    3a30:	e9 87       	std	Y+9, r30	; 0x09
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
    3a32:	ef 2b       	or	r30, r31
    3a34:	f1 f5       	brne	.+124    	; 0x3ab2 <fat_read_file+0x12e>
    {
        cluster_num = fd->dir_entry.cluster;
    3a36:	93 96       	adiw	r26, 0x23	; 35
    3a38:	2d 91       	ld	r18, X+
    3a3a:	3c 91       	ld	r19, X
    3a3c:	94 97       	sbiw	r26, 0x24	; 36
    3a3e:	3a 87       	std	Y+10, r19	; 0x0a
    3a40:	29 87       	std	Y+9, r18	; 0x09
        
        if(!cluster_num)
    3a42:	23 2b       	or	r18, r19
    3a44:	39 f4       	brne	.+14     	; 0x3a54 <fat_read_file+0xd0>
        {
            if(!fd->pos)
    3a46:	a1 14       	cp	r10, r1
    3a48:	b1 04       	cpc	r11, r1
    3a4a:	c1 04       	cpc	r12, r1
    3a4c:	d1 04       	cpc	r13, r1
    3a4e:	09 f4       	brne	.+2      	; 0x3a52 <fat_read_file+0xce>
    3a50:	c7 c0       	rjmp	.+398    	; 0x3be0 <fat_read_file+0x25c>
    3a52:	c3 c0       	rjmp	.+390    	; 0x3bda <fat_read_file+0x256>
                return 0;
            else
                return -1;
        }

        if(fd->pos)
    3a54:	a1 14       	cp	r10, r1
    3a56:	b1 04       	cpc	r11, r1
    3a58:	c1 04       	cpc	r12, r1
    3a5a:	d1 04       	cpc	r13, r1
    3a5c:	51 f1       	breq	.+84     	; 0x3ab2 <fat_read_file+0x12e>
    3a5e:	86 01       	movw	r16, r12
    3a60:	75 01       	movw	r14, r10
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
    3a62:	31 01       	movw	r6, r2
    3a64:	88 24       	eor	r8, r8
    3a66:	99 24       	eor	r9, r9
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
    3a68:	66 27       	eor	r22, r22
    3a6a:	77 27       	eor	r23, r23
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	66 19       	sub	r22, r6
    3a70:	77 09       	sbc	r23, r7
    3a72:	88 09       	sbc	r24, r8
    3a74:	99 09       	sbc	r25, r9
    3a76:	6d 83       	std	Y+5, r22	; 0x05
    3a78:	7e 83       	std	Y+6, r23	; 0x06
    3a7a:	8f 83       	std	Y+7, r24	; 0x07
    3a7c:	98 87       	std	Y+8, r25	; 0x08
    3a7e:	14 c0       	rjmp	.+40     	; 0x3aa8 <fat_read_file+0x124>
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
    3a80:	d2 01       	movw	r26, r4
    3a82:	8d 91       	ld	r24, X+
    3a84:	9c 91       	ld	r25, X
    3a86:	69 85       	ldd	r22, Y+9	; 0x09
    3a88:	7a 85       	ldd	r23, Y+10	; 0x0a
    3a8a:	0e 94 37 1b 	call	0x366e	; 0x366e <fat_get_next_cluster>
    3a8e:	9a 87       	std	Y+10, r25	; 0x0a
    3a90:	89 87       	std	Y+9, r24	; 0x09
                if(!cluster_num)
    3a92:	89 2b       	or	r24, r25
    3a94:	09 f4       	brne	.+2      	; 0x3a98 <fat_read_file+0x114>
    3a96:	a1 c0       	rjmp	.+322    	; 0x3bda <fat_read_file+0x256>
    3a98:	6d 81       	ldd	r22, Y+5	; 0x05
    3a9a:	7e 81       	ldd	r23, Y+6	; 0x06
    3a9c:	8f 81       	ldd	r24, Y+7	; 0x07
    3a9e:	98 85       	ldd	r25, Y+8	; 0x08
    3aa0:	e6 0e       	add	r14, r22
    3aa2:	f7 1e       	adc	r15, r23
    3aa4:	08 1f       	adc	r16, r24
    3aa6:	19 1f       	adc	r17, r25
        }

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
    3aa8:	e6 14       	cp	r14, r6
    3aaa:	f7 04       	cpc	r15, r7
    3aac:	08 05       	cpc	r16, r8
    3aae:	19 05       	cpc	r17, r9
    3ab0:	38 f7       	brcc	.-50     	; 0x3a80 <fat_read_file+0xfc>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    3ab2:	08 94       	sec
    3ab4:	21 08       	sbc	r2, r1
    3ab6:	31 08       	sbc	r3, r1
    3ab8:	a2 20       	and	r10, r2
    3aba:	b3 20       	and	r11, r3
    3abc:	08 94       	sec
    3abe:	21 1c       	adc	r2, r1
    3ac0:	31 1c       	adc	r3, r1
    3ac2:	cb 80       	ldd	r12, Y+3	; 0x03
    3ac4:	dc 80       	ldd	r13, Y+4	; 0x04
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    3ac6:	d2 01       	movw	r26, r4
    3ac8:	ed 90       	ld	r14, X+
    3aca:	fc 90       	ld	r15, X
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    3acc:	e1 14       	cp	r14, r1
    3ace:	f1 04       	cpc	r15, r1
    3ad0:	09 f1       	breq	.+66     	; 0x3b14 <fat_read_file+0x190>
    3ad2:	e9 85       	ldd	r30, Y+9	; 0x09
    3ad4:	fa 85       	ldd	r31, Y+10	; 0x0a
    3ad6:	e2 30       	cpi	r30, 0x02	; 2
    3ad8:	f1 05       	cpc	r31, r1
    3ada:	e0 f0       	brcs	.+56     	; 0x3b14 <fat_read_file+0x190>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    3adc:	32 97       	sbiw	r30, 0x02	; 2
    3ade:	bf 01       	movw	r22, r30
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	32 96       	adiw	r30, 0x02	; 2
    3ae6:	fa 87       	std	Y+10, r31	; 0x0a
    3ae8:	e9 87       	std	Y+9, r30	; 0x09
    3aea:	d7 01       	movw	r26, r14
    3aec:	50 96       	adiw	r26, 0x10	; 16
    3aee:	2d 91       	ld	r18, X+
    3af0:	3c 91       	ld	r19, X
    3af2:	51 97       	sbiw	r26, 0x11	; 17
    3af4:	40 e0       	ldi	r20, 0x00	; 0
    3af6:	50 e0       	ldi	r21, 0x00	; 0
    3af8:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    3afc:	9b 01       	movw	r18, r22
    3afe:	ac 01       	movw	r20, r24
    3b00:	f7 01       	movw	r30, r14
    3b02:	82 89       	ldd	r24, Z+18	; 0x12
    3b04:	93 89       	ldd	r25, Z+19	; 0x13
    3b06:	a4 89       	ldd	r26, Z+20	; 0x14
    3b08:	b5 89       	ldd	r27, Z+21	; 0x15
    3b0a:	28 0f       	add	r18, r24
    3b0c:	39 1f       	adc	r19, r25
    3b0e:	4a 1f       	adc	r20, r26
    3b10:	5b 1f       	adc	r21, r27
    3b12:	04 c0       	rjmp	.+8      	; 0x3b1c <fat_read_file+0x198>
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	40 e0       	ldi	r20, 0x00	; 0
    3b1a:	50 e0       	ldi	r21, 0x00	; 0
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t copy_length = cluster_size - first_cluster_offset;
    3b1c:	81 01       	movw	r16, r2
    3b1e:	0a 19       	sub	r16, r10
    3b20:	1b 09       	sbc	r17, r11
    3b22:	c0 16       	cp	r12, r16
    3b24:	d1 06       	cpc	r13, r17
    3b26:	08 f4       	brcc	.+2      	; 0x3b2a <fat_read_file+0x1a6>
    3b28:	86 01       	movw	r16, r12
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
    3b2a:	d7 01       	movw	r26, r14
    3b2c:	ed 91       	ld	r30, X+
    3b2e:	fc 91       	ld	r31, X
    3b30:	c5 01       	movw	r24, r10
    3b32:	a0 e0       	ldi	r26, 0x00	; 0
    3b34:	b0 e0       	ldi	r27, 0x00	; 0
    3b36:	28 0f       	add	r18, r24
    3b38:	39 1f       	adc	r19, r25
    3b3a:	4a 1f       	adc	r20, r26
    3b3c:	5b 1f       	adc	r21, r27
    3b3e:	01 90       	ld	r0, Z+
    3b40:	f0 81       	ld	r31, Z
    3b42:	e0 2d       	mov	r30, r0
    3b44:	ca 01       	movw	r24, r20
    3b46:	b9 01       	movw	r22, r18
    3b48:	49 81       	ldd	r20, Y+1	; 0x01
    3b4a:	5a 81       	ldd	r21, Y+2	; 0x02
    3b4c:	98 01       	movw	r18, r16
    3b4e:	09 95       	icall
    3b50:	88 23       	and	r24, r24
    3b52:	41 f1       	breq	.+80     	; 0x3ba4 <fat_read_file+0x220>
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
    3b54:	c0 1a       	sub	r12, r16
    3b56:	d1 0a       	sbc	r13, r17
        fd->pos += copy_length;
    3b58:	c8 01       	movw	r24, r16
    3b5a:	a0 e0       	ldi	r26, 0x00	; 0
    3b5c:	b0 e0       	ldi	r27, 0x00	; 0
    3b5e:	f2 01       	movw	r30, r4
    3b60:	25 a5       	ldd	r18, Z+45	; 0x2d
    3b62:	36 a5       	ldd	r19, Z+46	; 0x2e
    3b64:	47 a5       	ldd	r20, Z+47	; 0x2f
    3b66:	50 a9       	ldd	r21, Z+48	; 0x30
    3b68:	28 0f       	add	r18, r24
    3b6a:	39 1f       	adc	r19, r25
    3b6c:	4a 1f       	adc	r20, r26
    3b6e:	5b 1f       	adc	r21, r27
    3b70:	d2 01       	movw	r26, r4
    3b72:	9d 96       	adiw	r26, 0x2d	; 45
    3b74:	2d 93       	st	X+, r18
    3b76:	3d 93       	st	X+, r19
    3b78:	4d 93       	st	X+, r20
    3b7a:	5c 93       	st	X, r21
    3b7c:	d0 97       	sbiw	r26, 0x30	; 48

        if(first_cluster_offset + copy_length >= cluster_size)
    3b7e:	c8 01       	movw	r24, r16
    3b80:	8a 0d       	add	r24, r10
    3b82:	9b 1d       	adc	r25, r11
    3b84:	82 15       	cp	r24, r2
    3b86:	93 05       	cpc	r25, r3
    3b88:	a0 f0       	brcs	.+40     	; 0x3bb2 <fat_read_file+0x22e>
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
    3b8a:	8d 91       	ld	r24, X+
    3b8c:	9c 91       	ld	r25, X
    3b8e:	69 85       	ldd	r22, Y+9	; 0x09
    3b90:	7a 85       	ldd	r23, Y+10	; 0x0a
    3b92:	0e 94 37 1b 	call	0x366e	; 0x366e <fat_get_next_cluster>
    3b96:	9a 87       	std	Y+10, r25	; 0x0a
    3b98:	89 87       	std	Y+9, r24	; 0x09
    3b9a:	89 2b       	or	r24, r25
    3b9c:	41 f4       	brne	.+16     	; 0x3bae <fat_read_file+0x22a>
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
    3b9e:	f2 01       	movw	r30, r4
    3ba0:	12 aa       	std	Z+50, r1	; 0x32
    3ba2:	11 aa       	std	Z+49, r1	; 0x31
                return buffer_len - buffer_left;
    3ba4:	4b 81       	ldd	r20, Y+3	; 0x03
    3ba6:	5c 81       	ldd	r21, Y+4	; 0x04
    3ba8:	4c 19       	sub	r20, r12
    3baa:	5d 09       	sbc	r21, r13
    3bac:	1b c0       	rjmp	.+54     	; 0x3be4 <fat_read_file+0x260>
    3bae:	aa 24       	eor	r10, r10
    3bb0:	bb 24       	eor	r11, r11
            }
        }

        fd->pos_cluster = cluster_num;
    3bb2:	e9 85       	ldd	r30, Y+9	; 0x09
    3bb4:	fa 85       	ldd	r31, Y+10	; 0x0a
    3bb6:	d2 01       	movw	r26, r4
    3bb8:	d2 96       	adiw	r26, 0x32	; 50
    3bba:	fc 93       	st	X, r31
    3bbc:	ee 93       	st	-X, r30
    3bbe:	d1 97       	sbiw	r26, 0x31	; 49

    } while(buffer_left > 0); /* check if we are done */
    3bc0:	c1 14       	cp	r12, r1
    3bc2:	d1 04       	cpc	r13, r1
    3bc4:	39 f0       	breq	.+14     	; 0x3bd4 <fat_read_file+0x250>
        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
    3bc6:	29 81       	ldd	r18, Y+1	; 0x01
    3bc8:	3a 81       	ldd	r19, Y+2	; 0x02
    3bca:	20 0f       	add	r18, r16
    3bcc:	31 1f       	adc	r19, r17
    3bce:	3a 83       	std	Y+2, r19	; 0x02
    3bd0:	29 83       	std	Y+1, r18	; 0x01
    3bd2:	79 cf       	rjmp	.-270    	; 0x3ac6 <fat_read_file+0x142>

        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
    3bd4:	4b 81       	ldd	r20, Y+3	; 0x03
    3bd6:	5c 81       	ldd	r21, Y+4	; 0x04
    3bd8:	05 c0       	rjmp	.+10     	; 0x3be4 <fat_read_file+0x260>
    3bda:	4f ef       	ldi	r20, 0xFF	; 255
    3bdc:	5f ef       	ldi	r21, 0xFF	; 255
    3bde:	02 c0       	rjmp	.+4      	; 0x3be4 <fat_read_file+0x260>
    3be0:	40 e0       	ldi	r20, 0x00	; 0
    3be2:	50 e0       	ldi	r21, 0x00	; 0
}
    3be4:	ca 01       	movw	r24, r20
    3be6:	2a 96       	adiw	r28, 0x0a	; 10
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	f8 94       	cli
    3bec:	de bf       	out	0x3e, r29	; 62
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	cd bf       	out	0x3d, r28	; 61
    3bf2:	cf 91       	pop	r28
    3bf4:	df 91       	pop	r29
    3bf6:	1f 91       	pop	r17
    3bf8:	0f 91       	pop	r16
    3bfa:	ff 90       	pop	r15
    3bfc:	ef 90       	pop	r14
    3bfe:	df 90       	pop	r13
    3c00:	cf 90       	pop	r12
    3c02:	bf 90       	pop	r11
    3c04:	af 90       	pop	r10
    3c06:	9f 90       	pop	r9
    3c08:	8f 90       	pop	r8
    3c0a:	7f 90       	pop	r7
    3c0c:	6f 90       	pop	r6
    3c0e:	5f 90       	pop	r5
    3c10:	4f 90       	pop	r4
    3c12:	3f 90       	pop	r3
    3c14:	2f 90       	pop	r2
    3c16:	08 95       	ret

00003c18 <fat_close_dir>:
 *
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    3c18:	fc 01       	movw	r30, r24
    if(dd)
    3c1a:	00 97       	sbiw	r24, 0x00	; 0
    3c1c:	11 f0       	breq	.+4      	; 0x3c22 <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    3c1e:	11 82       	std	Z+1, r1	; 0x01
    3c20:	10 82       	st	Z, r1
    3c22:	08 95       	ret

00003c24 <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    3c24:	fc 01       	movw	r30, r24
    if(!dd)
    3c26:	00 97       	sbiw	r24, 0x00	; 0
    3c28:	11 f4       	brne	.+4      	; 0x3c2e <fat_reset_dir+0xa>
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	08 95       	ret
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    3c2e:	83 a1       	ldd	r24, Z+35	; 0x23
    3c30:	94 a1       	ldd	r25, Z+36	; 0x24
    3c32:	96 a7       	std	Z+46, r25	; 0x2e
    3c34:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
    3c36:	10 aa       	std	Z+48, r1	; 0x30
    3c38:	17 a6       	std	Z+47, r1	; 0x2f
    3c3a:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}
    3c3c:	08 95       	ret

00003c3e <fat_dir_entry_read_callback>:
/**
 * \ingroup fat_fs
 * Callback function for reading a directory entry.
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
    3c3e:	cf 92       	push	r12
    3c40:	df 92       	push	r13
    3c42:	ef 92       	push	r14
    3c44:	ff 92       	push	r15
    3c46:	0f 93       	push	r16
    3c48:	1f 93       	push	r17
    3c4a:	df 93       	push	r29
    3c4c:	cf 93       	push	r28
    3c4e:	cd b7       	in	r28, 0x3d	; 61
    3c50:	de b7       	in	r29, 0x3e	; 62
    3c52:	2d 97       	sbiw	r28, 0x0d	; 13
    3c54:	0f b6       	in	r0, 0x3f	; 63
    3c56:	f8 94       	cli
    3c58:	de bf       	out	0x3e, r29	; 62
    3c5a:	0f be       	out	0x3f, r0	; 63
    3c5c:	cd bf       	out	0x3d, r28	; 61
    3c5e:	8c 01       	movw	r16, r24
    3c60:	6a 01       	movw	r12, r20
    3c62:	7b 01       	movw	r14, r22
    struct fat_read_dir_callback_arg* arg = p;
    3c64:	b9 01       	movw	r22, r18
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
    3c66:	d9 01       	movw	r26, r18
    3c68:	4d 91       	ld	r20, X+
    3c6a:	5c 91       	ld	r21, X
    3c6c:	11 97       	sbiw	r26, 0x01	; 1

    arg->bytes_read += 32;
    3c6e:	12 96       	adiw	r26, 0x02	; 2
    3c70:	8d 91       	ld	r24, X+
    3c72:	9c 91       	ld	r25, X
    3c74:	13 97       	sbiw	r26, 0x03	; 3
    3c76:	80 96       	adiw	r24, 0x20	; 32
    3c78:	13 96       	adiw	r26, 0x03	; 3
    3c7a:	9c 93       	st	X, r25
    3c7c:	8e 93       	st	-X, r24
    3c7e:	12 97       	sbiw	r26, 0x02	; 2

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
    3c80:	f8 01       	movw	r30, r16
    3c82:	80 81       	ld	r24, Z
    3c84:	85 3e       	cpi	r24, 0xE5	; 229
    3c86:	09 f4       	brne	.+2      	; 0x3c8a <fat_dir_entry_read_callback+0x4c>
    3c88:	c6 c0       	rjmp	.+396    	; 0x3e16 <fat_dir_entry_read_callback+0x1d8>
    3c8a:	88 23       	and	r24, r24
    3c8c:	09 f4       	brne	.+2      	; 0x3c90 <fat_dir_entry_read_callback+0x52>
    3c8e:	c3 c0       	rjmp	.+390    	; 0x3e16 <fat_dir_entry_read_callback+0x1d8>
        return 1;

    if(!dir_entry->entry_offset)
    3c90:	fa 01       	movw	r30, r20
    3c92:	87 a1       	ldd	r24, Z+39	; 0x27
    3c94:	90 a5       	ldd	r25, Z+40	; 0x28
    3c96:	a1 a5       	ldd	r26, Z+41	; 0x29
    3c98:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3c9a:	00 97       	sbiw	r24, 0x00	; 0
    3c9c:	a1 05       	cpc	r26, r1
    3c9e:	b1 05       	cpc	r27, r1
    3ca0:	39 f4       	brne	.+14     	; 0x3cb0 <fat_dir_entry_read_callback+0x72>
        dir_entry->entry_offset = offset;
    3ca2:	da 01       	movw	r26, r20
    3ca4:	97 96       	adiw	r26, 0x27	; 39
    3ca6:	cd 92       	st	X+, r12
    3ca8:	dd 92       	st	X+, r13
    3caa:	ed 92       	st	X+, r14
    3cac:	fc 92       	st	X, r15
    3cae:	9a 97       	sbiw	r26, 0x2a	; 42
 * \returns 0 on failure, 1 on success and 2 if the
 *          directory entry is complete.
 */
uint8_t fat_interpret_dir_entry(struct fat_dir_entry_struct* dir_entry, const uint8_t* raw_entry)
{
    if(!dir_entry || !raw_entry || !raw_entry[0])
    3cb0:	41 15       	cp	r20, r1
    3cb2:	51 05       	cpc	r21, r1
    3cb4:	09 f4       	brne	.+2      	; 0x3cb8 <fat_dir_entry_read_callback+0x7a>
    3cb6:	b1 c0       	rjmp	.+354    	; 0x3e1a <fat_dir_entry_read_callback+0x1dc>
    3cb8:	01 15       	cp	r16, r1
    3cba:	11 05       	cpc	r17, r1
    3cbc:	09 f4       	brne	.+2      	; 0x3cc0 <fat_dir_entry_read_callback+0x82>
    3cbe:	ad c0       	rjmp	.+346    	; 0x3e1a <fat_dir_entry_read_callback+0x1dc>
    3cc0:	f8 01       	movw	r30, r16
    3cc2:	90 81       	ld	r25, Z
    3cc4:	99 23       	and	r25, r25
    3cc6:	09 f4       	brne	.+2      	; 0x3cca <fat_dir_entry_read_callback+0x8c>
    3cc8:	a8 c0       	rjmp	.+336    	; 0x3e1a <fat_dir_entry_read_callback+0x1dc>
        return 0;

    char* long_name = dir_entry->long_name;
    if(raw_entry[11] == 0x0f)
    3cca:	83 85       	ldd	r24, Z+11	; 0x0b
    3ccc:	8f 30       	cpi	r24, 0x0F	; 15
    3cce:	a9 f5       	brne	.+106    	; 0x3d3a <fat_dir_entry_read_callback+0xfc>
    {
        /* Lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;
    3cd0:	89 2f       	mov	r24, r25
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	8f 73       	andi	r24, 0x3F	; 63
    3cd6:	90 70       	andi	r25, 0x00	; 0
    3cd8:	01 97       	sbiw	r24, 0x01	; 1
    3cda:	2d e0       	ldi	r18, 0x0D	; 13
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	82 9f       	mul	r24, r18
    3ce0:	b0 01       	movw	r22, r0
    3ce2:	83 9f       	mul	r24, r19
    3ce4:	70 0d       	add	r23, r0
    3ce6:	92 9f       	mul	r25, r18
    3ce8:	70 0d       	add	r23, r0
    3cea:	11 24       	eor	r1, r1
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
    3cec:	de 01       	movw	r26, r28
    3cee:	11 96       	adiw	r26, 0x01	; 1
    3cf0:	e1 ea       	ldi	r30, 0xA1	; 161
    3cf2:	f1 e0       	ldi	r31, 0x01	; 1
    3cf4:	8d e0       	ldi	r24, 0x0D	; 13
    3cf6:	01 90       	ld	r0, Z+
    3cf8:	0d 92       	st	X+, r0
    3cfa:	81 50       	subi	r24, 0x01	; 1
    3cfc:	e1 f7       	brne	.-8      	; 0x3cf6 <fat_dir_entry_read_callback+0xb8>
    3cfe:	da 01       	movw	r26, r20
    3d00:	a6 0f       	add	r26, r22
    3d02:	b7 1f       	adc	r27, r23
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	30 e0       	ldi	r19, 0x00	; 0
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = raw_entry[char_mapping[i]];
    3d08:	ae 01       	movw	r20, r28
    3d0a:	4f 5f       	subi	r20, 0xFF	; 255
    3d0c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d0e:	0f c0       	rjmp	.+30     	; 0x3d2e <fat_dir_entry_read_callback+0xf0>
    3d10:	fa 01       	movw	r30, r20
    3d12:	e2 0f       	add	r30, r18
    3d14:	f3 1f       	adc	r31, r19
    3d16:	80 81       	ld	r24, Z
    3d18:	f8 01       	movw	r30, r16
    3d1a:	e8 0f       	add	r30, r24
    3d1c:	f1 1d       	adc	r31, r1
    3d1e:	80 81       	ld	r24, Z
    3d20:	8d 93       	st	X+, r24
    3d22:	2f 5f       	subi	r18, 0xFF	; 255
    3d24:	3f 4f       	sbci	r19, 0xFF	; 255
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    3d26:	2d 30       	cpi	r18, 0x0D	; 13
    3d28:	31 05       	cpc	r19, r1
    3d2a:	09 f4       	brne	.+2      	; 0x3d2e <fat_dir_entry_read_callback+0xf0>
    3d2c:	74 c0       	rjmp	.+232    	; 0x3e16 <fat_dir_entry_read_callback+0x1d8>
    3d2e:	c9 01       	movw	r24, r18
    3d30:	86 0f       	add	r24, r22
    3d32:	97 1f       	adc	r25, r23
    3d34:	4f 97       	sbiw	r24, 0x1f	; 31
    3d36:	60 f3       	brcs	.-40     	; 0x3d10 <fat_dir_entry_read_callback+0xd2>
    3d38:	6e c0       	rjmp	.+220    	; 0x3e16 <fat_dir_entry_read_callback+0x1d8>
        return 1;
    }
    else
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
    3d3a:	da 01       	movw	r26, r20
    3d3c:	8c 91       	ld	r24, X
    3d3e:	88 23       	and	r24, r24
    3d40:	09 f0       	breq	.+2      	; 0x3d44 <fat_dir_entry_read_callback+0x106>
    3d42:	4f c0       	rjmp	.+158    	; 0x3de2 <fat_dir_entry_read_callback+0x1a4>
    3d44:	78 01       	movw	r14, r16
    3d46:	68 01       	movw	r12, r16
    3d48:	20 e0       	ldi	r18, 0x00	; 0
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(raw_entry[i] == ' ')
    3d4a:	f6 01       	movw	r30, r12
    3d4c:	90 81       	ld	r25, Z
    3d4e:	90 32       	cpi	r25, 0x20	; 32
    3d50:	a1 f0       	breq	.+40     	; 0x3d7a <fat_dir_entry_read_callback+0x13c>
                    break;
                long_name[i] = raw_entry[i];
    3d52:	9c 93       	st	X, r25
                /* Windows NT and later versions do not store LFN entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((raw_entry[12] & 0x08) && raw_entry[i] >= 'A' && raw_entry[i] <= 'Z')
    3d54:	f8 01       	movw	r30, r16
    3d56:	84 85       	ldd	r24, Z+12	; 0x0c
    3d58:	83 ff       	sbrs	r24, 3
    3d5a:	08 c0       	rjmp	.+16     	; 0x3d6c <fat_dir_entry_read_callback+0x12e>
    3d5c:	f6 01       	movw	r30, r12
    3d5e:	80 81       	ld	r24, Z
    3d60:	81 34       	cpi	r24, 0x41	; 65
    3d62:	20 f0       	brcs	.+8      	; 0x3d6c <fat_dir_entry_read_callback+0x12e>
    3d64:	8b 35       	cpi	r24, 0x5B	; 91
    3d66:	10 f4       	brcc	.+4      	; 0x3d6c <fat_dir_entry_read_callback+0x12e>
                    long_name[i] += 'a' - 'A';
    3d68:	90 5e       	subi	r25, 0xE0	; 224
    3d6a:	9c 93       	st	X, r25
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
    3d6c:	2f 5f       	subi	r18, 0xFF	; 255
    3d6e:	08 94       	sec
    3d70:	c1 1c       	adc	r12, r1
    3d72:	d1 1c       	adc	r13, r1
    3d74:	11 96       	adiw	r26, 0x01	; 1
    3d76:	28 30       	cpi	r18, 0x08	; 8
    3d78:	41 f7       	brne	.-48     	; 0x3d4a <fat_dir_entry_read_callback+0x10c>
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((raw_entry[12] & 0x08) && raw_entry[i] >= 'A' && raw_entry[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
    3d7a:	da 01       	movw	r26, r20
    3d7c:	8c 91       	ld	r24, X
    3d7e:	85 30       	cpi	r24, 0x05	; 5
    3d80:	11 f4       	brne	.+4      	; 0x3d86 <fat_dir_entry_read_callback+0x148>
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
    3d82:	85 ee       	ldi	r24, 0xE5	; 229
    3d84:	8c 93       	st	X, r24

            if(raw_entry[8] != ' ')
    3d86:	f8 01       	movw	r30, r16
    3d88:	80 85       	ldd	r24, Z+8	; 0x08
    3d8a:	80 32       	cpi	r24, 0x20	; 32
    3d8c:	31 f1       	breq	.+76     	; 0x3dda <fat_dir_entry_read_callback+0x19c>
            {
                long_name[i++] = '.';
    3d8e:	fa 01       	movw	r30, r20
    3d90:	e2 0f       	add	r30, r18
    3d92:	f1 1d       	adc	r31, r1
    3d94:	8e e2       	ldi	r24, 0x2E	; 46
    3d96:	80 83       	st	Z, r24
    3d98:	32 2f       	mov	r19, r18
    3d9a:	3f 5f       	subi	r19, 0xFF	; 255

                uint8_t j = 8;
                for(; j < 11; ++j)
    3d9c:	2c 5f       	subi	r18, 0xFC	; 252
                {
                    if(raw_entry[j] == ' ')
    3d9e:	d7 01       	movw	r26, r14
    3da0:	18 96       	adiw	r26, 0x08	; 8
    3da2:	9c 91       	ld	r25, X
    3da4:	90 32       	cpi	r25, 0x20	; 32
    3da6:	c1 f0       	breq	.+48     	; 0x3dd8 <fat_dir_entry_read_callback+0x19a>
                        break;
                    long_name[i] = raw_entry[j];
    3da8:	fa 01       	movw	r30, r20
    3daa:	e3 0f       	add	r30, r19
    3dac:	f1 1d       	adc	r31, r1
    3dae:	90 83       	st	Z, r25

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((raw_entry[12] & 0x10) && raw_entry[j] >= 'A' && raw_entry[j] <= 'Z')
    3db0:	d8 01       	movw	r26, r16
    3db2:	1c 96       	adiw	r26, 0x0c	; 12
    3db4:	8c 91       	ld	r24, X
    3db6:	84 ff       	sbrs	r24, 4
    3db8:	09 c0       	rjmp	.+18     	; 0x3dcc <fat_dir_entry_read_callback+0x18e>
    3dba:	d7 01       	movw	r26, r14
    3dbc:	18 96       	adiw	r26, 0x08	; 8
    3dbe:	8c 91       	ld	r24, X
    3dc0:	81 34       	cpi	r24, 0x41	; 65
    3dc2:	20 f0       	brcs	.+8      	; 0x3dcc <fat_dir_entry_read_callback+0x18e>
    3dc4:	8b 35       	cpi	r24, 0x5B	; 91
    3dc6:	10 f4       	brcc	.+4      	; 0x3dcc <fat_dir_entry_read_callback+0x18e>
                        long_name[i] += 'a' - 'A';
    3dc8:	90 5e       	subi	r25, 0xE0	; 224
    3dca:	90 83       	st	Z, r25

                    ++i;
    3dcc:	3f 5f       	subi	r19, 0xFF	; 255
    3dce:	08 94       	sec
    3dd0:	e1 1c       	adc	r14, r1
    3dd2:	f1 1c       	adc	r15, r1
            if(raw_entry[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
    3dd4:	32 17       	cp	r19, r18
    3dd6:	19 f7       	brne	.-58     	; 0x3d9e <fat_dir_entry_read_callback+0x160>
    3dd8:	23 2f       	mov	r18, r19

                    ++i;
                }
            } 

            long_name[i] = '\0';
    3dda:	fa 01       	movw	r30, r20
    3ddc:	e2 0f       	add	r30, r18
    3dde:	f1 1d       	adc	r31, r1
    3de0:	10 82       	st	Z, r1
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = raw_entry[11];
    3de2:	f8 01       	movw	r30, r16
    3de4:	83 85       	ldd	r24, Z+11	; 0x0b
    3de6:	da 01       	movw	r26, r20
    3de8:	90 96       	adiw	r26, 0x20	; 32
    3dea:	8c 93       	st	X, r24
    3dec:	90 97       	sbiw	r26, 0x20	; 32
        dir_entry->cluster = ltoh16(*((uint16_t*) &raw_entry[26]));
    3dee:	82 8d       	ldd	r24, Z+26	; 0x1a
    3df0:	93 8d       	ldd	r25, Z+27	; 0x1b
    3df2:	92 96       	adiw	r26, 0x22	; 34
    3df4:	9c 93       	st	X, r25
    3df6:	8e 93       	st	-X, r24
    3df8:	91 97       	sbiw	r26, 0x21	; 33
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) ltoh16(*((uint16_t*) &raw_entry[20]))) << 16;
#endif
        dir_entry->file_size = ltoh32(*((uint32_t*) &raw_entry[28]));
    3dfa:	84 8d       	ldd	r24, Z+28	; 0x1c
    3dfc:	95 8d       	ldd	r25, Z+29	; 0x1d
    3dfe:	a6 8d       	ldd	r26, Z+30	; 0x1e
    3e00:	b7 8d       	ldd	r27, Z+31	; 0x1f
    3e02:	fa 01       	movw	r30, r20
    3e04:	83 a3       	std	Z+35, r24	; 0x23
    3e06:	94 a3       	std	Z+36, r25	; 0x24
    3e08:	a5 a3       	std	Z+37, r26	; 0x25
    3e0a:	b6 a3       	std	Z+38, r27	; 0x26
        {
            return 1;
        }
        case 2: /* directory entry complete, finish */
        {
            arg->finished = 1;
    3e0c:	81 e0       	ldi	r24, 0x01	; 1
    3e0e:	db 01       	movw	r26, r22
    3e10:	14 96       	adiw	r26, 0x04	; 4
    3e12:	8c 93       	st	X, r24
    3e14:	02 c0       	rjmp	.+4      	; 0x3e1a <fat_dir_entry_read_callback+0x1dc>
            return 0;
    3e16:	81 e0       	ldi	r24, 0x01	; 1
    3e18:	01 c0       	rjmp	.+2      	; 0x3e1c <fat_dir_entry_read_callback+0x1de>
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
        }
    }

    return 0;
}
    3e1c:	2d 96       	adiw	r28, 0x0d	; 13
    3e1e:	0f b6       	in	r0, 0x3f	; 63
    3e20:	f8 94       	cli
    3e22:	de bf       	out	0x3e, r29	; 62
    3e24:	0f be       	out	0x3f, r0	; 63
    3e26:	cd bf       	out	0x3d, r28	; 61
    3e28:	cf 91       	pop	r28
    3e2a:	df 91       	pop	r29
    3e2c:	1f 91       	pop	r17
    3e2e:	0f 91       	pop	r16
    3e30:	ff 90       	pop	r15
    3e32:	ef 90       	pop	r14
    3e34:	df 90       	pop	r13
    3e36:	cf 90       	pop	r12
    3e38:	08 95       	ret

00003e3a <fat_delete_file>:
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    3e3a:	7f 92       	push	r7
    3e3c:	8f 92       	push	r8
    3e3e:	9f 92       	push	r9
    3e40:	af 92       	push	r10
    3e42:	bf 92       	push	r11
    3e44:	cf 92       	push	r12
    3e46:	df 92       	push	r13
    3e48:	ef 92       	push	r14
    3e4a:	ff 92       	push	r15
    3e4c:	0f 93       	push	r16
    3e4e:	1f 93       	push	r17
    3e50:	df 93       	push	r29
    3e52:	cf 93       	push	r28
    3e54:	cd b7       	in	r28, 0x3d	; 61
    3e56:	de b7       	in	r29, 0x3e	; 62
    3e58:	2c 97       	sbiw	r28, 0x0c	; 12
    3e5a:	0f b6       	in	r0, 0x3f	; 63
    3e5c:	f8 94       	cli
    3e5e:	de bf       	out	0x3e, r29	; 62
    3e60:	0f be       	out	0x3f, r0	; 63
    3e62:	cd bf       	out	0x3d, r28	; 61
    3e64:	6c 01       	movw	r12, r24
    3e66:	5b 01       	movw	r10, r22
    if(!fs || !dir_entry)
    3e68:	00 97       	sbiw	r24, 0x00	; 0
    3e6a:	09 f4       	brne	.+2      	; 0x3e6e <fat_delete_file+0x34>
    3e6c:	53 c0       	rjmp	.+166    	; 0x3f14 <fat_delete_file+0xda>
    3e6e:	61 15       	cp	r22, r1
    3e70:	71 05       	cpc	r23, r1
    3e72:	09 f4       	brne	.+2      	; 0x3e76 <fat_delete_file+0x3c>
    3e74:	4f c0       	rjmp	.+158    	; 0x3f14 <fat_delete_file+0xda>
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    3e76:	db 01       	movw	r26, r22
    3e78:	97 96       	adiw	r26, 0x27	; 39
    3e7a:	ed 90       	ld	r14, X+
    3e7c:	fd 90       	ld	r15, X+
    3e7e:	0d 91       	ld	r16, X+
    3e80:	1c 91       	ld	r17, X
    3e82:	9a 97       	sbiw	r26, 0x2a	; 42
    if(!dir_entry_offset)
    3e84:	e1 14       	cp	r14, r1
    3e86:	f1 04       	cpc	r15, r1
    3e88:	01 05       	cpc	r16, r1
    3e8a:	11 05       	cpc	r17, r1
    3e8c:	09 f4       	brne	.+2      	; 0x3e90 <fat_delete_file+0x56>
    3e8e:	42 c0       	rjmp	.+132    	; 0x3f14 <fat_delete_file+0xda>

    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    3e90:	4e 01       	movw	r8, r28
    3e92:	08 94       	sec
    3e94:	81 1c       	adc	r8, r1
    3e96:	91 1c       	adc	r9, r1
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    3e98:	e5 ee       	ldi	r30, 0xE5	; 229
    3e9a:	7e 2e       	mov	r7, r30

    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    3e9c:	d6 01       	movw	r26, r12
    3e9e:	ed 91       	ld	r30, X+
    3ea0:	fc 91       	ld	r31, X
    3ea2:	01 90       	ld	r0, Z+
    3ea4:	f0 81       	ld	r31, Z
    3ea6:	e0 2d       	mov	r30, r0
    3ea8:	c8 01       	movw	r24, r16
    3eaa:	b7 01       	movw	r22, r14
    3eac:	a4 01       	movw	r20, r8
    3eae:	2c e0       	ldi	r18, 0x0C	; 12
    3eb0:	30 e0       	ldi	r19, 0x00	; 0
    3eb2:	09 95       	icall
    3eb4:	88 23       	and	r24, r24
    3eb6:	71 f1       	breq	.+92     	; 0x3f14 <fat_delete_file+0xda>
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    3eb8:	79 82       	std	Y+1, r7	; 0x01
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
    3eba:	d6 01       	movw	r26, r12
    3ebc:	ed 91       	ld	r30, X+
    3ebe:	fc 91       	ld	r31, X
    3ec0:	04 80       	ldd	r0, Z+4	; 0x04
    3ec2:	f5 81       	ldd	r31, Z+5	; 0x05
    3ec4:	e0 2d       	mov	r30, r0
    3ec6:	c8 01       	movw	r24, r16
    3ec8:	b7 01       	movw	r22, r14
    3eca:	a4 01       	movw	r20, r8
    3ecc:	2c e0       	ldi	r18, 0x0C	; 12
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	09 95       	icall
    3ed2:	88 23       	and	r24, r24
    3ed4:	f9 f0       	breq	.+62     	; 0x3f14 <fat_delete_file+0xda>
            return 0;

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
    3ed6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ed8:	8f 30       	cpi	r24, 0x0F	; 15
    3eda:	49 f4       	brne	.+18     	; 0x3eee <fat_delete_file+0xb4>
            break;

        dir_entry_offset += 32;
    3edc:	80 e2       	ldi	r24, 0x20	; 32
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	a0 e0       	ldi	r26, 0x00	; 0
    3ee2:	b0 e0       	ldi	r27, 0x00	; 0
    3ee4:	e8 0e       	add	r14, r24
    3ee6:	f9 1e       	adc	r15, r25
    3ee8:	0a 1f       	adc	r16, r26
    3eea:	1b 1f       	adc	r17, r27
    3eec:	d7 cf       	rjmp	.-82     	; 0x3e9c <fat_delete_file+0x62>
    }

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
    3eee:	d5 01       	movw	r26, r10
    3ef0:	91 96       	adiw	r26, 0x21	; 33
    3ef2:	6d 91       	ld	r22, X+
    3ef4:	7c 91       	ld	r23, X
    3ef6:	92 97       	sbiw	r26, 0x22	; 34
    3ef8:	61 15       	cp	r22, r1
    3efa:	71 05       	cpc	r23, r1
    3efc:	39 f0       	breq	.+14     	; 0x3f0c <fat_delete_file+0xd2>
    3efe:	c6 01       	movw	r24, r12
    3f00:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <fat_free_clusters>
    3f04:	20 e0       	ldi	r18, 0x00	; 0
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	88 23       	and	r24, r24
    3f0a:	11 f0       	breq	.+4      	; 0x3f10 <fat_delete_file+0xd6>
    3f0c:	21 e0       	ldi	r18, 0x01	; 1
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	82 2f       	mov	r24, r18
    3f12:	01 c0       	rjmp	.+2      	; 0x3f16 <fat_delete_file+0xdc>
    3f14:	80 e0       	ldi	r24, 0x00	; 0
}
    3f16:	2c 96       	adiw	r28, 0x0c	; 12
    3f18:	0f b6       	in	r0, 0x3f	; 63
    3f1a:	f8 94       	cli
    3f1c:	de bf       	out	0x3e, r29	; 62
    3f1e:	0f be       	out	0x3f, r0	; 63
    3f20:	cd bf       	out	0x3d, r28	; 61
    3f22:	cf 91       	pop	r28
    3f24:	df 91       	pop	r29
    3f26:	1f 91       	pop	r17
    3f28:	0f 91       	pop	r16
    3f2a:	ff 90       	pop	r15
    3f2c:	ef 90       	pop	r14
    3f2e:	df 90       	pop	r13
    3f30:	cf 90       	pop	r12
    3f32:	bf 90       	pop	r11
    3f34:	af 90       	pop	r10
    3f36:	9f 90       	pop	r9
    3f38:	8f 90       	pop	r8
    3f3a:	7f 90       	pop	r7
    3f3c:	08 95       	ret

00003f3e <fat_get_fs_size>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    3f3e:	fc 01       	movw	r30, r24
    if(!fs)
    3f40:	00 97       	sbiw	r24, 0x00	; 0
    3f42:	29 f4       	brne	.+10     	; 0x3f4e <fat_get_fs_size+0x10>
    3f44:	20 e0       	ldi	r18, 0x00	; 0
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	40 e0       	ldi	r20, 0x00	; 0
    3f4a:	50 e0       	ldi	r21, 0x00	; 0
    3f4c:	14 c0       	rjmp	.+40     	; 0x3f76 <fat_get_fs_size+0x38>
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
    3f4e:	62 85       	ldd	r22, Z+10	; 0x0a
    3f50:	73 85       	ldd	r23, Z+11	; 0x0b
    3f52:	84 85       	ldd	r24, Z+12	; 0x0c
    3f54:	95 85       	ldd	r25, Z+13	; 0x0d
    3f56:	96 95       	lsr	r25
    3f58:	87 95       	ror	r24
    3f5a:	77 95       	ror	r23
    3f5c:	67 95       	ror	r22
    3f5e:	62 50       	subi	r22, 0x02	; 2
    3f60:	70 40       	sbci	r23, 0x00	; 0
    3f62:	80 40       	sbci	r24, 0x00	; 0
    3f64:	90 40       	sbci	r25, 0x00	; 0
    3f66:	20 89       	ldd	r18, Z+16	; 0x10
    3f68:	31 89       	ldd	r19, Z+17	; 0x11
    3f6a:	40 e0       	ldi	r20, 0x00	; 0
    3f6c:	50 e0       	ldi	r21, 0x00	; 0
    3f6e:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    3f72:	9b 01       	movw	r18, r22
    3f74:	ac 01       	movw	r20, r24
}
    3f76:	b9 01       	movw	r22, r18
    3f78:	ca 01       	movw	r24, r20
    3f7a:	08 95       	ret

00003f7c <fat_get_fs_free>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
    3f7c:	2f 92       	push	r2
    3f7e:	3f 92       	push	r3
    3f80:	4f 92       	push	r4
    3f82:	5f 92       	push	r5
    3f84:	6f 92       	push	r6
    3f86:	7f 92       	push	r7
    3f88:	8f 92       	push	r8
    3f8a:	9f 92       	push	r9
    3f8c:	af 92       	push	r10
    3f8e:	bf 92       	push	r11
    3f90:	cf 92       	push	r12
    3f92:	df 92       	push	r13
    3f94:	ef 92       	push	r14
    3f96:	ff 92       	push	r15
    3f98:	0f 93       	push	r16
    3f9a:	1f 93       	push	r17
    3f9c:	df 93       	push	r29
    3f9e:	cf 93       	push	r28
    3fa0:	cd b7       	in	r28, 0x3d	; 61
    3fa2:	de b7       	in	r29, 0x3e	; 62
    3fa4:	a6 97       	sbiw	r28, 0x26	; 38
    3fa6:	0f b6       	in	r0, 0x3f	; 63
    3fa8:	f8 94       	cli
    3faa:	de bf       	out	0x3e, r29	; 62
    3fac:	0f be       	out	0x3f, r0	; 63
    3fae:	cd bf       	out	0x3d, r28	; 61
    3fb0:	9e a3       	std	Y+38, r25	; 0x26
    3fb2:	8d a3       	std	Y+37, r24	; 0x25
    if(!fs)
    3fb4:	89 2b       	or	r24, r25
    3fb6:	09 f4       	brne	.+2      	; 0x3fba <fat_get_fs_free+0x3e>
    3fb8:	5d c0       	rjmp	.+186    	; 0x4074 <fat_get_fs_free+0xf8>
        return 0;

    uint8_t fat[32];
    struct fat_usage_count_callback_arg count_arg;
    count_arg.cluster_count = 0;
    3fba:	1a 82       	std	Y+2, r1	; 0x02
    3fbc:	19 82       	std	Y+1, r1	; 0x01
    count_arg.buffer_size = sizeof(fat);
    3fbe:	80 e2       	ldi	r24, 0x20	; 32
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	9c 83       	std	Y+4, r25	; 0x04
    3fc4:	8b 83       	std	Y+3, r24	; 0x03

    offset_t fat_offset = fs->header.fat_offset;
    3fc6:	ad a1       	ldd	r26, Y+37	; 0x25
    3fc8:	be a1       	ldd	r27, Y+38	; 0x26
    3fca:	16 96       	adiw	r26, 0x06	; 6
    3fcc:	4d 90       	ld	r4, X+
    3fce:	5d 90       	ld	r5, X+
    3fd0:	6d 90       	ld	r6, X+
    3fd2:	7c 90       	ld	r7, X
    3fd4:	19 97       	sbiw	r26, 0x09	; 9
    uint32_t fat_size = fs->header.fat_size;
    3fd6:	1a 96       	adiw	r26, 0x0a	; 10
    3fd8:	8d 90       	ld	r8, X+
    3fda:	9d 90       	ld	r9, X+
    3fdc:	ad 90       	ld	r10, X+
    3fde:	bc 90       	ld	r11, X
    3fe0:	1d 97       	sbiw	r26, 0x0d	; 13
    3fe2:	34 c0       	rjmp	.+104    	; 0x404c <fat_get_fs_free+0xd0>
    while(fat_size > 0)
    {
        uintptr_t length = UINTPTR_MAX - 1;
        if(fat_size < length)
    3fe4:	be ef       	ldi	r27, 0xFE	; 254
    3fe6:	8b 16       	cp	r8, r27
    3fe8:	bf ef       	ldi	r27, 0xFF	; 255
    3fea:	9b 06       	cpc	r9, r27
    3fec:	b0 e0       	ldi	r27, 0x00	; 0
    3fee:	ab 06       	cpc	r10, r27
    3ff0:	b0 e0       	ldi	r27, 0x00	; 0
    3ff2:	bb 06       	cpc	r11, r27
    3ff4:	28 f0       	brcs	.+10     	; 0x4000 <fat_get_fs_free+0x84>
    3ff6:	1e ef       	ldi	r17, 0xFE	; 254
    3ff8:	21 2e       	mov	r2, r17
    3ffa:	1f ef       	ldi	r17, 0xFF	; 255
    3ffc:	31 2e       	mov	r3, r17
    3ffe:	01 c0       	rjmp	.+2      	; 0x4002 <fat_get_fs_free+0x86>
            length = fat_size;
    4000:	14 01       	movw	r2, r8

        if(!fs->partition->device_read_interval(fat_offset,
    4002:	ad a1       	ldd	r26, Y+37	; 0x25
    4004:	be a1       	ldd	r27, Y+38	; 0x26
    4006:	ed 91       	ld	r30, X+
    4008:	fc 91       	ld	r31, X
    400a:	02 80       	ldd	r0, Z+2	; 0x02
    400c:	f3 81       	ldd	r31, Z+3	; 0x03
    400e:	e0 2d       	mov	r30, r0
    4010:	c3 01       	movw	r24, r6
    4012:	b2 01       	movw	r22, r4
    4014:	ae 01       	movw	r20, r28
    4016:	4b 5f       	subi	r20, 0xFB	; 251
    4018:	5f 4f       	sbci	r21, 0xFF	; 255
    401a:	20 e2       	ldi	r18, 0x20	; 32
    401c:	30 e0       	ldi	r19, 0x00	; 0
    401e:	81 01       	movw	r16, r2
    4020:	b9 e5       	ldi	r27, 0x59	; 89
    4022:	eb 2e       	mov	r14, r27
    4024:	b0 e2       	ldi	r27, 0x20	; 32
    4026:	fb 2e       	mov	r15, r27
    4028:	6e 01       	movw	r12, r28
    402a:	08 94       	sec
    402c:	c1 1c       	adc	r12, r1
    402e:	d1 1c       	adc	r13, r1
    4030:	09 95       	icall
    4032:	88 23       	and	r24, r24
    4034:	f9 f0       	breq	.+62     	; 0x4074 <fat_get_fs_free+0xf8>
                                                &count_arg
                                               )
          )
            return 0;

        fat_offset += length;
    4036:	c1 01       	movw	r24, r2
    4038:	a0 e0       	ldi	r26, 0x00	; 0
    403a:	b0 e0       	ldi	r27, 0x00	; 0
    403c:	48 0e       	add	r4, r24
    403e:	59 1e       	adc	r5, r25
    4040:	6a 1e       	adc	r6, r26
    4042:	7b 1e       	adc	r7, r27
        fat_size -= length;
    4044:	88 1a       	sub	r8, r24
    4046:	99 0a       	sbc	r9, r25
    4048:	aa 0a       	sbc	r10, r26
    404a:	bb 0a       	sbc	r11, r27
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    404c:	81 14       	cp	r8, r1
    404e:	91 04       	cpc	r9, r1
    4050:	a1 04       	cpc	r10, r1
    4052:	b1 04       	cpc	r11, r1
    4054:	39 f6       	brne	.-114    	; 0x3fe4 <fat_get_fs_free+0x68>

        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
    4056:	ed a1       	ldd	r30, Y+37	; 0x25
    4058:	fe a1       	ldd	r31, Y+38	; 0x26
    405a:	60 89       	ldd	r22, Z+16	; 0x10
    405c:	71 89       	ldd	r23, Z+17	; 0x11
    405e:	80 e0       	ldi	r24, 0x00	; 0
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	29 81       	ldd	r18, Y+1	; 0x01
    4064:	3a 81       	ldd	r19, Y+2	; 0x02
    4066:	40 e0       	ldi	r20, 0x00	; 0
    4068:	50 e0       	ldi	r21, 0x00	; 0
    406a:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    406e:	9b 01       	movw	r18, r22
    4070:	ac 01       	movw	r20, r24
    4072:	04 c0       	rjmp	.+8      	; 0x407c <fat_get_fs_free+0x100>
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	40 e0       	ldi	r20, 0x00	; 0
    407a:	50 e0       	ldi	r21, 0x00	; 0
}
    407c:	b9 01       	movw	r22, r18
    407e:	ca 01       	movw	r24, r20
    4080:	a6 96       	adiw	r28, 0x26	; 38
    4082:	0f b6       	in	r0, 0x3f	; 63
    4084:	f8 94       	cli
    4086:	de bf       	out	0x3e, r29	; 62
    4088:	0f be       	out	0x3f, r0	; 63
    408a:	cd bf       	out	0x3d, r28	; 61
    408c:	cf 91       	pop	r28
    408e:	df 91       	pop	r29
    4090:	1f 91       	pop	r17
    4092:	0f 91       	pop	r16
    4094:	ff 90       	pop	r15
    4096:	ef 90       	pop	r14
    4098:	df 90       	pop	r13
    409a:	cf 90       	pop	r12
    409c:	bf 90       	pop	r11
    409e:	af 90       	pop	r10
    40a0:	9f 90       	pop	r9
    40a2:	8f 90       	pop	r8
    40a4:	7f 90       	pop	r7
    40a6:	6f 90       	pop	r6
    40a8:	5f 90       	pop	r5
    40aa:	4f 90       	pop	r4
    40ac:	3f 90       	pop	r3
    40ae:	2f 90       	pop	r2
    40b0:	08 95       	ret

000040b2 <fat_get_fs_free_16_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT.
 */
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    40b2:	dc 01       	movw	r26, r24
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    40b4:	f9 01       	movw	r30, r18
    uintptr_t buffer_size = count_arg->buffer_size;
    40b6:	42 81       	ldd	r20, Z+2	; 0x02
    40b8:	53 81       	ldd	r21, Z+3	; 0x03
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	0d c0       	rjmp	.+26     	; 0x40da <fat_get_fs_free_16_callback+0x28>

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    {
        uint16_t cluster = *((uint16_t*) &buffer[0]);
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
    40c0:	8d 91       	ld	r24, X+
    40c2:	9c 91       	ld	r25, X
    40c4:	11 97       	sbiw	r26, 0x01	; 1
    40c6:	89 2b       	or	r24, r25
    40c8:	29 f4       	brne	.+10     	; 0x40d4 <fat_get_fs_free_16_callback+0x22>
            ++(count_arg->cluster_count);
    40ca:	80 81       	ld	r24, Z
    40cc:	91 81       	ldd	r25, Z+1	; 0x01
    40ce:	01 96       	adiw	r24, 0x01	; 1
    40d0:	91 83       	std	Z+1, r25	; 0x01
    40d2:	80 83       	st	Z, r24
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    40d4:	2e 5f       	subi	r18, 0xFE	; 254
    40d6:	3f 4f       	sbci	r19, 0xFF	; 255
    40d8:	12 96       	adiw	r26, 0x02	; 2
    40da:	24 17       	cp	r18, r20
    40dc:	35 07       	cpc	r19, r21
    40de:	80 f3       	brcs	.-32     	; 0x40c0 <fat_get_fs_free_16_callback+0xe>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	08 95       	ret

000040e4 <fat_clear_handles>:
 * Initialize the data structures used to store file system handles
 */
void fat_clear_handles(void)
{
#if !USE_DYNAMIC_MEMORY
	memset(fat_fs_handles, 0, sizeof(fat_fs_handles));
    40e4:	8a e1       	ldi	r24, 0x1A	; 26
    40e6:	e1 ed       	ldi	r30, 0xD1	; 209
    40e8:	f3 e0       	ldi	r31, 0x03	; 3
    40ea:	df 01       	movw	r26, r30
    40ec:	1d 92       	st	X+, r1
    40ee:	8a 95       	dec	r24
    40f0:	e9 f7       	brne	.-6      	; 0x40ec <fat_clear_handles+0x8>
	memset(fat_file_handles, 0, sizeof(fat_file_handles));
    40f2:	83 e3       	ldi	r24, 0x33	; 51
    40f4:	eb ee       	ldi	r30, 0xEB	; 235
    40f6:	f3 e0       	ldi	r31, 0x03	; 3
    40f8:	df 01       	movw	r26, r30
    40fa:	1d 92       	st	X+, r1
    40fc:	8a 95       	dec	r24
    40fe:	e9 f7       	brne	.-6      	; 0x40fa <fat_clear_handles+0x16>
	memset(fat_dir_handles, 0, sizeof(fat_dir_handles));
    4100:	82 e6       	ldi	r24, 0x62	; 98
    4102:	ee e1       	ldi	r30, 0x1E	; 30
    4104:	f4 e0       	ldi	r31, 0x04	; 4
    4106:	df 01       	movw	r26, r30
    4108:	1d 92       	st	X+, r1
    410a:	8a 95       	dec	r24
    410c:	e9 f7       	brne	.-6      	; 0x4108 <fat_clear_handles+0x24>
#endif
    410e:	08 95       	ret

00004110 <fat_clear_cluster>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    4110:	cf 92       	push	r12
    4112:	df 92       	push	r13
    4114:	ef 92       	push	r14
    4116:	ff 92       	push	r15
    4118:	0f 93       	push	r16
    411a:	1f 93       	push	r17
    411c:	df 93       	push	r29
    411e:	cf 93       	push	r28
    4120:	cd b7       	in	r28, 0x3d	; 61
    4122:	de b7       	in	r29, 0x3e	; 62
    4124:	60 97       	sbiw	r28, 0x10	; 16
    4126:	0f b6       	in	r0, 0x3f	; 63
    4128:	f8 94       	cli
    412a:	de bf       	out	0x3e, r29	; 62
    412c:	0f be       	out	0x3f, r0	; 63
    412e:	cd bf       	out	0x3d, r28	; 61
    4130:	8c 01       	movw	r16, r24
    if(cluster_num < 2)
    4132:	62 30       	cpi	r22, 0x02	; 2
    4134:	71 05       	cpc	r23, r1
    4136:	10 f4       	brcc	.+4      	; 0x413c <fat_clear_cluster+0x2c>
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	35 c0       	rjmp	.+106    	; 0x41a6 <fat_clear_cluster+0x96>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    413c:	00 97       	sbiw	r24, 0x00	; 0
    413e:	29 f4       	brne	.+10     	; 0x414a <fat_clear_cluster+0x3a>
    4140:	40 e0       	ldi	r20, 0x00	; 0
    4142:	50 e0       	ldi	r21, 0x00	; 0
    4144:	60 e0       	ldi	r22, 0x00	; 0
    4146:	70 e0       	ldi	r23, 0x00	; 0
    4148:	16 c0       	rjmp	.+44     	; 0x4176 <fat_clear_cluster+0x66>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    414a:	62 50       	subi	r22, 0x02	; 2
    414c:	70 40       	sbci	r23, 0x00	; 0
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	f8 01       	movw	r30, r16
    4154:	20 89       	ldd	r18, Z+16	; 0x10
    4156:	31 89       	ldd	r19, Z+17	; 0x11
    4158:	40 e0       	ldi	r20, 0x00	; 0
    415a:	50 e0       	ldi	r21, 0x00	; 0
    415c:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    4160:	ab 01       	movw	r20, r22
    4162:	bc 01       	movw	r22, r24
    4164:	f8 01       	movw	r30, r16
    4166:	82 89       	ldd	r24, Z+18	; 0x12
    4168:	93 89       	ldd	r25, Z+19	; 0x13
    416a:	a4 89       	ldd	r26, Z+20	; 0x14
    416c:	b5 89       	ldd	r27, Z+21	; 0x15
    416e:	48 0f       	add	r20, r24
    4170:	59 1f       	adc	r21, r25
    4172:	6a 1f       	adc	r22, r26
    4174:	7b 1f       	adc	r23, r27
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
    4176:	de 01       	movw	r26, r28
    4178:	11 96       	adiw	r26, 0x01	; 1
    417a:	80 e1       	ldi	r24, 0x10	; 16
    417c:	fd 01       	movw	r30, r26
    417e:	11 92       	st	Z+, r1
    4180:	8a 95       	dec	r24
    4182:	e9 f7       	brne	.-6      	; 0x417e <fat_clear_cluster+0x6e>
    return fs->partition->device_write_interval(cluster_offset,
    4184:	f8 01       	movw	r30, r16
    4186:	80 81       	ld	r24, Z
    4188:	91 81       	ldd	r25, Z+1	; 0x01
    418a:	20 89       	ldd	r18, Z+16	; 0x10
    418c:	31 89       	ldd	r19, Z+17	; 0x11
    418e:	fc 01       	movw	r30, r24
    4190:	c6 80       	ldd	r12, Z+6	; 0x06
    4192:	d7 80       	ldd	r13, Z+7	; 0x07
    4194:	cb 01       	movw	r24, r22
    4196:	ba 01       	movw	r22, r20
    4198:	ad 01       	movw	r20, r26
    419a:	09 eb       	ldi	r16, 0xB9	; 185
    419c:	1c e1       	ldi	r17, 0x1C	; 28
    419e:	ee 24       	eor	r14, r14
    41a0:	ff 24       	eor	r15, r15
    41a2:	f6 01       	movw	r30, r12
    41a4:	09 95       	icall
                                                zero,
                                                fs->header.cluster_size,
                                                fat_clear_cluster_callback,
                                                0
                                               );
}
    41a6:	60 96       	adiw	r28, 0x10	; 16
    41a8:	0f b6       	in	r0, 0x3f	; 63
    41aa:	f8 94       	cli
    41ac:	de bf       	out	0x3e, r29	; 62
    41ae:	0f be       	out	0x3f, r0	; 63
    41b0:	cd bf       	out	0x3d, r28	; 61
    41b2:	cf 91       	pop	r28
    41b4:	df 91       	pop	r29
    41b6:	1f 91       	pop	r17
    41b8:	0f 91       	pop	r16
    41ba:	ff 90       	pop	r15
    41bc:	ef 90       	pop	r14
    41be:	df 90       	pop	r13
    41c0:	cf 90       	pop	r12
    41c2:	08 95       	ret

000041c4 <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    41c4:	2f 92       	push	r2
    41c6:	3f 92       	push	r3
    41c8:	4f 92       	push	r4
    41ca:	5f 92       	push	r5
    41cc:	6f 92       	push	r6
    41ce:	7f 92       	push	r7
    41d0:	8f 92       	push	r8
    41d2:	9f 92       	push	r9
    41d4:	af 92       	push	r10
    41d6:	bf 92       	push	r11
    41d8:	cf 92       	push	r12
    41da:	df 92       	push	r13
    41dc:	ef 92       	push	r14
    41de:	ff 92       	push	r15
    41e0:	0f 93       	push	r16
    41e2:	1f 93       	push	r17
    41e4:	df 93       	push	r29
    41e6:	cf 93       	push	r28
    41e8:	cd b7       	in	r28, 0x3d	; 61
    41ea:	de b7       	in	r29, 0x3e	; 62
    41ec:	a7 97       	sbiw	r28, 0x27	; 39
    41ee:	0f b6       	in	r0, 0x3f	; 63
    41f0:	f8 94       	cli
    41f2:	de bf       	out	0x3e, r29	; 62
    41f4:	0f be       	out	0x3f, r0	; 63
    41f6:	cd bf       	out	0x3d, r28	; 61
    41f8:	2c 01       	movw	r4, r24
    41fa:	7f a3       	std	Y+39, r23	; 0x27
    41fc:	6e a3       	std	Y+38, r22	; 0x26
    if(!dd || !dir_entry)
    41fe:	00 97       	sbiw	r24, 0x00	; 0
    4200:	09 f4       	brne	.+2      	; 0x4204 <fat_read_dir+0x40>
    4202:	b1 c0       	rjmp	.+354    	; 0x4366 <fat_read_dir+0x1a2>
    4204:	61 15       	cp	r22, r1
    4206:	71 05       	cpc	r23, r1
    4208:	09 f4       	brne	.+2      	; 0x420c <fat_read_dir+0x48>
    420a:	ad c0       	rjmp	.+346    	; 0x4366 <fat_read_dir+0x1a2>
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    420c:	dc 01       	movw	r26, r24
    420e:	8d 90       	ld	r8, X+
    4210:	9c 90       	ld	r9, X
    4212:	11 97       	sbiw	r26, 0x01	; 1
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    4214:	f4 01       	movw	r30, r8
    4216:	20 88       	ldd	r2, Z+16	; 0x10
    4218:	31 88       	ldd	r3, Z+17	; 0x11
    cluster_t cluster_num = dd->entry_cluster;
    421a:	9d 96       	adiw	r26, 0x2d	; 45
    421c:	ad 90       	ld	r10, X+
    421e:	bc 90       	ld	r11, X
    4220:	9e 97       	sbiw	r26, 0x2e	; 46
    uint16_t cluster_offset = dd->entry_offset;
    4222:	9f 96       	adiw	r26, 0x2f	; 47
    4224:	6d 90       	ld	r6, X+
    4226:	7c 90       	ld	r7, X
    4228:	d0 97       	sbiw	r26, 0x30	; 48
    struct fat_read_dir_callback_arg arg;

    /* reset directory entry */
    memset(dir_entry, 0, sizeof(*dir_entry));
    422a:	8b e2       	ldi	r24, 0x2B	; 43
    422c:	db 01       	movw	r26, r22
    422e:	1d 92       	st	X+, r1
    4230:	8a 95       	dec	r24
    4232:	e9 f7       	brne	.-6      	; 0x422e <fat_read_dir+0x6a>

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    4234:	fe 01       	movw	r30, r28
    4236:	31 96       	adiw	r30, 0x01	; 1
    4238:	85 e0       	ldi	r24, 0x05	; 5
    423a:	df 01       	movw	r26, r30
    423c:	1d 92       	st	X+, r1
    423e:	8a 95       	dec	r24
    4240:	e9 f7       	brne	.-6      	; 0x423c <fat_read_dir+0x78>
    arg.dir_entry = dir_entry;

    /* check if we read from the root directory */
    if(cluster_num == 0)
    4242:	a1 14       	cp	r10, r1
    4244:	b1 04       	cpc	r11, r1
    4246:	09 f0       	breq	.+2      	; 0x424a <fat_read_dir+0x86>
    4248:	76 c0       	rjmp	.+236    	; 0x4336 <fat_read_dir+0x172>
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
            cluster_num = header->root_dir_cluster;
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    424a:	f4 01       	movw	r30, r8
    424c:	22 88       	ldd	r2, Z+18	; 0x12
    424e:	33 88       	ldd	r3, Z+19	; 0x13
    4250:	86 89       	ldd	r24, Z+22	; 0x16
    4252:	97 89       	ldd	r25, Z+23	; 0x17
    4254:	28 1a       	sub	r2, r24
    4256:	39 0a       	sbc	r3, r25
    4258:	6e c0       	rjmp	.+220    	; 0x4336 <fat_read_dir+0x172>
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
        uint32_t pos = cluster_offset;
    425a:	73 01       	movw	r14, r6
    425c:	00 e0       	ldi	r16, 0x00	; 0
    425e:	10 e0       	ldi	r17, 0x00	; 0
        if(cluster_num == 0)
    4260:	a1 14       	cp	r10, r1
    4262:	b1 04       	cpc	r11, r1
    4264:	41 f4       	brne	.+16     	; 0x4276 <fat_read_dir+0xb2>
            pos += header->root_dir_offset;
    4266:	d4 01       	movw	r26, r8
    4268:	56 96       	adiw	r26, 0x16	; 22
    426a:	6d 91       	ld	r22, X+
    426c:	7d 91       	ld	r23, X+
    426e:	8d 91       	ld	r24, X+
    4270:	9c 91       	ld	r25, X
    4272:	59 97       	sbiw	r26, 0x19	; 25
    4274:	2d c0       	rjmp	.+90     	; 0x42d0 <fat_read_dir+0x10c>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    4276:	81 14       	cp	r8, r1
    4278:	91 04       	cpc	r9, r1
    427a:	21 f1       	breq	.+72     	; 0x42c4 <fat_read_dir+0x100>
    427c:	b2 e0       	ldi	r27, 0x02	; 2
    427e:	ab 16       	cp	r10, r27
    4280:	b1 04       	cpc	r11, r1
    4282:	00 f1       	brcs	.+64     	; 0x42c4 <fat_read_dir+0x100>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    4284:	ee ef       	ldi	r30, 0xFE	; 254
    4286:	ff ef       	ldi	r31, 0xFF	; 255
    4288:	ae 0e       	add	r10, r30
    428a:	bf 1e       	adc	r11, r31
    428c:	b5 01       	movw	r22, r10
    428e:	80 e0       	ldi	r24, 0x00	; 0
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	22 e0       	ldi	r18, 0x02	; 2
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	a2 0e       	add	r10, r18
    4298:	b3 1e       	adc	r11, r19
    429a:	d4 01       	movw	r26, r8
    429c:	50 96       	adiw	r26, 0x10	; 16
    429e:	2d 91       	ld	r18, X+
    42a0:	3c 91       	ld	r19, X
    42a2:	51 97       	sbiw	r26, 0x11	; 17
    42a4:	40 e0       	ldi	r20, 0x00	; 0
    42a6:	50 e0       	ldi	r21, 0x00	; 0
    42a8:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    42ac:	9b 01       	movw	r18, r22
    42ae:	ac 01       	movw	r20, r24
    42b0:	f4 01       	movw	r30, r8
    42b2:	82 89       	ldd	r24, Z+18	; 0x12
    42b4:	93 89       	ldd	r25, Z+19	; 0x13
    42b6:	a4 89       	ldd	r26, Z+20	; 0x14
    42b8:	b5 89       	ldd	r27, Z+21	; 0x15
    42ba:	28 0f       	add	r18, r24
    42bc:	39 1f       	adc	r19, r25
    42be:	4a 1f       	adc	r20, r26
    42c0:	5b 1f       	adc	r21, r27
    42c2:	04 c0       	rjmp	.+8      	; 0x42cc <fat_read_dir+0x108>
    42c4:	20 e0       	ldi	r18, 0x00	; 0
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	40 e0       	ldi	r20, 0x00	; 0
    42ca:	50 e0       	ldi	r21, 0x00	; 0
        uint16_t cluster_left = cluster_size - cluster_offset;
        uint32_t pos = cluster_offset;
        if(cluster_num == 0)
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);
    42cc:	ca 01       	movw	r24, r20
    42ce:	b9 01       	movw	r22, r18
    42d0:	6e 0d       	add	r22, r14
    42d2:	7f 1d       	adc	r23, r15
    42d4:	80 1f       	adc	r24, r16
    42d6:	91 1f       	adc	r25, r17

        arg.bytes_read = 0;
    42d8:	1c 82       	std	Y+4, r1	; 0x04
    42da:	1b 82       	std	Y+3, r1	; 0x03
        if(!fs->partition->device_read_interval(pos,
    42dc:	d4 01       	movw	r26, r8
    42de:	ed 91       	ld	r30, X+
    42e0:	fc 91       	ld	r31, X
    42e2:	81 01       	movw	r16, r2
    42e4:	06 19       	sub	r16, r6
    42e6:	17 09       	sbc	r17, r7
    42e8:	02 80       	ldd	r0, Z+2	; 0x02
    42ea:	f3 81       	ldd	r31, Z+3	; 0x03
    42ec:	e0 2d       	mov	r30, r0
    42ee:	ae 01       	movw	r20, r28
    42f0:	4a 5f       	subi	r20, 0xFA	; 250
    42f2:	5f 4f       	sbci	r21, 0xFF	; 255
    42f4:	20 e2       	ldi	r18, 0x20	; 32
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	af e1       	ldi	r26, 0x1F	; 31
    42fa:	ea 2e       	mov	r14, r26
    42fc:	ae e1       	ldi	r26, 0x1E	; 30
    42fe:	fa 2e       	mov	r15, r26
    4300:	6e 01       	movw	r12, r28
    4302:	08 94       	sec
    4304:	c1 1c       	adc	r12, r1
    4306:	d1 1c       	adc	r13, r1
    4308:	09 95       	icall
    430a:	88 23       	and	r24, r24
    430c:	61 f1       	breq	.+88     	; 0x4366 <fat_read_dir+0x1a2>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    430e:	8b 81       	ldd	r24, Y+3	; 0x03
    4310:	9c 81       	ldd	r25, Y+4	; 0x04
    4312:	68 0e       	add	r6, r24
    4314:	79 1e       	adc	r7, r25

        if(cluster_offset >= cluster_size)
    4316:	62 14       	cp	r6, r2
    4318:	73 04       	cpc	r7, r3
    431a:	88 f0       	brcs	.+34     	; 0x433e <fat_read_dir+0x17a>
        {
            /* we reached the cluster border and switch to the next cluster */
            cluster_offset = 0;

            /* get number of next cluster */
            if(!(cluster_num = fat_get_next_cluster(fs, cluster_num)))
    431c:	c4 01       	movw	r24, r8
    431e:	b5 01       	movw	r22, r10
    4320:	0e 94 37 1b 	call	0x366e	; 0x366e <fat_get_next_cluster>
    4324:	5c 01       	movw	r10, r24
    4326:	66 24       	eor	r6, r6
    4328:	77 24       	eor	r7, r7
    432a:	00 97       	sbiw	r24, 0x00	; 0
    432c:	41 f4       	brne	.+16     	; 0x433e <fat_read_dir+0x17a>
            {
                /* directory entry not found, reset directory handle */
                cluster_num = dd->dir_entry.cluster;
    432e:	f2 01       	movw	r30, r4
    4330:	a3 a0       	ldd	r10, Z+35	; 0x23
    4332:	b4 a0       	ldd	r11, Z+36	; 0x24
    4334:	08 c0       	rjmp	.+16     	; 0x4346 <fat_read_dir+0x182>
    /* reset directory entry */
    memset(dir_entry, 0, sizeof(*dir_entry));

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    arg.dir_entry = dir_entry;
    4336:	2e a1       	ldd	r18, Y+38	; 0x26
    4338:	3f a1       	ldd	r19, Y+39	; 0x27
    433a:	3a 83       	std	Y+2, r19	; 0x02
    433c:	29 83       	std	Y+1, r18	; 0x01
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    433e:	8d 81       	ldd	r24, Y+5	; 0x05
    4340:	88 23       	and	r24, r24
    4342:	09 f4       	brne	.+2      	; 0x4346 <fat_read_dir+0x182>
    4344:	8a cf       	rjmp	.-236    	; 0x425a <fat_read_dir+0x96>
                break;
            }
        }
    }

    dd->entry_cluster = cluster_num;
    4346:	d2 01       	movw	r26, r4
    4348:	9e 96       	adiw	r26, 0x2e	; 46
    434a:	bc 92       	st	X, r11
    434c:	ae 92       	st	-X, r10
    434e:	9d 97       	sbiw	r26, 0x2d	; 45
    dd->entry_offset = cluster_offset;
    4350:	d0 96       	adiw	r26, 0x30	; 48
    4352:	7c 92       	st	X, r7
    4354:	6e 92       	st	-X, r6
    4356:	9f 97       	sbiw	r26, 0x2f	; 47

    return dir_entry->long_name[0] != '\0' ? 1 : 0;
    4358:	ee a1       	ldd	r30, Y+38	; 0x26
    435a:	ff a1       	ldd	r31, Y+39	; 0x27
    435c:	80 81       	ld	r24, Z
    435e:	88 23       	and	r24, r24
    4360:	19 f0       	breq	.+6      	; 0x4368 <fat_read_dir+0x1a4>
    4362:	81 e0       	ldi	r24, 0x01	; 1
    4364:	01 c0       	rjmp	.+2      	; 0x4368 <fat_read_dir+0x1a4>
    4366:	80 e0       	ldi	r24, 0x00	; 0
}
    4368:	a7 96       	adiw	r28, 0x27	; 39
    436a:	0f b6       	in	r0, 0x3f	; 63
    436c:	f8 94       	cli
    436e:	de bf       	out	0x3e, r29	; 62
    4370:	0f be       	out	0x3f, r0	; 63
    4372:	cd bf       	out	0x3d, r28	; 61
    4374:	cf 91       	pop	r28
    4376:	df 91       	pop	r29
    4378:	1f 91       	pop	r17
    437a:	0f 91       	pop	r16
    437c:	ff 90       	pop	r15
    437e:	ef 90       	pop	r14
    4380:	df 90       	pop	r13
    4382:	cf 90       	pop	r12
    4384:	bf 90       	pop	r11
    4386:	af 90       	pop	r10
    4388:	9f 90       	pop	r9
    438a:	8f 90       	pop	r8
    438c:	7f 90       	pop	r7
    438e:	6f 90       	pop	r6
    4390:	5f 90       	pop	r5
    4392:	4f 90       	pop	r4
    4394:	3f 90       	pop	r3
    4396:	2f 90       	pop	r2
    4398:	08 95       	ret

0000439a <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
    439a:	2f 92       	push	r2
    439c:	3f 92       	push	r3
    439e:	4f 92       	push	r4
    43a0:	5f 92       	push	r5
    43a2:	6f 92       	push	r6
    43a4:	7f 92       	push	r7
    43a6:	8f 92       	push	r8
    43a8:	9f 92       	push	r9
    43aa:	af 92       	push	r10
    43ac:	bf 92       	push	r11
    43ae:	cf 92       	push	r12
    43b0:	df 92       	push	r13
    43b2:	ef 92       	push	r14
    43b4:	ff 92       	push	r15
    43b6:	0f 93       	push	r16
    43b8:	1f 93       	push	r17
    43ba:	df 93       	push	r29
    43bc:	cf 93       	push	r28
    43be:	cd b7       	in	r28, 0x3d	; 61
    43c0:	de b7       	in	r29, 0x3e	; 62
    43c2:	a8 97       	sbiw	r28, 0x28	; 40
    43c4:	0f b6       	in	r0, 0x3f	; 63
    43c6:	f8 94       	cli
    43c8:	de bf       	out	0x3e, r29	; 62
    43ca:	0f be       	out	0x3f, r0	; 63
    43cc:	cd bf       	out	0x3d, r28	; 61
    43ce:	98 a7       	std	Y+40, r25	; 0x28
    43d0:	8f a3       	std	Y+39, r24	; 0x27
    if(!partition ||
    43d2:	00 97       	sbiw	r24, 0x00	; 0
    43d4:	09 f4       	brne	.+2      	; 0x43d8 <fat_open+0x3e>
    43d6:	36 c1       	rjmp	.+620    	; 0x4644 <fat_open+0x2aa>
    43d8:	dc 01       	movw	r26, r24
    43da:	14 96       	adiw	r26, 0x04	; 4
    43dc:	8d 91       	ld	r24, X+
    43de:	9c 91       	ld	r25, X
    43e0:	15 97       	sbiw	r26, 0x05	; 5
    43e2:	89 2b       	or	r24, r25
    43e4:	09 f4       	brne	.+2      	; 0x43e8 <fat_open+0x4e>
    43e6:	2e c1       	rjmp	.+604    	; 0x4644 <fat_open+0x2aa>
    43e8:	16 96       	adiw	r26, 0x06	; 6
    43ea:	8d 91       	ld	r24, X+
    43ec:	9c 91       	ld	r25, X
    43ee:	17 97       	sbiw	r26, 0x07	; 7
    43f0:	89 2b       	or	r24, r25
    43f2:	09 f4       	brne	.+2      	; 0x43f6 <fat_open+0x5c>
    43f4:	27 c1       	rjmp	.+590    	; 0x4644 <fat_open+0x2aa>
    43f6:	6d c1       	rjmp	.+730    	; 0x46d2 <fat_open+0x338>
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
        return 0;

    uint16_t bytes_per_sector = ltoh16(*((uint16_t*) &buffer[0x00]));
    43f8:	e9 81       	ldd	r30, Y+1	; 0x01
    43fa:	fa 81       	ldd	r31, Y+2	; 0x02
    43fc:	fb a3       	std	Y+35, r31	; 0x23
    43fe:	ea a3       	std	Y+34, r30	; 0x22
    uint16_t reserved_sectors = ltoh16(*((uint16_t*) &buffer[0x03]));
    4400:	2c 81       	ldd	r18, Y+4	; 0x04
    4402:	3d 81       	ldd	r19, Y+5	; 0x05
    uint8_t sectors_per_cluster = buffer[0x02];
    4404:	fb 81       	ldd	r31, Y+3	; 0x03
    4406:	fc a3       	std	Y+36, r31	; 0x24
    uint8_t fat_copies = buffer[0x05];
    4408:	4e 81       	ldd	r20, Y+6	; 0x06
    uint16_t max_root_entries = ltoh16(*((uint16_t*) &buffer[0x06]));
    440a:	8f 81       	ldd	r24, Y+7	; 0x07
    440c:	98 85       	ldd	r25, Y+8	; 0x08
    440e:	9e a3       	std	Y+38, r25	; 0x26
    4410:	8d a3       	std	Y+37, r24	; 0x25
    uint16_t sector_count_16 = ltoh16(*((uint16_t*) &buffer[0x08]));
    4412:	e9 85       	ldd	r30, Y+9	; 0x09
    4414:	fa 85       	ldd	r31, Y+10	; 0x0a
    uint16_t sectors_per_fat = ltoh16(*((uint16_t*) &buffer[0x0b]));
    4416:	6c 85       	ldd	r22, Y+12	; 0x0c
    4418:	7d 85       	ldd	r23, Y+13	; 0x0d
    uint32_t sector_count = ltoh32(*((uint32_t*) &buffer[0x15]));
    441a:	6e 88       	ldd	r6, Y+22	; 0x16
    441c:	7f 88       	ldd	r7, Y+23	; 0x17
    441e:	88 8c       	ldd	r8, Y+24	; 0x18
    4420:	99 8c       	ldd	r9, Y+25	; 0x19
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = ltoh32(*((uint32_t*) &buffer[0x19]));
    uint32_t cluster_root_dir = ltoh32(*((uint32_t*) &buffer[0x21]));
#endif

    if(sector_count == 0)
    4422:	61 14       	cp	r6, r1
    4424:	71 04       	cpc	r7, r1
    4426:	81 04       	cpc	r8, r1
    4428:	91 04       	cpc	r9, r1
    442a:	31 f4       	brne	.+12     	; 0x4438 <fat_open+0x9e>
    {
        if(sector_count_16 == 0)
    442c:	30 97       	sbiw	r30, 0x00	; 0
    442e:	09 f4       	brne	.+2      	; 0x4432 <fat_open+0x98>
    4430:	05 c1       	rjmp	.+522    	; 0x463c <fat_open+0x2a2>
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
    4432:	3f 01       	movw	r6, r30
    4434:	88 24       	eor	r8, r8
    4436:	99 24       	eor	r9, r9
        sectors_per_fat32 = sectors_per_fat;
    else if(sectors_per_fat32 == 0)
        /* this is neither FAT16 nor FAT32 */
        return 0;
#else
    if(sectors_per_fat == 0)
    4438:	61 15       	cp	r22, r1
    443a:	71 05       	cpc	r23, r1
    443c:	09 f4       	brne	.+2      	; 0x4440 <fat_open+0xa6>
    443e:	fe c0       	rjmp	.+508    	; 0x463c <fat_open+0x2a2>
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    4440:	c9 01       	movw	r24, r18
    4442:	a0 e0       	ldi	r26, 0x00	; 0
    4444:	b0 e0       	ldi	r27, 0x00	; 0
    4446:	8e 8f       	std	Y+30, r24	; 0x1e
    4448:	9f 8f       	std	Y+31, r25	; 0x1f
    444a:	a8 a3       	std	Y+32, r26	; 0x20
    444c:	b9 a3       	std	Y+33, r27	; 0x21
    444e:	80 e0       	ldi	r24, 0x00	; 0
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	24 2f       	mov	r18, r20
    4454:	30 e0       	ldi	r19, 0x00	; 0
    4456:	40 e0       	ldi	r20, 0x00	; 0
    4458:	50 e0       	ldi	r21, 0x00	; 0
    445a:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    445e:	6a 8f       	std	Y+26, r22	; 0x1a
    4460:	7b 8f       	std	Y+27, r23	; 0x1b
    4462:	8c 8f       	std	Y+28, r24	; 0x1c
    4464:	9d 8f       	std	Y+29, r25	; 0x1d
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    4466:	84 01       	movw	r16, r8
    4468:	73 01       	movw	r14, r6
    446a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    446c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    446e:	48 a1       	ldd	r20, Y+32	; 0x20
    4470:	59 a1       	ldd	r21, Y+33	; 0x21
    4472:	e2 1a       	sub	r14, r18
    4474:	f3 0a       	sbc	r15, r19
    4476:	04 0b       	sbc	r16, r20
    4478:	15 0b       	sbc	r17, r21
    447a:	e6 1a       	sub	r14, r22
    447c:	f7 0a       	sbc	r15, r23
    447e:	08 0b       	sbc	r16, r24
    4480:	19 0b       	sbc	r17, r25
    4482:	8a a1       	ldd	r24, Y+34	; 0x22
    4484:	9b a1       	ldd	r25, Y+35	; 0x23
    4486:	01 97       	sbiw	r24, 0x01	; 1
    4488:	2d a1       	ldd	r18, Y+37	; 0x25
    448a:	3e a1       	ldd	r19, Y+38	; 0x26
    448c:	45 e0       	ldi	r20, 0x05	; 5
    448e:	22 0f       	add	r18, r18
    4490:	33 1f       	adc	r19, r19
    4492:	4a 95       	dec	r20
    4494:	e1 f7       	brne	.-8      	; 0x448e <fat_open+0xf4>
    4496:	82 0f       	add	r24, r18
    4498:	93 1f       	adc	r25, r19
    449a:	6a a1       	ldd	r22, Y+34	; 0x22
    449c:	7b a1       	ldd	r23, Y+35	; 0x23
    449e:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__udivmodhi4>
    44a2:	80 e0       	ldi	r24, 0x00	; 0
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	e6 1a       	sub	r14, r22
    44a8:	f7 0a       	sbc	r15, r23
    44aa:	08 0b       	sbc	r16, r24
    44ac:	19 0b       	sbc	r17, r25
    44ae:	8c a1       	ldd	r24, Y+36	; 0x24
    44b0:	28 2f       	mov	r18, r24
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	40 e0       	ldi	r20, 0x00	; 0
    44b6:	50 e0       	ldi	r21, 0x00	; 0
    44b8:	c8 01       	movw	r24, r16
    44ba:	b7 01       	movw	r22, r14
    44bc:	0e 94 95 2c 	call	0x592a	; 0x592a <__udivmodsi4>
    44c0:	79 01       	movw	r14, r18
    44c2:	8a 01       	movw	r16, r20
    if(data_cluster_count < 4085)
    44c4:	95 ef       	ldi	r25, 0xF5	; 245
    44c6:	e9 16       	cp	r14, r25
    44c8:	9f e0       	ldi	r25, 0x0F	; 15
    44ca:	f9 06       	cpc	r15, r25
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	09 07       	cpc	r16, r25
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	19 07       	cpc	r17, r25
    44d4:	08 f4       	brcc	.+2      	; 0x44d8 <fat_open+0x13e>
    44d6:	b2 c0       	rjmp	.+356    	; 0x463c <fat_open+0x2a2>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
    44d8:	a5 ef       	ldi	r26, 0xF5	; 245
    44da:	ea 16       	cp	r14, r26
    44dc:	af ef       	ldi	r26, 0xFF	; 255
    44de:	fa 06       	cpc	r15, r26
    44e0:	a0 e0       	ldi	r26, 0x00	; 0
    44e2:	0a 07       	cpc	r16, r26
    44e4:	a0 e0       	ldi	r26, 0x00	; 0
    44e6:	1a 07       	cpc	r17, r26
    44e8:	28 f4       	brcc	.+10     	; 0x44f4 <fat_open+0x15a>
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
    44ea:	86 e0       	ldi	r24, 0x06	; 6
    44ec:	ef a1       	ldd	r30, Y+39	; 0x27
    44ee:	f8 a5       	ldd	r31, Y+40	; 0x28
    44f0:	80 87       	std	Z+8, r24	; 0x08
    44f2:	05 c0       	rjmp	.+10     	; 0x44fe <fat_open+0x164>
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;
    44f4:	8b e0       	ldi	r24, 0x0B	; 11
    44f6:	af a1       	ldd	r26, Y+39	; 0x27
    44f8:	b8 a5       	ldd	r27, Y+40	; 0x28
    44fa:	18 96       	adiw	r26, 0x08	; 8
    44fc:	8c 93       	st	X, r24

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    44fe:	88 e1       	ldi	r24, 0x18	; 24
    4500:	e3 ed       	ldi	r30, 0xD3	; 211
    4502:	f3 e0       	ldi	r31, 0x03	; 3
    4504:	df 01       	movw	r26, r30
    4506:	1d 92       	st	X+, r1
    4508:	8a 95       	dec	r24
    450a:	e9 f7       	brne	.-6      	; 0x4506 <fat_open+0x16c>
    
    header->size = (offset_t) sector_count * bytes_per_sector;
    450c:	ea a1       	ldd	r30, Y+34	; 0x22
    450e:	fb a1       	ldd	r31, Y+35	; 0x23
    4510:	5f 01       	movw	r10, r30
    4512:	cc 24       	eor	r12, r12
    4514:	dd 24       	eor	r13, r13
    4516:	c4 01       	movw	r24, r8
    4518:	b3 01       	movw	r22, r6
    451a:	a6 01       	movw	r20, r12
    451c:	95 01       	movw	r18, r10
    451e:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    4522:	60 93 d3 03 	sts	0x03D3, r22
    4526:	70 93 d4 03 	sts	0x03D4, r23
    452a:	80 93 d5 03 	sts	0x03D5, r24
    452e:	90 93 d6 03 	sts	0x03D6, r25

    header->fat_offset = /* jump to partition */
    4532:	c6 01       	movw	r24, r12
    4534:	b5 01       	movw	r22, r10
    4536:	2e 8d       	ldd	r18, Y+30	; 0x1e
    4538:	3f 8d       	ldd	r19, Y+31	; 0x1f
    453a:	48 a1       	ldd	r20, Y+32	; 0x20
    453c:	59 a1       	ldd	r21, Y+33	; 0x21
    453e:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    4542:	26 0e       	add	r2, r22
    4544:	37 1e       	adc	r3, r23
    4546:	48 1e       	adc	r4, r24
    4548:	59 1e       	adc	r5, r25
    454a:	20 92 d7 03 	sts	0x03D7, r2
    454e:	30 92 d8 03 	sts	0x03D8, r3
    4552:	40 92 d9 03 	sts	0x03D9, r4
    4556:	50 92 da 03 	sts	0x03DA, r5
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    455a:	af a1       	ldd	r26, Y+39	; 0x27
    455c:	b8 a5       	ldd	r27, Y+40	; 0x28
    455e:	18 96       	adiw	r26, 0x08	; 8
    4560:	8c 91       	ld	r24, X
    4562:	86 30       	cpi	r24, 0x06	; 6
    4564:	29 f0       	breq	.+10     	; 0x4570 <fat_open+0x1d6>
    4566:	64 e0       	ldi	r22, 0x04	; 4
    4568:	70 e0       	ldi	r23, 0x00	; 0
    456a:	80 e0       	ldi	r24, 0x00	; 0
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	04 c0       	rjmp	.+8      	; 0x4578 <fat_open+0x1de>
    4570:	62 e0       	ldi	r22, 0x02	; 2
    4572:	70 e0       	ldi	r23, 0x00	; 0
    4574:	80 e0       	ldi	r24, 0x00	; 0
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	22 e0       	ldi	r18, 0x02	; 2
    457a:	30 e0       	ldi	r19, 0x00	; 0
    457c:	40 e0       	ldi	r20, 0x00	; 0
    457e:	50 e0       	ldi	r21, 0x00	; 0
    4580:	e2 0e       	add	r14, r18
    4582:	f3 1e       	adc	r15, r19
    4584:	04 1f       	adc	r16, r20
    4586:	15 1f       	adc	r17, r21
    4588:	a8 01       	movw	r20, r16
    458a:	97 01       	movw	r18, r14
    458c:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    4590:	60 93 db 03 	sts	0x03DB, r22
    4594:	70 93 dc 03 	sts	0x03DC, r23
    4598:	80 93 dd 03 	sts	0x03DD, r24
    459c:	90 93 de 03 	sts	0x03DE, r25

    header->sector_size = bytes_per_sector;
    45a0:	4a a1       	ldd	r20, Y+34	; 0x22
    45a2:	5b a1       	ldd	r21, Y+35	; 0x23
    45a4:	50 93 e0 03 	sts	0x03E0, r21
    45a8:	40 93 df 03 	sts	0x03DF, r20
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
    45ac:	5c a1       	ldd	r21, Y+36	; 0x24
    45ae:	85 2f       	mov	r24, r21
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	dc 01       	movw	r26, r24
    45b4:	ea a1       	ldd	r30, Y+34	; 0x22
    45b6:	fb a1       	ldd	r31, Y+35	; 0x23
    45b8:	ae 9f       	mul	r26, r30
    45ba:	c0 01       	movw	r24, r0
    45bc:	af 9f       	mul	r26, r31
    45be:	90 0d       	add	r25, r0
    45c0:	be 9f       	mul	r27, r30
    45c2:	90 0d       	add	r25, r0
    45c4:	11 24       	eor	r1, r1
    45c6:	90 93 e2 03 	sts	0x03E2, r25
    45ca:	80 93 e1 03 	sts	0x03E1, r24

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
    45ce:	6a 8d       	ldd	r22, Y+26	; 0x1a
    45d0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    45d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    45d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    45d6:	a6 01       	movw	r20, r12
    45d8:	95 01       	movw	r18, r10
    45da:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    45de:	20 91 d7 03 	lds	r18, 0x03D7
    45e2:	30 91 d8 03 	lds	r19, 0x03D8
    45e6:	40 91 d9 03 	lds	r20, 0x03D9
    45ea:	50 91 da 03 	lds	r21, 0x03DA
    45ee:	62 0f       	add	r22, r18
    45f0:	73 1f       	adc	r23, r19
    45f2:	84 1f       	adc	r24, r20
    45f4:	95 1f       	adc	r25, r21
    45f6:	60 93 e7 03 	sts	0x03E7, r22
    45fa:	70 93 e8 03 	sts	0x03E8, r23
    45fe:	80 93 e9 03 	sts	0x03E9, r24
    4602:	90 93 ea 03 	sts	0x03EA, r25
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
    4606:	ad a1       	ldd	r26, Y+37	; 0x25
    4608:	be a1       	ldd	r27, Y+38	; 0x26
    460a:	9d 01       	movw	r18, r26
    460c:	40 e0       	ldi	r20, 0x00	; 0
    460e:	50 e0       	ldi	r21, 0x00	; 0
    4610:	15 e0       	ldi	r17, 0x05	; 5
    4612:	22 0f       	add	r18, r18
    4614:	33 1f       	adc	r19, r19
    4616:	44 1f       	adc	r20, r20
    4618:	55 1f       	adc	r21, r21
    461a:	1a 95       	dec	r17
    461c:	d1 f7       	brne	.-12     	; 0x4612 <fat_open+0x278>
    461e:	62 0f       	add	r22, r18
    4620:	73 1f       	adc	r23, r19
    4622:	84 1f       	adc	r24, r20
    4624:	95 1f       	adc	r25, r21
    4626:	60 93 e3 03 	sts	0x03E3, r22
    462a:	70 93 e4 03 	sts	0x03E4, r23
    462e:	80 93 e5 03 	sts	0x03E5, r24
    4632:	90 93 e6 03 	sts	0x03E6, r25
    4636:	21 ed       	ldi	r18, 0xD1	; 209
    4638:	33 e0       	ldi	r19, 0x03	; 3
    463a:	06 c0       	rjmp	.+12     	; 0x4648 <fat_open+0x2ae>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
    463c:	10 92 d2 03 	sts	0x03D2, r1
    4640:	10 92 d1 03 	sts	0x03D1, r1
#endif
        return 0;
    4644:	20 e0       	ldi	r18, 0x00	; 0
    4646:	30 e0       	ldi	r19, 0x00	; 0
    }
    
    return fs;
}
    4648:	c9 01       	movw	r24, r18
    464a:	a8 96       	adiw	r28, 0x28	; 40
    464c:	0f b6       	in	r0, 0x3f	; 63
    464e:	f8 94       	cli
    4650:	de bf       	out	0x3e, r29	; 62
    4652:	0f be       	out	0x3f, r0	; 63
    4654:	cd bf       	out	0x3d, r28	; 61
    4656:	cf 91       	pop	r28
    4658:	df 91       	pop	r29
    465a:	1f 91       	pop	r17
    465c:	0f 91       	pop	r16
    465e:	ff 90       	pop	r15
    4660:	ef 90       	pop	r14
    4662:	df 90       	pop	r13
    4664:	cf 90       	pop	r12
    4666:	bf 90       	pop	r11
    4668:	af 90       	pop	r10
    466a:	9f 90       	pop	r9
    466c:	8f 90       	pop	r8
    466e:	7f 90       	pop	r7
    4670:	6f 90       	pop	r6
    4672:	5f 90       	pop	r5
    4674:	4f 90       	pop	r4
    4676:	3f 90       	pop	r3
    4678:	2f 90       	pop	r2
    467a:	08 95       	ret
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif

    memset(fs, 0, sizeof(*fs));
    467c:	e1 ed       	ldi	r30, 0xD1	; 209
    467e:	f3 e0       	ldi	r31, 0x03	; 3
    4680:	8a e1       	ldi	r24, 0x1A	; 26
    4682:	df 01       	movw	r26, r30
    4684:	1d 92       	st	X+, r1
    4686:	8a 95       	dec	r24
    4688:	e9 f7       	brne	.-6      	; 0x4684 <fat_open+0x2ea>

    fs->partition = partition;
    468a:	ef a1       	ldd	r30, Y+39	; 0x27
    468c:	f8 a5       	ldd	r31, Y+40	; 0x28
    468e:	f0 93 d2 03 	sts	0x03D2, r31
    4692:	e0 93 d1 03 	sts	0x03D1, r30
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    4696:	21 84       	ldd	r2, Z+9	; 0x09
    4698:	32 84       	ldd	r3, Z+10	; 0x0a
    469a:	43 84       	ldd	r4, Z+11	; 0x0b
    469c:	54 84       	ldd	r5, Z+12	; 0x0c
    469e:	b9 e0       	ldi	r27, 0x09	; 9
    46a0:	22 0c       	add	r2, r2
    46a2:	33 1c       	adc	r3, r3
    46a4:	44 1c       	adc	r4, r4
    46a6:	55 1c       	adc	r5, r5
    46a8:	ba 95       	dec	r27
    46aa:	d1 f7       	brne	.-12     	; 0x46a0 <fat_open+0x306>
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
    46ac:	c2 01       	movw	r24, r4
    46ae:	b1 01       	movw	r22, r2
    46b0:	65 5f       	subi	r22, 0xF5	; 245
    46b2:	7f 4f       	sbci	r23, 0xFF	; 255
    46b4:	8f 4f       	sbci	r24, 0xFF	; 255
    46b6:	9f 4f       	sbci	r25, 0xFF	; 255
    46b8:	01 90       	ld	r0, Z+
    46ba:	f0 81       	ld	r31, Z
    46bc:	e0 2d       	mov	r30, r0
    46be:	ae 01       	movw	r20, r28
    46c0:	4f 5f       	subi	r20, 0xFF	; 255
    46c2:	5f 4f       	sbci	r21, 0xFF	; 255
    46c4:	29 e1       	ldi	r18, 0x19	; 25
    46c6:	30 e0       	ldi	r19, 0x00	; 0
    46c8:	09 95       	icall
    46ca:	88 23       	and	r24, r24
    46cc:	09 f4       	brne	.+2      	; 0x46d0 <fat_open+0x336>
    46ce:	b6 cf       	rjmp	.-148    	; 0x463c <fat_open+0x2a2>
    46d0:	93 ce       	rjmp	.-730    	; 0x43f8 <fat_open+0x5e>
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!fs->partition)
    46d2:	80 91 d1 03 	lds	r24, 0x03D1
    46d6:	90 91 d2 03 	lds	r25, 0x03D2
    46da:	89 2b       	or	r24, r25
    46dc:	09 f0       	breq	.+2      	; 0x46e0 <fat_open+0x346>
    46de:	b2 cf       	rjmp	.-156    	; 0x4644 <fat_open+0x2aa>
    46e0:	cd cf       	rjmp	.-102    	; 0x467c <fat_open+0x2e2>

000046e2 <fat_find_offset_for_dir_entry>:
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(const struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    46e2:	2f 92       	push	r2
    46e4:	3f 92       	push	r3
    46e6:	4f 92       	push	r4
    46e8:	5f 92       	push	r5
    46ea:	6f 92       	push	r6
    46ec:	7f 92       	push	r7
    46ee:	8f 92       	push	r8
    46f0:	9f 92       	push	r9
    46f2:	af 92       	push	r10
    46f4:	bf 92       	push	r11
    46f6:	cf 92       	push	r12
    46f8:	df 92       	push	r13
    46fa:	ef 92       	push	r14
    46fc:	ff 92       	push	r15
    46fe:	0f 93       	push	r16
    4700:	1f 93       	push	r17
    4702:	df 93       	push	r29
    4704:	cf 93       	push	r28
    4706:	00 d0       	rcall	.+0      	; 0x4708 <fat_find_offset_for_dir_entry+0x26>
    4708:	0f 92       	push	r0
    470a:	cd b7       	in	r28, 0x3d	; 61
    470c:	de b7       	in	r29, 0x3e	; 62
    470e:	1c 01       	movw	r2, r24
    4710:	9b 01       	movw	r18, r22
    if(!fs || !dir_entry)
    4712:	00 97       	sbiw	r24, 0x00	; 0
    4714:	09 f4       	brne	.+2      	; 0x4718 <fat_find_offset_for_dir_entry+0x36>
    4716:	d2 c0       	rjmp	.+420    	; 0x48bc <fat_find_offset_for_dir_entry+0x1da>
    4718:	41 15       	cp	r20, r1
    471a:	51 05       	cpc	r21, r1
    471c:	09 f4       	brne	.+2      	; 0x4720 <fat_find_offset_for_dir_entry+0x3e>
    471e:	ce c0       	rjmp	.+412    	; 0x48bc <fat_find_offset_for_dir_entry+0x1da>
        return 0;

    /* search for a place where to write the directory entry to disk */
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    4720:	fa 01       	movw	r30, r20
    4722:	01 90       	ld	r0, Z+
    4724:	00 20       	and	r0, r0
    4726:	e9 f7       	brne	.-6      	; 0x4722 <fat_find_offset_for_dir_entry+0x40>
    4728:	e4 1b       	sub	r30, r20
    472a:	f5 0b       	sbc	r31, r21
    472c:	cf 01       	movw	r24, r30
    472e:	0b 96       	adiw	r24, 0x0b	; 11
    4730:	6d e0       	ldi	r22, 0x0D	; 13
    4732:	70 e0       	ldi	r23, 0x00	; 0
    4734:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__udivmodhi4>
    4738:	86 2f       	mov	r24, r22
    473a:	8f 5f       	subi	r24, 0xFF	; 255
    473c:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t free_dir_entries_found = 0;
    cluster_t cluster_num = parent->dir_entry.cluster;
    473e:	d9 01       	movw	r26, r18
    4740:	93 96       	adiw	r26, 0x23	; 35
    4742:	4d 90       	ld	r4, X+
    4744:	5c 90       	ld	r5, X
    4746:	94 97       	sbiw	r26, 0x24	; 36
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
#endif

    if(cluster_num == 0)
    4748:	41 14       	cp	r4, r1
    474a:	51 04       	cpc	r5, r1
    474c:	51 f0       	breq	.+20     	; 0x4762 <fat_find_offset_for_dir_entry+0x80>
    474e:	aa 24       	eor	r10, r10
    4750:	bb 24       	eor	r11, r11
    4752:	65 01       	movw	r12, r10
    4754:	ee 24       	eor	r14, r14
    4756:	ff 24       	eor	r15, r15
    4758:	87 01       	movw	r16, r14
    475a:	66 24       	eor	r6, r6
    475c:	77 24       	eor	r7, r7
    475e:	43 01       	movw	r8, r6
    4760:	0b c0       	rjmp	.+22     	; 0x4778 <fat_find_offset_for_dir_entry+0x96>
        }
        else
#endif
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
    4762:	f1 01       	movw	r30, r2
    4764:	e6 88       	ldd	r14, Z+22	; 0x16
    4766:	f7 88       	ldd	r15, Z+23	; 0x17
    4768:	00 8d       	ldd	r16, Z+24	; 0x18
    476a:	11 8d       	ldd	r17, Z+25	; 0x19
            offset_to = fs->header.cluster_zero_offset;
    476c:	62 88       	ldd	r6, Z+18	; 0x12
    476e:	73 88       	ldd	r7, Z+19	; 0x13
    4770:	84 88       	ldd	r8, Z+20	; 0x14
    4772:	95 88       	ldd	r9, Z+21	; 0x15
    4774:	57 01       	movw	r10, r14
    4776:	68 01       	movw	r12, r16
    4778:	1a 82       	std	Y+2, r1	; 0x02
        }
    }
    
    while(1)
    {
        if(offset == offset_to)
    477a:	e6 14       	cp	r14, r6
    477c:	f7 04       	cpc	r15, r7
    477e:	08 05       	cpc	r16, r8
    4780:	19 05       	cpc	r17, r9
    4782:	09 f0       	breq	.+2      	; 0x4786 <fat_find_offset_for_dir_entry+0xa4>
    4784:	6e c0       	rjmp	.+220    	; 0x4862 <fat_find_offset_for_dir_entry+0x180>
        {
            if(cluster_num == 0)
    4786:	41 14       	cp	r4, r1
    4788:	51 04       	cpc	r5, r1
    478a:	09 f4       	brne	.+2      	; 0x478e <fat_find_offset_for_dir_entry+0xac>
    478c:	97 c0       	rjmp	.+302    	; 0x48bc <fat_find_offset_for_dir_entry+0x1da>
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;

            if(offset)
    478e:	e1 14       	cp	r14, r1
    4790:	f1 04       	cpc	r15, r1
    4792:	01 05       	cpc	r16, r1
    4794:	11 05       	cpc	r17, r1
    4796:	89 f1       	breq	.+98     	; 0x47fa <fat_find_offset_for_dir_entry+0x118>
            {
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
    4798:	c1 01       	movw	r24, r2
    479a:	b2 01       	movw	r22, r4
    479c:	0e 94 37 1b 	call	0x366e	; 0x366e <fat_get_next_cluster>
                if(!cluster_next)
    47a0:	00 97       	sbiw	r24, 0x00	; 0
    47a2:	51 f5       	brne	.+84     	; 0x47f8 <fat_find_offset_for_dir_entry+0x116>
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
    47a4:	c1 01       	movw	r24, r2
    47a6:	b2 01       	movw	r22, r4
    47a8:	41 e0       	ldi	r20, 0x01	; 1
    47aa:	50 e0       	ldi	r21, 0x00	; 0
    47ac:	0e 94 ef 1b 	call	0x37de	; 0x37de <fat_append_clusters>
    47b0:	8c 01       	movw	r16, r24
                    if(!cluster_next)
    47b2:	00 97       	sbiw	r24, 0x00	; 0
    47b4:	09 f4       	brne	.+2      	; 0x47b8 <fat_find_offset_for_dir_entry+0xd6>
    47b6:	82 c0       	rjmp	.+260    	; 0x48bc <fat_find_offset_for_dir_entry+0x1da>
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
    47b8:	02 50       	subi	r16, 0x02	; 2
    47ba:	10 40       	sbci	r17, 0x00	; 0
    47bc:	b8 01       	movw	r22, r16
    47be:	80 e0       	ldi	r24, 0x00	; 0
    47c0:	90 e0       	ldi	r25, 0x00	; 0
    47c2:	0e 5f       	subi	r16, 0xFE	; 254
    47c4:	1f 4f       	sbci	r17, 0xFF	; 255
    47c6:	d1 01       	movw	r26, r2
    47c8:	50 96       	adiw	r26, 0x10	; 16
    47ca:	2d 91       	ld	r18, X+
    47cc:	3c 91       	ld	r19, X
    47ce:	51 97       	sbiw	r26, 0x11	; 17
    47d0:	40 e0       	ldi	r20, 0x00	; 0
    47d2:	50 e0       	ldi	r21, 0x00	; 0
    47d4:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    47d8:	5b 01       	movw	r10, r22
    47da:	6c 01       	movw	r12, r24
    47dc:	f1 01       	movw	r30, r2
    47de:	82 89       	ldd	r24, Z+18	; 0x12
    47e0:	93 89       	ldd	r25, Z+19	; 0x13
    47e2:	a4 89       	ldd	r26, Z+20	; 0x14
    47e4:	b5 89       	ldd	r27, Z+21	; 0x15
    47e6:	a8 0e       	add	r10, r24
    47e8:	b9 1e       	adc	r11, r25
    47ea:	ca 1e       	adc	r12, r26
    47ec:	db 1e       	adc	r13, r27
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;

                    /* clear cluster to avoid garbage directory entries */
                    fat_clear_cluster(fs, cluster_next);
    47ee:	c1 01       	movw	r24, r2
    47f0:	b8 01       	movw	r22, r16
    47f2:	0e 94 88 20 	call	0x4110	; 0x4110 <fat_clear_cluster>
    47f6:	65 c0       	rjmp	.+202    	; 0x48c2 <fat_find_offset_for_dir_entry+0x1e0>

                    break;
    47f8:	2c 01       	movw	r4, r24
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    47fa:	f2 e0       	ldi	r31, 0x02	; 2
    47fc:	4f 16       	cp	r4, r31
    47fe:	51 04       	cpc	r5, r1
    4800:	20 f4       	brcc	.+8      	; 0x480a <fat_find_offset_for_dir_entry+0x128>
    4802:	ee 24       	eor	r14, r14
    4804:	ff 24       	eor	r15, r15
    4806:	87 01       	movw	r16, r14
    4808:	1d c0       	rjmp	.+58     	; 0x4844 <fat_find_offset_for_dir_entry+0x162>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    480a:	2e ef       	ldi	r18, 0xFE	; 254
    480c:	3f ef       	ldi	r19, 0xFF	; 255
    480e:	42 0e       	add	r4, r18
    4810:	53 1e       	adc	r5, r19
    4812:	b2 01       	movw	r22, r4
    4814:	80 e0       	ldi	r24, 0x00	; 0
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	a2 e0       	ldi	r26, 0x02	; 2
    481a:	b0 e0       	ldi	r27, 0x00	; 0
    481c:	4a 0e       	add	r4, r26
    481e:	5b 1e       	adc	r5, r27
    4820:	f1 01       	movw	r30, r2
    4822:	20 89       	ldd	r18, Z+16	; 0x10
    4824:	31 89       	ldd	r19, Z+17	; 0x11
    4826:	40 e0       	ldi	r20, 0x00	; 0
    4828:	50 e0       	ldi	r21, 0x00	; 0
    482a:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    482e:	7b 01       	movw	r14, r22
    4830:	8c 01       	movw	r16, r24
    4832:	f1 01       	movw	r30, r2
    4834:	82 89       	ldd	r24, Z+18	; 0x12
    4836:	93 89       	ldd	r25, Z+19	; 0x13
    4838:	a4 89       	ldd	r26, Z+20	; 0x14
    483a:	b5 89       	ldd	r27, Z+21	; 0x15
    483c:	e8 0e       	add	r14, r24
    483e:	f9 1e       	adc	r15, r25
    4840:	0a 1f       	adc	r16, r26
    4842:	1b 1f       	adc	r17, r27
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
            offset_to = offset + fs->header.cluster_size;
    4844:	d1 01       	movw	r26, r2
    4846:	50 96       	adiw	r26, 0x10	; 16
    4848:	8d 91       	ld	r24, X+
    484a:	9c 91       	ld	r25, X
    484c:	51 97       	sbiw	r26, 0x11	; 17
    484e:	3c 01       	movw	r6, r24
    4850:	88 24       	eor	r8, r8
    4852:	99 24       	eor	r9, r9
    4854:	6e 0c       	add	r6, r14
    4856:	7f 1c       	adc	r7, r15
    4858:	80 1e       	adc	r8, r16
    485a:	91 1e       	adc	r9, r17
    485c:	57 01       	movw	r10, r14
    485e:	68 01       	movw	r12, r16
    4860:	1a 82       	std	Y+2, r1	; 0x02
            free_dir_entries_found = 0;
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
    4862:	d1 01       	movw	r26, r2
    4864:	ed 91       	ld	r30, X+
    4866:	fc 91       	ld	r31, X
    4868:	01 90       	ld	r0, Z+
    486a:	f0 81       	ld	r31, Z
    486c:	e0 2d       	mov	r30, r0
    486e:	c8 01       	movw	r24, r16
    4870:	b7 01       	movw	r22, r14
    4872:	ae 01       	movw	r20, r28
    4874:	4f 5f       	subi	r20, 0xFF	; 255
    4876:	5f 4f       	sbci	r21, 0xFF	; 255
    4878:	21 e0       	ldi	r18, 0x01	; 1
    487a:	30 e0       	ldi	r19, 0x00	; 0
    487c:	09 95       	icall
    487e:	88 23       	and	r24, r24
    4880:	e9 f0       	breq	.+58     	; 0x48bc <fat_find_offset_for_dir_entry+0x1da>
            return 0;

        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
    4882:	89 81       	ldd	r24, Y+1	; 0x01
    4884:	85 3e       	cpi	r24, 0xE5	; 229
    4886:	11 f0       	breq	.+4      	; 0x488c <fat_find_offset_for_dir_entry+0x1aa>
    4888:	88 23       	and	r24, r24
    488a:	79 f4       	brne	.+30     	; 0x48aa <fat_find_offset_for_dir_entry+0x1c8>
        {
            /* check if we have the needed number of available entries */
            ++free_dir_entries_found;
    488c:	ba 81       	ldd	r27, Y+2	; 0x02
    488e:	bf 5f       	subi	r27, 0xFF	; 255
    4890:	ba 83       	std	Y+2, r27	; 0x02
            if(free_dir_entries_found >= free_dir_entries_needed)
    4892:	eb 81       	ldd	r30, Y+3	; 0x03
    4894:	be 17       	cp	r27, r30
    4896:	a8 f4       	brcc	.+42     	; 0x48c2 <fat_find_offset_for_dir_entry+0x1e0>
                break;

            offset += 32;
    4898:	80 e2       	ldi	r24, 0x20	; 32
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	a0 e0       	ldi	r26, 0x00	; 0
    489e:	b0 e0       	ldi	r27, 0x00	; 0
    48a0:	e8 0e       	add	r14, r24
    48a2:	f9 1e       	adc	r15, r25
    48a4:	0a 1f       	adc	r16, r26
    48a6:	1b 1f       	adc	r17, r27
    48a8:	68 cf       	rjmp	.-304    	; 0x477a <fat_find_offset_for_dir_entry+0x98>
        }
        else
        {
            offset += 32;
    48aa:	80 e2       	ldi	r24, 0x20	; 32
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	a0 e0       	ldi	r26, 0x00	; 0
    48b0:	b0 e0       	ldi	r27, 0x00	; 0
    48b2:	e8 0e       	add	r14, r24
    48b4:	f9 1e       	adc	r15, r25
    48b6:	0a 1f       	adc	r16, r26
    48b8:	1b 1f       	adc	r17, r27
    48ba:	5c cf       	rjmp	.-328    	; 0x4774 <fat_find_offset_for_dir_entry+0x92>
    48bc:	aa 24       	eor	r10, r10
    48be:	bb 24       	eor	r11, r11
    48c0:	65 01       	movw	r12, r10
            free_dir_entries_found = 0;
        }
    }

    return dir_entry_offset;
}
    48c2:	b5 01       	movw	r22, r10
    48c4:	c6 01       	movw	r24, r12
    48c6:	0f 90       	pop	r0
    48c8:	0f 90       	pop	r0
    48ca:	0f 90       	pop	r0
    48cc:	cf 91       	pop	r28
    48ce:	df 91       	pop	r29
    48d0:	1f 91       	pop	r17
    48d2:	0f 91       	pop	r16
    48d4:	ff 90       	pop	r15
    48d6:	ef 90       	pop	r14
    48d8:	df 90       	pop	r13
    48da:	cf 90       	pop	r12
    48dc:	bf 90       	pop	r11
    48de:	af 90       	pop	r10
    48e0:	9f 90       	pop	r9
    48e2:	8f 90       	pop	r8
    48e4:	7f 90       	pop	r7
    48e6:	6f 90       	pop	r6
    48e8:	5f 90       	pop	r5
    48ea:	4f 90       	pop	r4
    48ec:	3f 90       	pop	r3
    48ee:	2f 90       	pop	r2
    48f0:	08 95       	ret

000048f2 <fat_write_dir_entry>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    48f2:	2f 92       	push	r2
    48f4:	3f 92       	push	r3
    48f6:	4f 92       	push	r4
    48f8:	5f 92       	push	r5
    48fa:	6f 92       	push	r6
    48fc:	7f 92       	push	r7
    48fe:	8f 92       	push	r8
    4900:	9f 92       	push	r9
    4902:	af 92       	push	r10
    4904:	bf 92       	push	r11
    4906:	cf 92       	push	r12
    4908:	df 92       	push	r13
    490a:	ef 92       	push	r14
    490c:	ff 92       	push	r15
    490e:	0f 93       	push	r16
    4910:	1f 93       	push	r17
    4912:	df 93       	push	r29
    4914:	cf 93       	push	r28
    4916:	cd b7       	in	r28, 0x3d	; 61
    4918:	de b7       	in	r29, 0x3e	; 62
    491a:	a0 97       	sbiw	r28, 0x20	; 32
    491c:	0f b6       	in	r0, 0x3f	; 63
    491e:	f8 94       	cli
    4920:	de bf       	out	0x3e, r29	; 62
    4922:	0f be       	out	0x3f, r0	; 63
    4924:	cd bf       	out	0x3d, r28	; 61
    4926:	fc 01       	movw	r30, r24
    4928:	8b 01       	movw	r16, r22
    if(!fs || !dir_entry)
    492a:	00 97       	sbiw	r24, 0x00	; 0
    492c:	09 f4       	brne	.+2      	; 0x4930 <fat_write_dir_entry+0x3e>
    492e:	26 c1       	rjmp	.+588    	; 0x4b7c <fat_write_dir_entry+0x28a>
    4930:	61 15       	cp	r22, r1
    4932:	71 05       	cpc	r23, r1
    4934:	09 f4       	brne	.+2      	; 0x4938 <fat_write_dir_entry+0x46>
    4936:	22 c1       	rjmp	.+580    	; 0x4b7c <fat_write_dir_entry+0x28a>
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
    4938:	01 90       	ld	r0, Z+
    493a:	f0 81       	ld	r31, Z
    493c:	e0 2d       	mov	r30, r0
    493e:	24 80       	ldd	r2, Z+4	; 0x04
    4940:	35 80       	ldd	r3, Z+5	; 0x05
    offset_t offset = dir_entry->entry_offset;
    4942:	db 01       	movw	r26, r22
    4944:	97 96       	adiw	r26, 0x27	; 39
    4946:	ad 90       	ld	r10, X+
    4948:	bd 90       	ld	r11, X+
    494a:	cd 90       	ld	r12, X+
    494c:	dc 90       	ld	r13, X
    494e:	9a 97       	sbiw	r26, 0x2a	; 42
    const char* name = dir_entry->long_name;
    4950:	e6 2e       	mov	r14, r22
    4952:	91 2e       	mov	r9, r17
    uint8_t name_len = strlen(name);
    4954:	fb 01       	movw	r30, r22
    4956:	01 90       	ld	r0, Z+
    4958:	00 20       	and	r0, r0
    495a:	e9 f7       	brne	.-6      	; 0x4956 <fat_write_dir_entry+0x64>
    495c:	31 97       	sbiw	r30, 0x01	; 1
    495e:	fe 2e       	mov	r15, r30
    4960:	f6 1a       	sub	r15, r22
    uint8_t lfn_entry_count = (name_len + 12) / 13;
    4962:	8f 2d       	mov	r24, r15
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	0c 96       	adiw	r24, 0x0c	; 12
    4968:	6d e0       	ldi	r22, 0x0D	; 13
    496a:	70 e0       	ldi	r23, 0x00	; 0
    496c:	0e 94 82 2c 	call	0x5904	; 0x5904 <__divmodhi4>
    4970:	76 2e       	mov	r7, r22
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
    4972:	ce 01       	movw	r24, r28
    4974:	01 96       	adiw	r24, 0x01	; 1
    4976:	60 e2       	ldi	r22, 0x20	; 32
    4978:	70 e0       	ldi	r23, 0x00	; 0
    497a:	4b e0       	ldi	r20, 0x0B	; 11
    497c:	50 e0       	ldi	r21, 0x00	; 0
    497e:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <memset>
    char* name_ext = strrchr(name, '.');
    4982:	c8 01       	movw	r24, r16
    4984:	6e e2       	ldi	r22, 0x2E	; 46
    4986:	70 e0       	ldi	r23, 0x00	; 0
    4988:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <strrchr>
    498c:	fc 01       	movw	r30, r24
    if(name_ext && *++name_ext)
    498e:	00 97       	sbiw	r24, 0x00	; 0
    4990:	e1 f0       	breq	.+56     	; 0x49ca <fat_write_dir_entry+0xd8>
    4992:	9c 01       	movw	r18, r24
    4994:	2f 5f       	subi	r18, 0xFF	; 255
    4996:	3f 4f       	sbci	r19, 0xFF	; 255
    4998:	81 81       	ldd	r24, Z+1	; 0x01
    499a:	88 23       	and	r24, r24
    499c:	b1 f0       	breq	.+44     	; 0x49ca <fat_write_dir_entry+0xd8>
    {
        uint8_t name_ext_len = strlen(name_ext);
    499e:	d9 01       	movw	r26, r18
    49a0:	0d 90       	ld	r0, X+
    49a2:	00 20       	and	r0, r0
    49a4:	e9 f7       	brne	.-6      	; 0x49a0 <fat_write_dir_entry+0xae>
    49a6:	11 97       	sbiw	r26, 0x01	; 1
    49a8:	a2 1b       	sub	r26, r18
    49aa:	b3 0b       	sbc	r27, r19
        name_len -= name_ext_len + 1;
    49ac:	8a 2f       	mov	r24, r26
    49ae:	80 95       	com	r24
    49b0:	f8 0e       	add	r15, r24

        if(name_ext_len > 3)
            name_ext_len = 3;
        
        memcpy(&buffer[8], name_ext, name_ext_len);
    49b2:	be 01       	movw	r22, r28
    49b4:	67 5f       	subi	r22, 0xF7	; 247
    49b6:	7f 4f       	sbci	r23, 0xFF	; 255
    49b8:	4a 2f       	mov	r20, r26
    49ba:	a4 30       	cpi	r26, 0x04	; 4
    49bc:	08 f0       	brcs	.+2      	; 0x49c0 <fat_write_dir_entry+0xce>
    49be:	43 e0       	ldi	r20, 0x03	; 3
    49c0:	cb 01       	movw	r24, r22
    49c2:	b9 01       	movw	r22, r18
    49c4:	50 e0       	ldi	r21, 0x00	; 0
    49c6:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <memcpy>
    49ca:	ce 01       	movw	r24, r28
    49cc:	01 96       	adiw	r24, 0x01	; 1
    }
    
    if(name_len <= 8)
    49ce:	b8 e0       	ldi	r27, 0x08	; 8
    49d0:	bf 15       	cp	r27, r15
    49d2:	88 f0       	brcs	.+34     	; 0x49f6 <fat_write_dir_entry+0x104>
    {
        memcpy(buffer, name, name_len);
    49d4:	6e 2d       	mov	r22, r14
    49d6:	79 2d       	mov	r23, r9
    49d8:	4f 2d       	mov	r20, r15
    49da:	50 e0       	ldi	r21, 0x00	; 0
    49dc:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <memcpy>
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
    49e0:	f8 01       	movw	r30, r16
    49e2:	80 81       	ld	r24, Z
    49e4:	8e 32       	cpi	r24, 0x2E	; 46
    49e6:	31 f5       	brne	.+76     	; 0x4a34 <fat_write_dir_entry+0x142>
    49e8:	81 81       	ldd	r24, Z+1	; 0x01
    49ea:	8e 32       	cpi	r24, 0x2E	; 46
    49ec:	09 f4       	brne	.+2      	; 0x49f0 <fat_write_dir_entry+0xfe>
    49ee:	82 81       	ldd	r24, Z+2	; 0x02
    49f0:	88 23       	and	r24, r24
    49f2:	f9 f0       	breq	.+62     	; 0x4a32 <fat_write_dir_entry+0x140>
    49f4:	1f c0       	rjmp	.+62     	; 0x4a34 <fat_write_dir_entry+0x142>
          )
            lfn_entry_count = 0;
    }
    else
    {
        memcpy(buffer, name, 8);
    49f6:	dc 01       	movw	r26, r24
    49f8:	8e 2d       	mov	r24, r14
    49fa:	99 2d       	mov	r25, r9
    49fc:	9c 01       	movw	r18, r24
    49fe:	f9 01       	movw	r30, r18
    4a00:	88 e0       	ldi	r24, 0x08	; 8
    4a02:	01 90       	ld	r0, Z+
    4a04:	0d 92       	st	X+, r0
    4a06:	81 50       	subi	r24, 0x01	; 1
    4a08:	e1 f7       	brne	.-8      	; 0x4a02 <fat_write_dir_entry+0x110>

        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;
    4a0a:	d8 01       	movw	r26, r16
    4a0c:	91 96       	adiw	r26, 0x21	; 33
    4a0e:	8c 91       	ld	r24, X
    4a10:	98 2f       	mov	r25, r24
    4a12:	92 95       	swap	r25
    4a14:	9f 70       	andi	r25, 0x0F	; 15

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    4a16:	80 3a       	cpi	r24, 0xA0	; 160
    4a18:	10 f4       	brcc	.+4      	; 0x4a1e <fat_write_dir_entry+0x12c>
    4a1a:	90 5d       	subi	r25, 0xD0	; 208
    4a1c:	01 c0       	rjmp	.+2      	; 0x4a20 <fat_write_dir_entry+0x12e>
    4a1e:	9f 59       	subi	r25, 0x9F	; 159
        num &= 0x0f;
    4a20:	8f 70       	andi	r24, 0x0F	; 15
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    4a22:	8a 30       	cpi	r24, 0x0A	; 10
    4a24:	10 f4       	brcc	.+4      	; 0x4a2a <fat_write_dir_entry+0x138>
    4a26:	80 5d       	subi	r24, 0xD0	; 208
    4a28:	01 c0       	rjmp	.+2      	; 0x4a2c <fat_write_dir_entry+0x13a>
    4a2a:	8f 59       	subi	r24, 0x9F	; 159
        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    4a2c:	9f 83       	std	Y+7, r25	; 0x07
        num &= 0x0f;
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    4a2e:	88 87       	std	Y+8, r24	; 0x08
    4a30:	01 c0       	rjmp	.+2      	; 0x4a34 <fat_write_dir_entry+0x142>
    4a32:	77 24       	eor	r7, r7
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
    4a34:	89 81       	ldd	r24, Y+1	; 0x01
    4a36:	85 3e       	cpi	r24, 0xE5	; 229
    4a38:	11 f4       	brne	.+4      	; 0x4a3e <fat_write_dir_entry+0x14c>
        buffer[0] = 0x05;
    4a3a:	85 e0       	ldi	r24, 0x05	; 5
    4a3c:	89 83       	std	Y+1, r24	; 0x01

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
    4a3e:	fc e0       	ldi	r31, 0x0C	; 12
    4a40:	8f 2e       	mov	r8, r31
    4a42:	91 2c       	mov	r9, r1
    4a44:	8c 0e       	add	r8, r28
    4a46:	9d 1e       	adc	r9, r29
    4a48:	85 e1       	ldi	r24, 0x15	; 21
    4a4a:	f4 01       	movw	r30, r8
    4a4c:	11 92       	st	Z+, r1
    4a4e:	8a 95       	dec	r24
    4a50:	e9 f7       	brne	.-6      	; 0x4a4c <fat_write_dir_entry+0x15a>
    buffer[0x0b] = dir_entry->attributes;
    4a52:	d8 01       	movw	r26, r16
    4a54:	90 96       	adiw	r26, 0x20	; 32
    4a56:	8c 91       	ld	r24, X
    4a58:	90 97       	sbiw	r26, 0x20	; 32
    4a5a:	8c 87       	std	Y+12, r24	; 0x0c
    *((uint16_t*) &buffer[0x18]) = htol16(dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    *((uint16_t*) &buffer[0x14]) = htol16((uint16_t) (dir_entry->cluster >> 16));
#endif
    *((uint16_t*) &buffer[0x1a]) = htol16(dir_entry->cluster);
    4a5c:	91 96       	adiw	r26, 0x21	; 33
    4a5e:	8d 91       	ld	r24, X+
    4a60:	9c 91       	ld	r25, X
    4a62:	92 97       	sbiw	r26, 0x22	; 34
    4a64:	9c 8f       	std	Y+28, r25	; 0x1c
    4a66:	8b 8f       	std	Y+27, r24	; 0x1b
    *((uint32_t*) &buffer[0x1c]) = htol32(dir_entry->file_size);
    4a68:	93 96       	adiw	r26, 0x23	; 35
    4a6a:	8d 91       	ld	r24, X+
    4a6c:	9d 91       	ld	r25, X+
    4a6e:	0d 90       	ld	r0, X+
    4a70:	bc 91       	ld	r27, X
    4a72:	a0 2d       	mov	r26, r0
    4a74:	8d 8f       	std	Y+29, r24	; 0x1d
    4a76:	9e 8f       	std	Y+30, r25	; 0x1e
    4a78:	af 8f       	std	Y+31, r26	; 0x1f
    4a7a:	b8 a3       	std	Y+32, r27	; 0x20

    /* write to disk */
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
    4a7c:	67 2d       	mov	r22, r7
    4a7e:	70 e0       	ldi	r23, 0x00	; 0
    4a80:	e5 e0       	ldi	r30, 0x05	; 5
    4a82:	66 0f       	add	r22, r22
    4a84:	77 1f       	adc	r23, r23
    4a86:	ea 95       	dec	r30
    4a88:	e1 f7       	brne	.-8      	; 0x4a82 <fat_write_dir_entry+0x190>
    4a8a:	80 e0       	ldi	r24, 0x00	; 0
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	6a 0d       	add	r22, r10
    4a90:	7b 1d       	adc	r23, r11
    4a92:	8c 1d       	adc	r24, r12
    4a94:	9d 1d       	adc	r25, r13
    4a96:	ae 01       	movw	r20, r28
    4a98:	4f 5f       	subi	r20, 0xFF	; 255
    4a9a:	5f 4f       	sbci	r21, 0xFF	; 255
    4a9c:	20 e2       	ldi	r18, 0x20	; 32
    4a9e:	30 e0       	ldi	r19, 0x00	; 0
    4aa0:	f1 01       	movw	r30, r2
    4aa2:	09 95       	icall
    4aa4:	88 23       	and	r24, r24
    4aa6:	09 f4       	brne	.+2      	; 0x4aaa <fat_write_dir_entry+0x1b8>
    4aa8:	69 c0       	rjmp	.+210    	; 0x4b7c <fat_write_dir_entry+0x28a>
        return 0;
    
    /* calculate checksum of 8.3 name */
    uint8_t checksum = buffer[0];
    4aaa:	e9 80       	ldd	r14, Y+1	; 0x01
    4aac:	fe 01       	movw	r30, r28
    4aae:	32 96       	adiw	r30, 0x02	; 2
    for(uint8_t i = 1; i < 11; ++i)
    4ab0:	94 01       	movw	r18, r8
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    4ab2:	8e 2d       	mov	r24, r14
    4ab4:	86 95       	lsr	r24
    4ab6:	e7 94       	ror	r14
    4ab8:	ee 24       	eor	r14, r14
    4aba:	e7 94       	ror	r14
    4abc:	e8 2a       	or	r14, r24
    4abe:	81 91       	ld	r24, Z+
    4ac0:	e8 0e       	add	r14, r24
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
        return 0;
    
    /* calculate checksum of 8.3 name */
    uint8_t checksum = buffer[0];
    for(uint8_t i = 1; i < 11; ++i)
    4ac2:	e2 17       	cp	r30, r18
    4ac4:	f3 07       	cpc	r31, r19
    4ac6:	a9 f7       	brne	.-22     	; 0x4ab2 <fat_write_dir_entry+0x1c0>
    4ac8:	f7 2c       	mov	r15, r7
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    4aca:	4e 01       	movw	r8, r28
    4acc:	08 94       	sec
    4ace:	81 1c       	adc	r8, r1
    4ad0:	91 1c       	adc	r9, r1
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    4ad2:	6d e0       	ldi	r22, 0x0D	; 13
    4ad4:	46 2e       	mov	r4, r22
    4ad6:	51 2c       	mov	r5, r1
        buffer[0x00] = lfn_entry;
        if(lfn_entry == lfn_entry_count)
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    4ad8:	5f e0       	ldi	r21, 0x0F	; 15
    4ada:	65 2e       	mov	r6, r21
    4adc:	4a c0       	rjmp	.+148    	; 0x4b72 <fat_write_dir_entry+0x280>
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    4ade:	c4 01       	movw	r24, r8
    4ae0:	6f ef       	ldi	r22, 0xFF	; 255
    4ae2:	70 e0       	ldi	r23, 0x00	; 0
    4ae4:	40 e2       	ldi	r20, 0x20	; 32
    4ae6:	50 e0       	ldi	r21, 0x00	; 0
    4ae8:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <memset>
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    4aec:	8f 2d       	mov	r24, r15
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	01 97       	sbiw	r24, 0x01	; 1
    4af2:	84 9d       	mul	r24, r4
    4af4:	d0 01       	movw	r26, r0
    4af6:	85 9d       	mul	r24, r5
    4af8:	b0 0d       	add	r27, r0
    4afa:	94 9d       	mul	r25, r4
    4afc:	b0 0d       	add	r27, r0
    4afe:	11 24       	eor	r1, r1
    4b00:	a0 0f       	add	r26, r16
    4b02:	b1 1f       	adc	r27, r17
    4b04:	91 e0       	ldi	r25, 0x01	; 1
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
    4b06:	f4 01       	movw	r30, r8
    4b08:	e9 0f       	add	r30, r25
    4b0a:	f1 1d       	adc	r31, r1
    4b0c:	8c 91       	ld	r24, X
    4b0e:	80 83       	st	Z, r24
    4b10:	89 2f       	mov	r24, r25
    4b12:	8f 5f       	subi	r24, 0xFF	; 255
            buffer[i++] = 0;
    4b14:	f4 01       	movw	r30, r8
    4b16:	e8 0f       	add	r30, r24
    4b18:	f1 1d       	adc	r31, r1
    4b1a:	10 82       	st	Z, r1
    4b1c:	9e 5f       	subi	r25, 0xFE	; 254

            switch(i)
    4b1e:	9b 30       	cpi	r25, 0x0B	; 11
    4b20:	19 f0       	breq	.+6      	; 0x4b28 <fat_write_dir_entry+0x236>
    4b22:	9a 31       	cpi	r25, 0x1A	; 26
    4b24:	21 f4       	brne	.+8      	; 0x4b2e <fat_write_dir_entry+0x23c>
    4b26:	02 c0       	rjmp	.+4      	; 0x4b2c <fat_write_dir_entry+0x23a>
    4b28:	9e e0       	ldi	r25, 0x0E	; 14
    4b2a:	01 c0       	rjmp	.+2      	; 0x4b2e <fat_write_dir_entry+0x23c>
    4b2c:	9c e1       	ldi	r25, 0x1C	; 28
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    4b2e:	8c 91       	ld	r24, X
    4b30:	88 23       	and	r24, r24
    4b32:	21 f0       	breq	.+8      	; 0x4b3c <fat_write_dir_entry+0x24a>
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
    4b34:	9f 31       	cpi	r25, 0x1F	; 31
    4b36:	10 f4       	brcc	.+4      	; 0x4b3c <fat_write_dir_entry+0x24a>
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    4b38:	11 96       	adiw	r26, 0x01	; 1
    4b3a:	e5 cf       	rjmp	.-54     	; 0x4b06 <fat_write_dir_entry+0x214>
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
    4b3c:	f9 82       	std	Y+1, r15	; 0x01
        if(lfn_entry == lfn_entry_count)
    4b3e:	f7 14       	cp	r15, r7
    4b40:	19 f4       	brne	.+6      	; 0x4b48 <fat_write_dir_entry+0x256>
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
    4b42:	8f 2d       	mov	r24, r15
    4b44:	80 64       	ori	r24, 0x40	; 64
    4b46:	89 83       	std	Y+1, r24	; 0x01

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    4b48:	6c 86       	std	Y+12, r6	; 0x0c

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
    4b4a:	ee 86       	std	Y+14, r14	; 0x0e

        /* clear reserved bytes */
        buffer[0x0c] = 0;
    4b4c:	1d 86       	std	Y+13, r1	; 0x0d
        buffer[0x1a] = 0;
    4b4e:	1b 8e       	std	Y+27, r1	; 0x1b
        buffer[0x1b] = 0;
    4b50:	1c 8e       	std	Y+28, r1	; 0x1c

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
    4b52:	c6 01       	movw	r24, r12
    4b54:	b5 01       	movw	r22, r10
    4b56:	a4 01       	movw	r20, r8
    4b58:	20 e2       	ldi	r18, 0x20	; 32
    4b5a:	30 e0       	ldi	r19, 0x00	; 0
    4b5c:	f1 01       	movw	r30, r2
    4b5e:	09 95       	icall
    
        offset += sizeof(buffer);
    4b60:	80 e2       	ldi	r24, 0x20	; 32
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	a0 e0       	ldi	r26, 0x00	; 0
    4b66:	b0 e0       	ldi	r27, 0x00	; 0
    4b68:	a8 0e       	add	r10, r24
    4b6a:	b9 1e       	adc	r11, r25
    4b6c:	ca 1e       	adc	r12, r26
    4b6e:	db 1e       	adc	r13, r27
    uint8_t checksum = buffer[0];
    for(uint8_t i = 1; i < 11; ++i)
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    4b70:	fa 94       	dec	r15
    4b72:	ff 20       	and	r15, r15
    4b74:	09 f0       	breq	.+2      	; 0x4b78 <fat_write_dir_entry+0x286>
    4b76:	b3 cf       	rjmp	.-154    	; 0x4ade <fat_write_dir_entry+0x1ec>
    4b78:	81 e0       	ldi	r24, 0x01	; 1
    4b7a:	01 c0       	rjmp	.+2      	; 0x4b7e <fat_write_dir_entry+0x28c>
    4b7c:	80 e0       	ldi	r24, 0x00	; 0
    
        offset += sizeof(buffer);
    }
    
    return 1;
}
    4b7e:	a0 96       	adiw	r28, 0x20	; 32
    4b80:	0f b6       	in	r0, 0x3f	; 63
    4b82:	f8 94       	cli
    4b84:	de bf       	out	0x3e, r29	; 62
    4b86:	0f be       	out	0x3f, r0	; 63
    4b88:	cd bf       	out	0x3d, r28	; 61
    4b8a:	cf 91       	pop	r28
    4b8c:	df 91       	pop	r29
    4b8e:	1f 91       	pop	r17
    4b90:	0f 91       	pop	r16
    4b92:	ff 90       	pop	r15
    4b94:	ef 90       	pop	r14
    4b96:	df 90       	pop	r13
    4b98:	cf 90       	pop	r12
    4b9a:	bf 90       	pop	r11
    4b9c:	af 90       	pop	r10
    4b9e:	9f 90       	pop	r9
    4ba0:	8f 90       	pop	r8
    4ba2:	7f 90       	pop	r7
    4ba4:	6f 90       	pop	r6
    4ba6:	5f 90       	pop	r5
    4ba8:	4f 90       	pop	r4
    4baa:	3f 90       	pop	r3
    4bac:	2f 90       	pop	r2
    4bae:	08 95       	ret

00004bb0 <fat_create_dir>:
 * \param[out] dir_entry The directory entry to fill for the new directory.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_dir
 */
uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct* dir_entry)
{
    4bb0:	7f 92       	push	r7
    4bb2:	8f 92       	push	r8
    4bb4:	9f 92       	push	r9
    4bb6:	af 92       	push	r10
    4bb8:	bf 92       	push	r11
    4bba:	cf 92       	push	r12
    4bbc:	df 92       	push	r13
    4bbe:	ef 92       	push	r14
    4bc0:	ff 92       	push	r15
    4bc2:	0f 93       	push	r16
    4bc4:	1f 93       	push	r17
    4bc6:	cf 93       	push	r28
    4bc8:	df 93       	push	r29
    4bca:	6c 01       	movw	r12, r24
    4bcc:	5b 01       	movw	r10, r22
    4bce:	ea 01       	movw	r28, r20
    if(!parent || !dir || !dir[0] || !dir_entry)
    4bd0:	00 97       	sbiw	r24, 0x00	; 0
    4bd2:	09 f4       	brne	.+2      	; 0x4bd6 <fat_create_dir+0x26>
    4bd4:	9d c0       	rjmp	.+314    	; 0x4d10 <fat_create_dir+0x160>
    4bd6:	61 15       	cp	r22, r1
    4bd8:	71 05       	cpc	r23, r1
    4bda:	09 f4       	brne	.+2      	; 0x4bde <fat_create_dir+0x2e>
    4bdc:	99 c0       	rjmp	.+306    	; 0x4d10 <fat_create_dir+0x160>
    4bde:	fb 01       	movw	r30, r22
    4be0:	80 81       	ld	r24, Z
    4be2:	88 23       	and	r24, r24
    4be4:	09 f4       	brne	.+2      	; 0x4be8 <fat_create_dir+0x38>
    4be6:	94 c0       	rjmp	.+296    	; 0x4d10 <fat_create_dir+0x160>
    4be8:	41 15       	cp	r20, r1
    4bea:	51 05       	cpc	r21, r1
    4bec:	81 f4       	brne	.+32     	; 0x4c0e <fat_create_dir+0x5e>
    4bee:	90 c0       	rjmp	.+288    	; 0x4d10 <fat_create_dir+0x160>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    4bf0:	c5 01       	movw	r24, r10
    4bf2:	68 2d       	mov	r22, r8
    4bf4:	77 2d       	mov	r23, r7
    4bf6:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <strcmp>
    4bfa:	00 97       	sbiw	r24, 0x00	; 0
    4bfc:	51 f4       	brne	.+20     	; 0x4c12 <fat_create_dir+0x62>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    4bfe:	f6 01       	movw	r30, r12
    4c00:	83 a1       	ldd	r24, Z+35	; 0x23
    4c02:	94 a1       	ldd	r25, Z+36	; 0x24
    4c04:	96 a7       	std	Z+46, r25	; 0x2e
    4c06:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
    4c08:	10 aa       	std	Z+48, r1	; 0x30
    4c0a:	17 a6       	std	Z+47, r1	; 0x2f
    4c0c:	81 c0       	rjmp	.+258    	; 0x4d10 <fat_create_dir+0x160>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    4c0e:	84 2e       	mov	r8, r20
    4c10:	7d 2e       	mov	r7, r29
{
    if(!parent || !dir || !dir[0] || !dir_entry)
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    4c12:	c6 01       	movw	r24, r12
    4c14:	be 01       	movw	r22, r28
    4c16:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <fat_read_dir>
    4c1a:	88 23       	and	r24, r24
    4c1c:	49 f7       	brne	.-46     	; 0x4bf0 <fat_create_dir+0x40>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    4c1e:	f6 01       	movw	r30, r12
    4c20:	e0 80       	ld	r14, Z
    4c22:	f1 80       	ldd	r15, Z+1	; 0x01

    /* allocate cluster which will hold directory entries */
    cluster_t dir_cluster = fat_append_clusters(fs, 0, 1);
    4c24:	c7 01       	movw	r24, r14
    4c26:	60 e0       	ldi	r22, 0x00	; 0
    4c28:	70 e0       	ldi	r23, 0x00	; 0
    4c2a:	41 e0       	ldi	r20, 0x01	; 1
    4c2c:	50 e0       	ldi	r21, 0x00	; 0
    4c2e:	0e 94 ef 1b 	call	0x37de	; 0x37de <fat_append_clusters>
    4c32:	8c 01       	movw	r16, r24
    if(!dir_cluster)
    4c34:	00 97       	sbiw	r24, 0x00	; 0
    4c36:	09 f4       	brne	.+2      	; 0x4c3a <fat_create_dir+0x8a>
    4c38:	6b c0       	rjmp	.+214    	; 0x4d10 <fat_create_dir+0x160>
        return 0;

    /* clear cluster to prevent bogus directory entries */
    fat_clear_cluster(fs, dir_cluster);
    4c3a:	c7 01       	movw	r24, r14
    4c3c:	b8 01       	movw	r22, r16
    4c3e:	0e 94 88 20 	call	0x4110	; 0x4110 <fat_clear_cluster>
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    4c42:	8b e2       	ldi	r24, 0x2B	; 43
    4c44:	fe 01       	movw	r30, r28
    4c46:	11 92       	st	Z+, r1
    4c48:	8a 95       	dec	r24
    4c4a:	e9 f7       	brne	.-6      	; 0x4c46 <fat_create_dir+0x96>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    4c4c:	80 e1       	ldi	r24, 0x10	; 16
    4c4e:	88 a3       	std	Y+32, r24	; 0x20

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
    4c50:	02 50       	subi	r16, 0x02	; 2
    4c52:	10 40       	sbci	r17, 0x00	; 0
    4c54:	b8 01       	movw	r22, r16
    4c56:	80 e0       	ldi	r24, 0x00	; 0
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	0e 5f       	subi	r16, 0xFE	; 254
    4c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c5e:	f7 01       	movw	r30, r14
    4c60:	20 89       	ldd	r18, Z+16	; 0x10
    4c62:	31 89       	ldd	r19, Z+17	; 0x11
    4c64:	40 e0       	ldi	r20, 0x00	; 0
    4c66:	50 e0       	ldi	r21, 0x00	; 0
    4c68:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    4c6c:	f7 01       	movw	r30, r14
    4c6e:	22 89       	ldd	r18, Z+18	; 0x12
    4c70:	33 89       	ldd	r19, Z+19	; 0x13
    4c72:	44 89       	ldd	r20, Z+20	; 0x14
    4c74:	55 89       	ldd	r21, Z+21	; 0x15
    4c76:	26 0f       	add	r18, r22
    4c78:	37 1f       	adc	r19, r23
    4c7a:	48 1f       	adc	r20, r24
    4c7c:	59 1f       	adc	r21, r25
    4c7e:	2f a3       	std	Y+39, r18	; 0x27
    4c80:	38 a7       	std	Y+40, r19	; 0x28
    4c82:	49 a7       	std	Y+41, r20	; 0x29
    4c84:	5a a7       	std	Y+42, r21	; 0x2a
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    dir_entry->long_name[0] = '.';
    4c86:	ae e2       	ldi	r26, 0x2E	; 46
    4c88:	9a 2e       	mov	r9, r26
    4c8a:	98 82       	st	Y, r9
    dir_entry->cluster = dir_cluster;
    4c8c:	1a a3       	std	Y+34, r17	; 0x22
    4c8e:	09 a3       	std	Y+33, r16	; 0x21
    if(!fat_write_dir_entry(fs, dir_entry))
    4c90:	c7 01       	movw	r24, r14
    4c92:	be 01       	movw	r22, r28
    4c94:	0e 94 79 24 	call	0x48f2	; 0x48f2 <fat_write_dir_entry>
    4c98:	88 23       	and	r24, r24
    4c9a:	b1 f1       	breq	.+108    	; 0x4d08 <fat_create_dir+0x158>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* create ".." parent directory reference */
    dir_entry->entry_offset += 32;
    4c9c:	8f a1       	ldd	r24, Y+39	; 0x27
    4c9e:	98 a5       	ldd	r25, Y+40	; 0x28
    4ca0:	a9 a5       	ldd	r26, Y+41	; 0x29
    4ca2:	ba a5       	ldd	r27, Y+42	; 0x2a
    4ca4:	80 96       	adiw	r24, 0x20	; 32
    4ca6:	a1 1d       	adc	r26, r1
    4ca8:	b1 1d       	adc	r27, r1
    4caa:	8f a3       	std	Y+39, r24	; 0x27
    4cac:	98 a7       	std	Y+40, r25	; 0x28
    4cae:	a9 a7       	std	Y+41, r26	; 0x29
    4cb0:	ba a7       	std	Y+42, r27	; 0x2a
    dir_entry->long_name[1] = '.';
    4cb2:	99 82       	std	Y+1, r9	; 0x01
    dir_entry->cluster = parent->dir_entry.cluster;
    4cb4:	f6 01       	movw	r30, r12
    4cb6:	83 a1       	ldd	r24, Z+35	; 0x23
    4cb8:	94 a1       	ldd	r25, Z+36	; 0x24
    4cba:	9a a3       	std	Y+34, r25	; 0x22
    4cbc:	89 a3       	std	Y+33, r24	; 0x21
    if(!fat_write_dir_entry(fs, dir_entry))
    4cbe:	c7 01       	movw	r24, r14
    4cc0:	be 01       	movw	r22, r28
    4cc2:	0e 94 79 24 	call	0x48f2	; 0x48f2 <fat_write_dir_entry>
    4cc6:	88 23       	and	r24, r24
    4cc8:	f9 f0       	breq	.+62     	; 0x4d08 <fat_create_dir+0x158>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* fill directory entry */
    strncpy(dir_entry->long_name, dir, sizeof(dir_entry->long_name) - 1);
    4cca:	88 2d       	mov	r24, r8
    4ccc:	97 2d       	mov	r25, r7
    4cce:	b5 01       	movw	r22, r10
    4cd0:	4f e1       	ldi	r20, 0x1F	; 31
    4cd2:	50 e0       	ldi	r21, 0x00	; 0
    4cd4:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <strncpy>
    dir_entry->cluster = dir_cluster;
    4cd8:	1a a3       	std	Y+34, r17	; 0x22
    4cda:	09 a3       	std	Y+33, r16	; 0x21

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    4cdc:	c7 01       	movw	r24, r14
    4cde:	b6 01       	movw	r22, r12
    4ce0:	ae 01       	movw	r20, r28
    4ce2:	0e 94 71 23 	call	0x46e2	; 0x46e2 <fat_find_offset_for_dir_entry>
    4ce6:	6f a3       	std	Y+39, r22	; 0x27
    4ce8:	78 a7       	std	Y+40, r23	; 0x28
    4cea:	89 a7       	std	Y+41, r24	; 0x29
    4cec:	9a a7       	std	Y+42, r25	; 0x2a
    4cee:	61 15       	cp	r22, r1
    4cf0:	71 05       	cpc	r23, r1
    4cf2:	81 05       	cpc	r24, r1
    4cf4:	91 05       	cpc	r25, r1
    4cf6:	41 f0       	breq	.+16     	; 0x4d08 <fat_create_dir+0x158>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* write directory to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    4cf8:	c7 01       	movw	r24, r14
    4cfa:	be 01       	movw	r22, r28
    4cfc:	0e 94 79 24 	call	0x48f2	; 0x48f2 <fat_write_dir_entry>
    4d00:	88 23       	and	r24, r24
    4d02:	11 f0       	breq	.+4      	; 0x4d08 <fat_create_dir+0x158>
    4d04:	81 e0       	ldi	r24, 0x01	; 1
    4d06:	05 c0       	rjmp	.+10     	; 0x4d12 <fat_create_dir+0x162>
    {
        fat_free_clusters(fs, dir_cluster);
    4d08:	c7 01       	movw	r24, r14
    4d0a:	b8 01       	movw	r22, r16
    4d0c:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <fat_free_clusters>
        return 0;
    4d10:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    4d12:	df 91       	pop	r29
    4d14:	cf 91       	pop	r28
    4d16:	1f 91       	pop	r17
    4d18:	0f 91       	pop	r16
    4d1a:	ff 90       	pop	r15
    4d1c:	ef 90       	pop	r14
    4d1e:	df 90       	pop	r13
    4d20:	cf 90       	pop	r12
    4d22:	bf 90       	pop	r11
    4d24:	af 90       	pop	r10
    4d26:	9f 90       	pop	r9
    4d28:	8f 90       	pop	r8
    4d2a:	7f 90       	pop	r7
    4d2c:	08 95       	ret

00004d2e <fat_create_file>:
 * \param[out] dir_entry The directory entry to fill for the new file.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    4d2e:	af 92       	push	r10
    4d30:	bf 92       	push	r11
    4d32:	cf 92       	push	r12
    4d34:	df 92       	push	r13
    4d36:	ef 92       	push	r14
    4d38:	ff 92       	push	r15
    4d3a:	0f 93       	push	r16
    4d3c:	1f 93       	push	r17
    4d3e:	cf 93       	push	r28
    4d40:	df 93       	push	r29
    4d42:	8c 01       	movw	r16, r24
    4d44:	7b 01       	movw	r14, r22
    4d46:	ea 01       	movw	r28, r20
    if(!parent || !file || !file[0] || !dir_entry)
    4d48:	00 97       	sbiw	r24, 0x00	; 0
    4d4a:	09 f4       	brne	.+2      	; 0x4d4e <fat_create_file+0x20>
    4d4c:	48 c0       	rjmp	.+144    	; 0x4dde <fat_create_file+0xb0>
    4d4e:	61 15       	cp	r22, r1
    4d50:	71 05       	cpc	r23, r1
    4d52:	09 f4       	brne	.+2      	; 0x4d56 <fat_create_file+0x28>
    4d54:	44 c0       	rjmp	.+136    	; 0x4dde <fat_create_file+0xb0>
    4d56:	fb 01       	movw	r30, r22
    4d58:	80 81       	ld	r24, Z
    4d5a:	88 23       	and	r24, r24
    4d5c:	09 f4       	brne	.+2      	; 0x4d60 <fat_create_file+0x32>
    4d5e:	3f c0       	rjmp	.+126    	; 0x4dde <fat_create_file+0xb0>
    4d60:	41 15       	cp	r20, r1
    4d62:	51 05       	cpc	r21, r1
    4d64:	e1 f1       	breq	.+120    	; 0x4dde <fat_create_file+0xb0>
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    4d66:	b4 2e       	mov	r11, r20
    4d68:	ad 2e       	mov	r10, r29
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
    4d6a:	c8 01       	movw	r24, r16
    4d6c:	be 01       	movw	r22, r28
    4d6e:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <fat_read_dir>
    4d72:	88 23       	and	r24, r24
    4d74:	79 f0       	breq	.+30     	; 0x4d94 <fat_create_file+0x66>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    4d76:	c7 01       	movw	r24, r14
    4d78:	6b 2d       	mov	r22, r11
    4d7a:	7a 2d       	mov	r23, r10
    4d7c:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <strcmp>
    4d80:	00 97       	sbiw	r24, 0x00	; 0
    4d82:	99 f7       	brne	.-26     	; 0x4d6a <fat_create_file+0x3c>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    4d84:	f8 01       	movw	r30, r16
    4d86:	83 a1       	ldd	r24, Z+35	; 0x23
    4d88:	94 a1       	ldd	r25, Z+36	; 0x24
    4d8a:	96 a7       	std	Z+46, r25	; 0x2e
    4d8c:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
    4d8e:	10 aa       	std	Z+48, r1	; 0x30
    4d90:	17 a6       	std	Z+47, r1	; 0x2f
    4d92:	25 c0       	rjmp	.+74     	; 0x4dde <fat_create_file+0xb0>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    4d94:	f8 01       	movw	r30, r16
    4d96:	c0 80       	ld	r12, Z
    4d98:	d1 80       	ldd	r13, Z+1	; 0x01

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    4d9a:	8b e2       	ldi	r24, 0x2B	; 43
    4d9c:	fe 01       	movw	r30, r28
    4d9e:	11 92       	st	Z+, r1
    4da0:	8a 95       	dec	r24
    4da2:	e9 f7       	brne	.-6      	; 0x4d9e <fat_create_file+0x70>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    4da4:	8b 2d       	mov	r24, r11
    4da6:	9a 2d       	mov	r25, r10
    4da8:	b7 01       	movw	r22, r14
    4daa:	4f e1       	ldi	r20, 0x1F	; 31
    4dac:	50 e0       	ldi	r21, 0x00	; 0
    4dae:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <strncpy>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    4db2:	c6 01       	movw	r24, r12
    4db4:	b8 01       	movw	r22, r16
    4db6:	ae 01       	movw	r20, r28
    4db8:	0e 94 71 23 	call	0x46e2	; 0x46e2 <fat_find_offset_for_dir_entry>
    4dbc:	6f a3       	std	Y+39, r22	; 0x27
    4dbe:	78 a7       	std	Y+40, r23	; 0x28
    4dc0:	89 a7       	std	Y+41, r24	; 0x29
    4dc2:	9a a7       	std	Y+42, r25	; 0x2a
    4dc4:	61 15       	cp	r22, r1
    4dc6:	71 05       	cpc	r23, r1
    4dc8:	81 05       	cpc	r24, r1
    4dca:	91 05       	cpc	r25, r1
    4dcc:	41 f0       	breq	.+16     	; 0x4dde <fat_create_file+0xb0>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    4dce:	c6 01       	movw	r24, r12
    4dd0:	be 01       	movw	r22, r28
    4dd2:	0e 94 79 24 	call	0x48f2	; 0x48f2 <fat_write_dir_entry>
    4dd6:	88 23       	and	r24, r24
    4dd8:	19 f0       	breq	.+6      	; 0x4de0 <fat_create_file+0xb2>
    4dda:	81 e0       	ldi	r24, 0x01	; 1
    4ddc:	01 c0       	rjmp	.+2      	; 0x4de0 <fat_create_file+0xb2>
    4dde:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    
    return 1;
}
    4de0:	df 91       	pop	r29
    4de2:	cf 91       	pop	r28
    4de4:	1f 91       	pop	r17
    4de6:	0f 91       	pop	r16
    4de8:	ff 90       	pop	r15
    4dea:	ef 90       	pop	r14
    4dec:	df 90       	pop	r13
    4dee:	cf 90       	pop	r12
    4df0:	bf 90       	pop	r11
    4df2:	af 90       	pop	r10
    4df4:	08 95       	ret

00004df6 <fat_resize_file>:
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    4df6:	4f 92       	push	r4
    4df8:	5f 92       	push	r5
    4dfa:	6f 92       	push	r6
    4dfc:	7f 92       	push	r7
    4dfe:	8f 92       	push	r8
    4e00:	9f 92       	push	r9
    4e02:	af 92       	push	r10
    4e04:	bf 92       	push	r11
    4e06:	cf 92       	push	r12
    4e08:	df 92       	push	r13
    4e0a:	ef 92       	push	r14
    4e0c:	ff 92       	push	r15
    4e0e:	0f 93       	push	r16
    4e10:	1f 93       	push	r17
    4e12:	df 93       	push	r29
    4e14:	cf 93       	push	r28
    4e16:	cd b7       	in	r28, 0x3d	; 61
    4e18:	de b7       	in	r29, 0x3e	; 62
    4e1a:	2a 97       	sbiw	r28, 0x0a	; 10
    4e1c:	0f b6       	in	r0, 0x3f	; 63
    4e1e:	f8 94       	cli
    4e20:	de bf       	out	0x3e, r29	; 62
    4e22:	0f be       	out	0x3f, r0	; 63
    4e24:	cd bf       	out	0x3d, r28	; 61
    4e26:	2c 01       	movw	r4, r24
    4e28:	5a 01       	movw	r10, r20
    4e2a:	6b 01       	movw	r12, r22
    if(!fd)
    4e2c:	00 97       	sbiw	r24, 0x00	; 0
    4e2e:	09 f4       	brne	.+2      	; 0x4e32 <fat_resize_file+0x3c>
    4e30:	e5 c0       	rjmp	.+458    	; 0x4ffc <fat_resize_file+0x206>
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    4e32:	dc 01       	movw	r26, r24
    4e34:	93 96       	adiw	r26, 0x23	; 35
    4e36:	0d 91       	ld	r16, X+
    4e38:	1c 91       	ld	r17, X
    4e3a:	94 97       	sbiw	r26, 0x24	; 36
    uint16_t cluster_size = fd->fs->header.cluster_size;
    4e3c:	ed 91       	ld	r30, X+
    4e3e:	fc 91       	ld	r31, X
    4e40:	20 89       	ldd	r18, Z+16	; 0x10
    4e42:	31 89       	ldd	r19, Z+17	; 0x11
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    4e44:	01 15       	cp	r16, r1
    4e46:	11 05       	cpc	r17, r1
    4e48:	99 f0       	breq	.+38     	; 0x4e70 <fat_resize_file+0x7a>
    4e4a:	ab 82       	std	Y+3, r10	; 0x03
    4e4c:	bc 82       	std	Y+4, r11	; 0x04
    4e4e:	cd 82       	std	Y+5, r12	; 0x05
    4e50:	de 82       	std	Y+6, r13	; 0x06
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    4e52:	39 01       	movw	r6, r18
    4e54:	88 24       	eor	r8, r8
    4e56:	99 24       	eor	r9, r9
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    4e58:	22 27       	eor	r18, r18
    4e5a:	33 27       	eor	r19, r19
    4e5c:	a9 01       	movw	r20, r18
    4e5e:	26 19       	sub	r18, r6
    4e60:	37 09       	sbc	r19, r7
    4e62:	48 09       	sbc	r20, r8
    4e64:	59 09       	sbc	r21, r9
    4e66:	2f 83       	std	Y+7, r18	; 0x07
    4e68:	38 87       	std	Y+8, r19	; 0x08
    4e6a:	49 87       	std	Y+9, r20	; 0x09
    4e6c:	5a 87       	std	Y+10, r21	; 0x0a
    4e6e:	20 c0       	rjmp	.+64     	; 0x4eb0 <fat_resize_file+0xba>
    uint16_t cluster_size = fd->fs->header.cluster_size;
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    4e70:	41 15       	cp	r20, r1
    4e72:	51 05       	cpc	r21, r1
    4e74:	61 05       	cpc	r22, r1
    4e76:	71 05       	cpc	r23, r1
    4e78:	09 f4       	brne	.+2      	; 0x4e7c <fat_resize_file+0x86>
    4e7a:	a9 c0       	rjmp	.+338    	; 0x4fce <fat_resize_file+0x1d8>
    4e7c:	e6 cf       	rjmp	.-52     	; 0x4e4a <fat_resize_file+0x54>

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    4e7e:	d2 01       	movw	r26, r4
    4e80:	8d 91       	ld	r24, X+
    4e82:	9c 91       	ld	r25, X
    4e84:	b8 01       	movw	r22, r16
    4e86:	0e 94 37 1b 	call	0x366e	; 0x366e <fat_get_next_cluster>
            if(cluster_num_next)
    4e8a:	00 97       	sbiw	r24, 0x00	; 0
    4e8c:	d9 f0       	breq	.+54     	; 0x4ec4 <fat_resize_file+0xce>
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    4e8e:	eb 80       	ldd	r14, Y+3	; 0x03
    4e90:	fc 80       	ldd	r15, Y+4	; 0x04
    4e92:	0d 81       	ldd	r16, Y+5	; 0x05
    4e94:	1e 81       	ldd	r17, Y+6	; 0x06
    4e96:	2f 81       	ldd	r18, Y+7	; 0x07
    4e98:	38 85       	ldd	r19, Y+8	; 0x08
    4e9a:	49 85       	ldd	r20, Y+9	; 0x09
    4e9c:	5a 85       	ldd	r21, Y+10	; 0x0a
    4e9e:	e2 0e       	add	r14, r18
    4ea0:	f3 1e       	adc	r15, r19
    4ea2:	04 1f       	adc	r16, r20
    4ea4:	15 1f       	adc	r17, r21
    4ea6:	eb 82       	std	Y+3, r14	; 0x03
    4ea8:	fc 82       	std	Y+4, r15	; 0x04
    4eaa:	0d 83       	std	Y+5, r16	; 0x05
    4eac:	1e 83       	std	Y+6, r17	; 0x06
    4eae:	8c 01       	movw	r16, r24
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    4eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    4eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    4eb4:	ad 81       	ldd	r26, Y+5	; 0x05
    4eb6:	be 81       	ldd	r27, Y+6	; 0x06
    4eb8:	68 16       	cp	r6, r24
    4eba:	79 06       	cpc	r7, r25
    4ebc:	8a 06       	cpc	r8, r26
    4ebe:	9b 06       	cpc	r9, r27
    4ec0:	f0 f2       	brcs	.-68     	; 0x4e7e <fat_resize_file+0x88>
    4ec2:	b4 c0       	rjmp	.+360    	; 0x502c <fat_resize_file+0x236>
    4ec4:	78 01       	movw	r14, r16
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    4ec6:	6b 81       	ldd	r22, Y+3	; 0x03
    4ec8:	7c 81       	ldd	r23, Y+4	; 0x04
    4eca:	8d 81       	ldd	r24, Y+5	; 0x05
    4ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    4ece:	66 0d       	add	r22, r6
    4ed0:	77 1d       	adc	r23, r7
    4ed2:	88 1d       	adc	r24, r8
    4ed4:	99 1d       	adc	r25, r9
    4ed6:	61 50       	subi	r22, 0x01	; 1
    4ed8:	70 40       	sbci	r23, 0x00	; 0
    4eda:	80 40       	sbci	r24, 0x00	; 0
    4edc:	90 40       	sbci	r25, 0x00	; 0
    4ede:	a4 01       	movw	r20, r8
    4ee0:	93 01       	movw	r18, r6
    4ee2:	0e 94 95 2c 	call	0x592a	; 0x592a <__udivmodsi4>
    4ee6:	d2 01       	movw	r26, r4
    4ee8:	8d 91       	ld	r24, X+
    4eea:	9c 91       	ld	r25, X
    4eec:	b8 01       	movw	r22, r16
    4eee:	a9 01       	movw	r20, r18
    4ef0:	0e 94 ef 1b 	call	0x37de	; 0x37de <fat_append_clusters>
            if(!cluster_new_chain)
    4ef4:	00 97       	sbiw	r24, 0x00	; 0
    4ef6:	09 f4       	brne	.+2      	; 0x4efa <fat_resize_file+0x104>
    4ef8:	81 c0       	rjmp	.+258    	; 0x4ffc <fat_resize_file+0x206>
                return 0;

            if(!cluster_num)
    4efa:	01 2b       	or	r16, r17
    4efc:	21 f4       	brne	.+8      	; 0x4f06 <fat_resize_file+0x110>
            {
                cluster_num = cluster_new_chain;
                fd->dir_entry.cluster = cluster_num;
    4efe:	f2 01       	movw	r30, r4
    4f00:	94 a3       	std	Z+36, r25	; 0x24
    4f02:	83 a3       	std	Z+35, r24	; 0x23
    4f04:	7c 01       	movw	r14, r24
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
    4f06:	d2 01       	movw	r26, r4
    4f08:	95 96       	adiw	r26, 0x25	; 37
    4f0a:	ad 92       	st	X+, r10
    4f0c:	bd 92       	st	X+, r11
    4f0e:	cd 92       	st	X+, r12
    4f10:	dc 92       	st	X, r13
    4f12:	98 97       	sbiw	r26, 0x28	; 40
        if(size == 0)
    4f14:	a1 14       	cp	r10, r1
    4f16:	b1 04       	cpc	r11, r1
    4f18:	c1 04       	cpc	r12, r1
    4f1a:	d1 04       	cpc	r13, r1
    4f1c:	21 f4       	brne	.+8      	; 0x4f26 <fat_resize_file+0x130>
            fd->dir_entry.cluster = 0;
    4f1e:	94 96       	adiw	r26, 0x24	; 36
    4f20:	1c 92       	st	X, r1
    4f22:	1e 92       	st	-X, r1
    4f24:	93 97       	sbiw	r26, 0x23	; 35
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    4f26:	f2 01       	movw	r30, r4
    4f28:	81 91       	ld	r24, Z+
    4f2a:	91 91       	ld	r25, Z+
    4f2c:	bf 01       	movw	r22, r30
    4f2e:	0e 94 79 24 	call	0x48f2	; 0x48f2 <fat_write_dir_entry>
    4f32:	88 23       	and	r24, r24
    4f34:	09 f4       	brne	.+2      	; 0x4f38 <fat_resize_file+0x142>
    4f36:	62 c0       	rjmp	.+196    	; 0x4ffc <fat_resize_file+0x206>
            return 0;

        if(size == 0)
    4f38:	a1 14       	cp	r10, r1
    4f3a:	b1 04       	cpc	r11, r1
    4f3c:	c1 04       	cpc	r12, r1
    4f3e:	d1 04       	cpc	r13, r1
    4f40:	29 f4       	brne	.+10     	; 0x4f4c <fat_resize_file+0x156>
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
    4f42:	f2 01       	movw	r30, r4
    4f44:	80 81       	ld	r24, Z
    4f46:	91 81       	ldd	r25, Z+1	; 0x01
    4f48:	b7 01       	movw	r22, r14
    4f4a:	3f c0       	rjmp	.+126    	; 0x4fca <fat_resize_file+0x1d4>
        }
        else if(size_new <= cluster_size)
    4f4c:	0b 81       	ldd	r16, Y+3	; 0x03
    4f4e:	1c 81       	ldd	r17, Y+4	; 0x04
    4f50:	2d 81       	ldd	r18, Y+5	; 0x05
    4f52:	3e 81       	ldd	r19, Y+6	; 0x06
    4f54:	60 16       	cp	r6, r16
    4f56:	71 06       	cpc	r7, r17
    4f58:	82 06       	cpc	r8, r18
    4f5a:	93 06       	cpc	r9, r19
    4f5c:	c0 f1       	brcs	.+112    	; 0x4fce <fat_resize_file+0x1d8>
        {
            /* free all clusters no longer needed */
            fat_terminate_clusters(fd->fs, cluster_num);
    4f5e:	d2 01       	movw	r26, r4
    4f60:	0d 91       	ld	r16, X+
    4f62:	1c 91       	ld	r17, X
 * \returns 0 on failure, 1 on success.
 * \see fat_free_clusters
 */
uint8_t fat_terminate_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    4f64:	01 15       	cp	r16, r1
    4f66:	11 05       	cpc	r17, r1
    4f68:	91 f1       	breq	.+100    	; 0x4fce <fat_resize_file+0x1d8>
    4f6a:	b2 e0       	ldi	r27, 0x02	; 2
    4f6c:	eb 16       	cp	r14, r27
    4f6e:	f1 04       	cpc	r15, r1
    4f70:	70 f1       	brcs	.+92     	; 0x4fce <fat_resize_file+0x1d8>
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
    4f72:	c8 01       	movw	r24, r16
    4f74:	b7 01       	movw	r22, r14
    4f76:	0e 94 37 1b 	call	0x366e	; 0x366e <fat_get_next_cluster>
    4f7a:	4c 01       	movw	r8, r24
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
    4f7c:	8f ef       	ldi	r24, 0xFF	; 255
    4f7e:	9f ef       	ldi	r25, 0xFF	; 255
    4f80:	9a 83       	std	Y+2, r25	; 0x02
    4f82:	89 83       	std	Y+1, r24	; 0x01
        if(!fs->partition->device_write(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    4f84:	d8 01       	movw	r26, r16
    4f86:	ed 91       	ld	r30, X+
    4f88:	fc 91       	ld	r31, X
    4f8a:	11 97       	sbiw	r26, 0x01	; 1
    4f8c:	ee 0c       	add	r14, r14
    4f8e:	ff 1c       	adc	r15, r15
    4f90:	b7 01       	movw	r22, r14
    4f92:	80 e0       	ldi	r24, 0x00	; 0
    4f94:	90 e0       	ldi	r25, 0x00	; 0
    4f96:	16 96       	adiw	r26, 0x06	; 6
    4f98:	2d 91       	ld	r18, X+
    4f9a:	3d 91       	ld	r19, X+
    4f9c:	4d 91       	ld	r20, X+
    4f9e:	5c 91       	ld	r21, X
    4fa0:	19 97       	sbiw	r26, 0x09	; 9
    4fa2:	62 0f       	add	r22, r18
    4fa4:	73 1f       	adc	r23, r19
    4fa6:	84 1f       	adc	r24, r20
    4fa8:	95 1f       	adc	r25, r21
    4faa:	04 80       	ldd	r0, Z+4	; 0x04
    4fac:	f5 81       	ldd	r31, Z+5	; 0x05
    4fae:	e0 2d       	mov	r30, r0
    4fb0:	ae 01       	movw	r20, r28
    4fb2:	4f 5f       	subi	r20, 0xFF	; 255
    4fb4:	5f 4f       	sbci	r21, 0xFF	; 255
    4fb6:	22 e0       	ldi	r18, 0x02	; 2
    4fb8:	30 e0       	ldi	r19, 0x00	; 0
    4fba:	09 95       	icall
    4fbc:	88 23       	and	r24, r24
    4fbe:	39 f0       	breq	.+14     	; 0x4fce <fat_resize_file+0x1d8>
            return 0;
    }

    /* free remaining clusters */
    if(cluster_num_next)
    4fc0:	81 14       	cp	r8, r1
    4fc2:	91 04       	cpc	r9, r1
    4fc4:	21 f0       	breq	.+8      	; 0x4fce <fat_resize_file+0x1d8>
        return fat_free_clusters(fs, cluster_num_next);
    4fc6:	c8 01       	movw	r24, r16
    4fc8:	b4 01       	movw	r22, r8
    4fca:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <fat_free_clusters>
        }

    } while(0);

    /* correct file position */
    if(size < fd->pos)
    4fce:	f2 01       	movw	r30, r4
    4fd0:	85 a5       	ldd	r24, Z+45	; 0x2d
    4fd2:	96 a5       	ldd	r25, Z+46	; 0x2e
    4fd4:	a7 a5       	ldd	r26, Z+47	; 0x2f
    4fd6:	b0 a9       	ldd	r27, Z+48	; 0x30
    4fd8:	a8 16       	cp	r10, r24
    4fda:	b9 06       	cpc	r11, r25
    4fdc:	ca 06       	cpc	r12, r26
    4fde:	db 06       	cpc	r13, r27
    4fe0:	58 f4       	brcc	.+22     	; 0x4ff8 <fat_resize_file+0x202>
    {
        fd->pos = size;
    4fe2:	d2 01       	movw	r26, r4
    4fe4:	9d 96       	adiw	r26, 0x2d	; 45
    4fe6:	ad 92       	st	X+, r10
    4fe8:	bd 92       	st	X+, r11
    4fea:	cd 92       	st	X+, r12
    4fec:	dc 92       	st	X, r13
    4fee:	d0 97       	sbiw	r26, 0x30	; 48
        fd->pos_cluster = 0;
    4ff0:	d2 96       	adiw	r26, 0x32	; 50
    4ff2:	1c 92       	st	X, r1
    4ff4:	1e 92       	st	-X, r1
    4ff6:	d1 97       	sbiw	r26, 0x31	; 49
    4ff8:	81 e0       	ldi	r24, 0x01	; 1
    4ffa:	01 c0       	rjmp	.+2      	; 0x4ffe <fat_resize_file+0x208>
    4ffc:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    4ffe:	2a 96       	adiw	r28, 0x0a	; 10
    5000:	0f b6       	in	r0, 0x3f	; 63
    5002:	f8 94       	cli
    5004:	de bf       	out	0x3e, r29	; 62
    5006:	0f be       	out	0x3f, r0	; 63
    5008:	cd bf       	out	0x3d, r28	; 61
    500a:	cf 91       	pop	r28
    500c:	df 91       	pop	r29
    500e:	1f 91       	pop	r17
    5010:	0f 91       	pop	r16
    5012:	ff 90       	pop	r15
    5014:	ef 90       	pop	r14
    5016:	df 90       	pop	r13
    5018:	cf 90       	pop	r12
    501a:	bf 90       	pop	r11
    501c:	af 90       	pop	r10
    501e:	9f 90       	pop	r9
    5020:	8f 90       	pop	r8
    5022:	7f 90       	pop	r7
    5024:	6f 90       	pop	r6
    5026:	5f 90       	pop	r5
    5028:	4f 90       	pop	r4
    502a:	08 95       	ret

    /* correct file position */
    if(size < fd->pos)
    {
        fd->pos = size;
        fd->pos_cluster = 0;
    502c:	78 01       	movw	r14, r16
            {
                break;
            }
        }

        if(size_new > cluster_size || cluster_num == 0)
    502e:	01 15       	cp	r16, r1
    5030:	11 05       	cpc	r17, r1
    5032:	09 f4       	brne	.+2      	; 0x5036 <fat_resize_file+0x240>
    5034:	48 cf       	rjmp	.-368    	; 0x4ec6 <fat_resize_file+0xd0>
    5036:	67 cf       	rjmp	.-306    	; 0x4f06 <fat_resize_file+0x110>

00005038 <fat_seek_file>:
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    5038:	cf 92       	push	r12
    503a:	df 92       	push	r13
    503c:	ef 92       	push	r14
    503e:	ff 92       	push	r15
    5040:	0f 93       	push	r16
    5042:	1f 93       	push	r17
    5044:	cf 93       	push	r28
    5046:	df 93       	push	r29
    5048:	ec 01       	movw	r28, r24
    504a:	6b 01       	movw	r12, r22
    if(!fd || !offset)
    504c:	00 97       	sbiw	r24, 0x00	; 0
    504e:	09 f4       	brne	.+2      	; 0x5052 <fat_seek_file+0x1a>
    5050:	45 c0       	rjmp	.+138    	; 0x50dc <fat_seek_file+0xa4>
    5052:	61 15       	cp	r22, r1
    5054:	71 05       	cpc	r23, r1
    5056:	09 f4       	brne	.+2      	; 0x505a <fat_seek_file+0x22>
    5058:	41 c0       	rjmp	.+130    	; 0x50dc <fat_seek_file+0xa4>
        return 0;

    uint32_t new_pos = fd->pos;
    505a:	8d a5       	ldd	r24, Y+45	; 0x2d
    505c:	9e a5       	ldd	r25, Y+46	; 0x2e
    505e:	af a5       	ldd	r26, Y+47	; 0x2f
    5060:	b8 a9       	ldd	r27, Y+48	; 0x30
    switch(whence)
    5062:	41 30       	cpi	r20, 0x01	; 1
    5064:	59 f0       	breq	.+22     	; 0x507c <fat_seek_file+0x44>
    5066:	41 30       	cpi	r20, 0x01	; 1
    5068:	18 f0       	brcs	.+6      	; 0x5070 <fat_seek_file+0x38>
    506a:	42 30       	cpi	r20, 0x02	; 2
    506c:	b9 f5       	brne	.+110    	; 0x50dc <fat_seek_file+0xa4>
    506e:	0c c0       	rjmp	.+24     	; 0x5088 <fat_seek_file+0x50>
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
    5070:	fb 01       	movw	r30, r22
    5072:	e0 80       	ld	r14, Z
    5074:	f1 80       	ldd	r15, Z+1	; 0x01
    5076:	02 81       	ldd	r16, Z+2	; 0x02
    5078:	13 81       	ldd	r17, Z+3	; 0x03
    507a:	13 c0       	rjmp	.+38     	; 0x50a2 <fat_seek_file+0x6a>
            break;
        case FAT_SEEK_CUR:
            new_pos += *offset;
    507c:	fb 01       	movw	r30, r22
    507e:	e0 80       	ld	r14, Z
    5080:	f1 80       	ldd	r15, Z+1	; 0x01
    5082:	02 81       	ldd	r16, Z+2	; 0x02
    5084:	13 81       	ldd	r17, Z+3	; 0x03
    5086:	09 c0       	rjmp	.+18     	; 0x509a <fat_seek_file+0x62>
            break;
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
    5088:	fb 01       	movw	r30, r22
    508a:	e0 80       	ld	r14, Z
    508c:	f1 80       	ldd	r15, Z+1	; 0x01
    508e:	02 81       	ldd	r16, Z+2	; 0x02
    5090:	13 81       	ldd	r17, Z+3	; 0x03
    5092:	8d a1       	ldd	r24, Y+37	; 0x25
    5094:	9e a1       	ldd	r25, Y+38	; 0x26
    5096:	af a1       	ldd	r26, Y+39	; 0x27
    5098:	b8 a5       	ldd	r27, Y+40	; 0x28
    509a:	e8 0e       	add	r14, r24
    509c:	f9 1e       	adc	r15, r25
    509e:	0a 1f       	adc	r16, r26
    50a0:	1b 1f       	adc	r17, r27
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
    50a2:	8d a1       	ldd	r24, Y+37	; 0x25
    50a4:	9e a1       	ldd	r25, Y+38	; 0x26
    50a6:	af a1       	ldd	r26, Y+39	; 0x27
    50a8:	b8 a5       	ldd	r27, Y+40	; 0x28
    50aa:	8e 15       	cp	r24, r14
    50ac:	9f 05       	cpc	r25, r15
    50ae:	a0 07       	cpc	r26, r16
    50b0:	b1 07       	cpc	r27, r17
    50b2:	38 f4       	brcc	.+14     	; 0x50c2 <fat_seek_file+0x8a>
    50b4:	ce 01       	movw	r24, r28
    50b6:	b8 01       	movw	r22, r16
    50b8:	a7 01       	movw	r20, r14
    50ba:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <fat_resize_file>
    50be:	88 23       	and	r24, r24
    50c0:	69 f0       	breq	.+26     	; 0x50dc <fat_seek_file+0xa4>
       && !fat_resize_file(fd, new_pos)
#endif
       )
        return 0;

    fd->pos = new_pos;
    50c2:	ed a6       	std	Y+45, r14	; 0x2d
    50c4:	fe a6       	std	Y+46, r15	; 0x2e
    50c6:	0f a7       	std	Y+47, r16	; 0x2f
    50c8:	18 ab       	std	Y+48, r17	; 0x30
    fd->pos_cluster = 0;
    50ca:	1a aa       	std	Y+50, r1	; 0x32
    50cc:	19 aa       	std	Y+49, r1	; 0x31

    *offset = (int32_t) new_pos;
    50ce:	f6 01       	movw	r30, r12
    50d0:	e0 82       	st	Z, r14
    50d2:	f1 82       	std	Z+1, r15	; 0x01
    50d4:	02 83       	std	Z+2, r16	; 0x02
    50d6:	13 83       	std	Z+3, r17	; 0x03
    50d8:	81 e0       	ldi	r24, 0x01	; 1
    50da:	01 c0       	rjmp	.+2      	; 0x50de <fat_seek_file+0xa6>
    return 1;
    50dc:	80 e0       	ldi	r24, 0x00	; 0
}
    50de:	df 91       	pop	r29
    50e0:	cf 91       	pop	r28
    50e2:	1f 91       	pop	r17
    50e4:	0f 91       	pop	r16
    50e6:	ff 90       	pop	r15
    50e8:	ef 90       	pop	r14
    50ea:	df 90       	pop	r13
    50ec:	cf 90       	pop	r12
    50ee:	08 95       	ret

000050f0 <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written, 0 on disk full, or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    50f0:	2f 92       	push	r2
    50f2:	3f 92       	push	r3
    50f4:	4f 92       	push	r4
    50f6:	5f 92       	push	r5
    50f8:	6f 92       	push	r6
    50fa:	7f 92       	push	r7
    50fc:	8f 92       	push	r8
    50fe:	9f 92       	push	r9
    5100:	af 92       	push	r10
    5102:	bf 92       	push	r11
    5104:	cf 92       	push	r12
    5106:	df 92       	push	r13
    5108:	ef 92       	push	r14
    510a:	ff 92       	push	r15
    510c:	0f 93       	push	r16
    510e:	1f 93       	push	r17
    5110:	df 93       	push	r29
    5112:	cf 93       	push	r28
    5114:	00 d0       	rcall	.+0      	; 0x5116 <fat_write_file+0x26>
    5116:	00 d0       	rcall	.+0      	; 0x5118 <fat_write_file+0x28>
    5118:	00 d0       	rcall	.+0      	; 0x511a <fat_write_file+0x2a>
    511a:	cd b7       	in	r28, 0x3d	; 61
    511c:	de b7       	in	r29, 0x3e	; 62
    511e:	9e 83       	std	Y+6, r25	; 0x06
    5120:	8d 83       	std	Y+5, r24	; 0x05
    5122:	7a 83       	std	Y+2, r23	; 0x02
    5124:	69 83       	std	Y+1, r22	; 0x01
    5126:	5c 83       	std	Y+4, r21	; 0x04
    5128:	4b 83       	std	Y+3, r20	; 0x03
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    512a:	00 97       	sbiw	r24, 0x00	; 0
    512c:	09 f4       	brne	.+2      	; 0x5130 <fat_write_file+0x40>
    512e:	41 c1       	rjmp	.+642    	; 0x53b2 <fat_write_file+0x2c2>
    5130:	67 2b       	or	r22, r23
    5132:	09 f4       	brne	.+2      	; 0x5136 <fat_write_file+0x46>
    5134:	3e c1       	rjmp	.+636    	; 0x53b2 <fat_write_file+0x2c2>
    5136:	45 2b       	or	r20, r21
    5138:	09 f4       	brne	.+2      	; 0x513c <fat_write_file+0x4c>
    513a:	3b c1       	rjmp	.+630    	; 0x53b2 <fat_write_file+0x2c2>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    513c:	dc 01       	movw	r26, r24
    513e:	9d 96       	adiw	r26, 0x2d	; 45
    5140:	8d 90       	ld	r8, X+
    5142:	9d 90       	ld	r9, X+
    5144:	ad 90       	ld	r10, X+
    5146:	bc 90       	ld	r11, X
    5148:	d0 97       	sbiw	r26, 0x30	; 48
    514a:	fc 01       	movw	r30, r24
    514c:	85 a1       	ldd	r24, Z+37	; 0x25
    514e:	96 a1       	ldd	r25, Z+38	; 0x26
    5150:	a7 a1       	ldd	r26, Z+39	; 0x27
    5152:	b0 a5       	ldd	r27, Z+40	; 0x28
    5154:	88 15       	cp	r24, r8
    5156:	99 05       	cpc	r25, r9
    5158:	aa 05       	cpc	r26, r10
    515a:	bb 05       	cpc	r27, r11
    515c:	08 f4       	brcc	.+2      	; 0x5160 <fat_write_file+0x70>
    515e:	29 c1       	rjmp	.+594    	; 0x53b2 <fat_write_file+0x2c2>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    5160:	01 90       	ld	r0, Z+
    5162:	f0 81       	ld	r31, Z
    5164:	e0 2d       	mov	r30, r0
    5166:	20 88       	ldd	r2, Z+16	; 0x10
    5168:	31 88       	ldd	r3, Z+17	; 0x11
    cluster_t cluster_num = fd->pos_cluster;
    516a:	ad 81       	ldd	r26, Y+5	; 0x05
    516c:	be 81       	ldd	r27, Y+6	; 0x06
    516e:	d1 96       	adiw	r26, 0x31	; 49
    5170:	0d 91       	ld	r16, X+
    5172:	1c 91       	ld	r17, X
    5174:	d2 97       	sbiw	r26, 0x32	; 50
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start writing */
    if(!cluster_num)
    5176:	01 15       	cp	r16, r1
    5178:	11 05       	cpc	r17, r1
    517a:	09 f0       	breq	.+2      	; 0x517e <fat_write_file+0x8e>
    517c:	55 c0       	rjmp	.+170    	; 0x5228 <fat_write_file+0x138>
    {
        cluster_num = fd->dir_entry.cluster;
    517e:	93 96       	adiw	r26, 0x23	; 35
    5180:	0d 91       	ld	r16, X+
    5182:	1c 91       	ld	r17, X
    5184:	94 97       	sbiw	r26, 0x24	; 36
        
        if(!cluster_num)
    5186:	01 15       	cp	r16, r1
    5188:	11 05       	cpc	r17, r1
    518a:	a9 f4       	brne	.+42     	; 0x51b6 <fat_write_file+0xc6>
        {
            if(!fd->pos)
    518c:	81 14       	cp	r8, r1
    518e:	91 04       	cpc	r9, r1
    5190:	a1 04       	cpc	r10, r1
    5192:	b1 04       	cpc	r11, r1
    5194:	09 f0       	breq	.+2      	; 0x5198 <fat_write_file+0xa8>
    5196:	0d c1       	rjmp	.+538    	; 0x53b2 <fat_write_file+0x2c2>
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    5198:	cf 01       	movw	r24, r30
    519a:	60 e0       	ldi	r22, 0x00	; 0
    519c:	70 e0       	ldi	r23, 0x00	; 0
    519e:	41 e0       	ldi	r20, 0x01	; 1
    51a0:	50 e0       	ldi	r21, 0x00	; 0
    51a2:	0e 94 ef 1b 	call	0x37de	; 0x37de <fat_append_clusters>
    51a6:	8c 01       	movw	r16, r24
    51a8:	ed 81       	ldd	r30, Y+5	; 0x05
    51aa:	fe 81       	ldd	r31, Y+6	; 0x06
    51ac:	94 a3       	std	Z+36, r25	; 0x24
    51ae:	83 a3       	std	Z+35, r24	; 0x23
                if(!cluster_num)
    51b0:	00 97       	sbiw	r24, 0x00	; 0
    51b2:	09 f4       	brne	.+2      	; 0x51b6 <fat_write_file+0xc6>
    51b4:	fe c0       	rjmp	.+508    	; 0x53b2 <fat_write_file+0x2c2>
            {
                return -1;
            }
        }

        if(fd->pos)
    51b6:	ad 81       	ldd	r26, Y+5	; 0x05
    51b8:	be 81       	ldd	r27, Y+6	; 0x06
    51ba:	9d 96       	adiw	r26, 0x2d	; 45
    51bc:	cd 90       	ld	r12, X+
    51be:	dd 90       	ld	r13, X+
    51c0:	ed 90       	ld	r14, X+
    51c2:	fc 90       	ld	r15, X
    51c4:	d0 97       	sbiw	r26, 0x30	; 48
    51c6:	c1 14       	cp	r12, r1
    51c8:	d1 04       	cpc	r13, r1
    51ca:	e1 04       	cpc	r14, r1
    51cc:	f1 04       	cpc	r15, r1
    51ce:	21 f5       	brne	.+72     	; 0x5218 <fat_write_file+0x128>
    51d0:	2b c0       	rjmp	.+86     	; 0x5228 <fat_write_file+0x138>
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
    51d2:	c4 18       	sub	r12, r4
    51d4:	d5 08       	sbc	r13, r5
    51d6:	e6 08       	sbc	r14, r6
    51d8:	f7 08       	sbc	r15, r7
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    51da:	ed 81       	ldd	r30, Y+5	; 0x05
    51dc:	fe 81       	ldd	r31, Y+6	; 0x06
    51de:	80 81       	ld	r24, Z
    51e0:	91 81       	ldd	r25, Z+1	; 0x01
    51e2:	b8 01       	movw	r22, r16
    51e4:	0e 94 37 1b 	call	0x366e	; 0x366e <fat_get_next_cluster>
                if(!cluster_num_next && pos == 0)
    51e8:	00 97       	sbiw	r24, 0x00	; 0
    51ea:	11 f0       	breq	.+4      	; 0x51f0 <fat_write_file+0x100>
    51ec:	8c 01       	movw	r16, r24
    51ee:	17 c0       	rjmp	.+46     	; 0x521e <fat_write_file+0x12e>
    51f0:	c1 14       	cp	r12, r1
    51f2:	d1 04       	cpc	r13, r1
    51f4:	e1 04       	cpc	r14, r1
    51f6:	f1 04       	cpc	r15, r1
    51f8:	09 f0       	breq	.+2      	; 0x51fc <fat_write_file+0x10c>
    51fa:	db c0       	rjmp	.+438    	; 0x53b2 <fat_write_file+0x2c2>
                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    51fc:	ad 81       	ldd	r26, Y+5	; 0x05
    51fe:	be 81       	ldd	r27, Y+6	; 0x06
    5200:	8d 91       	ld	r24, X+
    5202:	9c 91       	ld	r25, X
    5204:	b8 01       	movw	r22, r16
    5206:	41 e0       	ldi	r20, 0x01	; 1
    5208:	50 e0       	ldi	r21, 0x00	; 0
    520a:	0e 94 ef 1b 	call	0x37de	; 0x37de <fat_append_clusters>
                if(!cluster_num_next)
    520e:	00 97       	sbiw	r24, 0x00	; 0
    5210:	09 f4       	brne	.+2      	; 0x5214 <fat_write_file+0x124>
    5212:	cf c0       	rjmp	.+414    	; 0x53b2 <fat_write_file+0x2c2>
    5214:	8c 01       	movw	r16, r24
    5216:	03 c0       	rjmp	.+6      	; 0x521e <fat_write_file+0x12e>

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    5218:	21 01       	movw	r4, r2
    521a:	66 24       	eor	r6, r6
    521c:	77 24       	eor	r7, r7
    521e:	c4 14       	cp	r12, r4
    5220:	d5 04       	cpc	r13, r5
    5222:	e6 04       	cpc	r14, r6
    5224:	f7 04       	cpc	r15, r7
    5226:	a8 f6       	brcc	.-86     	; 0x51d2 <fat_write_file+0xe2>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    5228:	08 94       	sec
    522a:	21 08       	sbc	r2, r1
    522c:	31 08       	sbc	r3, r1
    522e:	82 20       	and	r8, r2
    5230:	93 20       	and	r9, r3
    5232:	08 94       	sec
    5234:	21 1c       	adc	r2, r1
    5236:	31 1c       	adc	r3, r1
    5238:	ab 80       	ldd	r10, Y+3	; 0x03
    523a:	bc 80       	ldd	r11, Y+4	; 0x04
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    523c:	ed 81       	ldd	r30, Y+5	; 0x05
    523e:	fe 81       	ldd	r31, Y+6	; 0x06
    5240:	c0 80       	ld	r12, Z
    5242:	d1 80       	ldd	r13, Z+1	; 0x01
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    5244:	c1 14       	cp	r12, r1
    5246:	d1 04       	cpc	r13, r1
    5248:	f9 f0       	breq	.+62     	; 0x5288 <fat_write_file+0x198>
    524a:	02 30       	cpi	r16, 0x02	; 2
    524c:	11 05       	cpc	r17, r1
    524e:	e0 f0       	brcs	.+56     	; 0x5288 <fat_write_file+0x198>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    5250:	02 50       	subi	r16, 0x02	; 2
    5252:	10 40       	sbci	r17, 0x00	; 0
    5254:	b8 01       	movw	r22, r16
    5256:	80 e0       	ldi	r24, 0x00	; 0
    5258:	90 e0       	ldi	r25, 0x00	; 0
    525a:	0e 5f       	subi	r16, 0xFE	; 254
    525c:	1f 4f       	sbci	r17, 0xFF	; 255
    525e:	d6 01       	movw	r26, r12
    5260:	50 96       	adiw	r26, 0x10	; 16
    5262:	2d 91       	ld	r18, X+
    5264:	3c 91       	ld	r19, X
    5266:	51 97       	sbiw	r26, 0x11	; 17
    5268:	40 e0       	ldi	r20, 0x00	; 0
    526a:	50 e0       	ldi	r21, 0x00	; 0
    526c:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    5270:	9b 01       	movw	r18, r22
    5272:	ac 01       	movw	r20, r24
    5274:	f6 01       	movw	r30, r12
    5276:	82 89       	ldd	r24, Z+18	; 0x12
    5278:	93 89       	ldd	r25, Z+19	; 0x13
    527a:	a4 89       	ldd	r26, Z+20	; 0x14
    527c:	b5 89       	ldd	r27, Z+21	; 0x15
    527e:	28 0f       	add	r18, r24
    5280:	39 1f       	adc	r19, r25
    5282:	4a 1f       	adc	r20, r26
    5284:	5b 1f       	adc	r21, r27
    5286:	04 c0       	rjmp	.+8      	; 0x5290 <fat_write_file+0x1a0>
    5288:	20 e0       	ldi	r18, 0x00	; 0
    528a:	30 e0       	ldi	r19, 0x00	; 0
    528c:	40 e0       	ldi	r20, 0x00	; 0
    528e:	50 e0       	ldi	r21, 0x00	; 0
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t write_length = cluster_size - first_cluster_offset;
    5290:	71 01       	movw	r14, r2
    5292:	e8 18       	sub	r14, r8
    5294:	f9 08       	sbc	r15, r9
    5296:	ae 14       	cp	r10, r14
    5298:	bf 04       	cpc	r11, r15
    529a:	08 f4       	brcc	.+2      	; 0x529e <fat_write_file+0x1ae>
    529c:	75 01       	movw	r14, r10
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    529e:	d6 01       	movw	r26, r12
    52a0:	ed 91       	ld	r30, X+
    52a2:	fc 91       	ld	r31, X
    52a4:	c4 01       	movw	r24, r8
    52a6:	a0 e0       	ldi	r26, 0x00	; 0
    52a8:	b0 e0       	ldi	r27, 0x00	; 0
    52aa:	28 0f       	add	r18, r24
    52ac:	39 1f       	adc	r19, r25
    52ae:	4a 1f       	adc	r20, r26
    52b0:	5b 1f       	adc	r21, r27
    52b2:	04 80       	ldd	r0, Z+4	; 0x04
    52b4:	f5 81       	ldd	r31, Z+5	; 0x05
    52b6:	e0 2d       	mov	r30, r0
    52b8:	ca 01       	movw	r24, r20
    52ba:	b9 01       	movw	r22, r18
    52bc:	49 81       	ldd	r20, Y+1	; 0x01
    52be:	5a 81       	ldd	r21, Y+2	; 0x02
    52c0:	97 01       	movw	r18, r14
    52c2:	09 95       	icall
    52c4:	88 23       	and	r24, r24
    52c6:	09 f4       	brne	.+2      	; 0x52ca <fat_write_file+0x1da>
    52c8:	48 c0       	rjmp	.+144    	; 0x535a <fat_write_file+0x26a>
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
    52ca:	ae 18       	sub	r10, r14
    52cc:	bf 08       	sbc	r11, r15
        fd->pos += write_length;
    52ce:	c7 01       	movw	r24, r14
    52d0:	a0 e0       	ldi	r26, 0x00	; 0
    52d2:	b0 e0       	ldi	r27, 0x00	; 0
    52d4:	ed 81       	ldd	r30, Y+5	; 0x05
    52d6:	fe 81       	ldd	r31, Y+6	; 0x06
    52d8:	25 a5       	ldd	r18, Z+45	; 0x2d
    52da:	36 a5       	ldd	r19, Z+46	; 0x2e
    52dc:	47 a5       	ldd	r20, Z+47	; 0x2f
    52de:	50 a9       	ldd	r21, Z+48	; 0x30
    52e0:	28 0f       	add	r18, r24
    52e2:	39 1f       	adc	r19, r25
    52e4:	4a 1f       	adc	r20, r26
    52e6:	5b 1f       	adc	r21, r27
    52e8:	25 a7       	std	Z+45, r18	; 0x2d
    52ea:	36 a7       	std	Z+46, r19	; 0x2e
    52ec:	47 a7       	std	Z+47, r20	; 0x2f
    52ee:	50 ab       	std	Z+48, r21	; 0x30

        if(first_cluster_offset + write_length >= cluster_size)
    52f0:	c7 01       	movw	r24, r14
    52f2:	88 0d       	add	r24, r8
    52f4:	99 1d       	adc	r25, r9
    52f6:	82 15       	cp	r24, r2
    52f8:	93 05       	cpc	r25, r3
    52fa:	08 f1       	brcs	.+66     	; 0x533e <fat_write_file+0x24e>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    52fc:	80 81       	ld	r24, Z
    52fe:	91 81       	ldd	r25, Z+1	; 0x01
    5300:	b8 01       	movw	r22, r16
    5302:	0e 94 37 1b 	call	0x366e	; 0x366e <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
    5306:	00 97       	sbiw	r24, 0x00	; 0
    5308:	11 f0       	breq	.+4      	; 0x530e <fat_write_file+0x21e>
    530a:	8c 01       	movw	r16, r24
    530c:	16 c0       	rjmp	.+44     	; 0x533a <fat_write_file+0x24a>
    530e:	a1 14       	cp	r10, r1
    5310:	b1 04       	cpc	r11, r1
    5312:	59 f0       	breq	.+22     	; 0x532a <fat_write_file+0x23a>
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    5314:	ed 81       	ldd	r30, Y+5	; 0x05
    5316:	fe 81       	ldd	r31, Y+6	; 0x06
    5318:	80 81       	ld	r24, Z
    531a:	91 81       	ldd	r25, Z+1	; 0x01
    531c:	b8 01       	movw	r22, r16
    531e:	41 e0       	ldi	r20, 0x01	; 1
    5320:	50 e0       	ldi	r21, 0x00	; 0
    5322:	0e 94 ef 1b 	call	0x37de	; 0x37de <fat_append_clusters>
            if(!cluster_num_next)
    5326:	00 97       	sbiw	r24, 0x00	; 0
    5328:	39 f4       	brne	.+14     	; 0x5338 <fat_write_file+0x248>
            {
                fd->pos_cluster = 0;
    532a:	ad 81       	ldd	r26, Y+5	; 0x05
    532c:	be 81       	ldd	r27, Y+6	; 0x06
    532e:	d2 96       	adiw	r26, 0x32	; 50
    5330:	1c 92       	st	X, r1
    5332:	1e 92       	st	-X, r1
    5334:	d1 97       	sbiw	r26, 0x31	; 49
    5336:	11 c0       	rjmp	.+34     	; 0x535a <fat_write_file+0x26a>
                break;
    5338:	8c 01       	movw	r16, r24
    533a:	88 24       	eor	r8, r8
    533c:	99 24       	eor	r9, r9

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
        }

        fd->pos_cluster = cluster_num;
    533e:	ed 81       	ldd	r30, Y+5	; 0x05
    5340:	fe 81       	ldd	r31, Y+6	; 0x06
    5342:	12 ab       	std	Z+50, r17	; 0x32
    5344:	01 ab       	std	Z+49, r16	; 0x31

    } while(buffer_left > 0); /* check if we are done */
    5346:	a1 14       	cp	r10, r1
    5348:	b1 04       	cpc	r11, r1
    534a:	39 f0       	breq	.+14     	; 0x535a <fat_write_file+0x26a>
        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
            break;

        /* calculate new file position */
        buffer += write_length;
    534c:	89 81       	ldd	r24, Y+1	; 0x01
    534e:	9a 81       	ldd	r25, Y+2	; 0x02
    5350:	8e 0d       	add	r24, r14
    5352:	9f 1d       	adc	r25, r15
    5354:	9a 83       	std	Y+2, r25	; 0x02
    5356:	89 83       	std	Y+1, r24	; 0x01
    5358:	71 cf       	rjmp	.-286    	; 0x523c <fat_write_file+0x14c>
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
    535a:	ed 81       	ldd	r30, Y+5	; 0x05
    535c:	fe 81       	ldd	r31, Y+6	; 0x06
    535e:	85 a5       	ldd	r24, Z+45	; 0x2d
    5360:	96 a5       	ldd	r25, Z+46	; 0x2e
    5362:	a7 a5       	ldd	r26, Z+47	; 0x2f
    5364:	b0 a9       	ldd	r27, Z+48	; 0x30
    5366:	e5 a0       	ldd	r14, Z+37	; 0x25
    5368:	f6 a0       	ldd	r15, Z+38	; 0x26
    536a:	07 a1       	ldd	r16, Z+39	; 0x27
    536c:	10 a5       	ldd	r17, Z+40	; 0x28
    536e:	e8 16       	cp	r14, r24
    5370:	f9 06       	cpc	r15, r25
    5372:	0a 07       	cpc	r16, r26
    5374:	1b 07       	cpc	r17, r27
    5376:	c0 f4       	brcc	.+48     	; 0x53a8 <fat_write_file+0x2b8>
    {
        uint32_t size_old = fd->dir_entry.file_size;

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
    5378:	85 a3       	std	Z+37, r24	; 0x25
    537a:	96 a3       	std	Z+38, r25	; 0x26
    537c:	a7 a3       	std	Z+39, r26	; 0x27
    537e:	b0 a7       	std	Z+40, r27	; 0x28
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    5380:	81 91       	ld	r24, Z+
    5382:	91 91       	ld	r25, Z+
    5384:	bf 01       	movw	r22, r30
    5386:	0e 94 79 24 	call	0x48f2	; 0x48f2 <fat_write_dir_entry>
    538a:	88 23       	and	r24, r24
    538c:	69 f4       	brne	.+26     	; 0x53a8 <fat_write_file+0x2b8>
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
    538e:	ad 81       	ldd	r26, Y+5	; 0x05
    5390:	be 81       	ldd	r27, Y+6	; 0x06
    5392:	9d 96       	adiw	r26, 0x2d	; 45
    5394:	ad 90       	ld	r10, X+
    5396:	bc 90       	ld	r11, X
    5398:	9e 97       	sbiw	r26, 0x2e	; 46
    539a:	ae 18       	sub	r10, r14
    539c:	bf 08       	sbc	r11, r15
            fd->pos = size_old;
    539e:	fd 01       	movw	r30, r26
    53a0:	e5 a6       	std	Z+45, r14	; 0x2d
    53a2:	f6 a6       	std	Z+46, r15	; 0x2e
    53a4:	07 a7       	std	Z+47, r16	; 0x2f
    53a6:	10 ab       	std	Z+48, r17	; 0x30
        }
    }

    return buffer_len - buffer_left;
    53a8:	4b 81       	ldd	r20, Y+3	; 0x03
    53aa:	5c 81       	ldd	r21, Y+4	; 0x04
    53ac:	4a 19       	sub	r20, r10
    53ae:	5b 09       	sbc	r21, r11
    53b0:	02 c0       	rjmp	.+4      	; 0x53b6 <fat_write_file+0x2c6>
    53b2:	4f ef       	ldi	r20, 0xFF	; 255
    53b4:	5f ef       	ldi	r21, 0xFF	; 255
}
    53b6:	ca 01       	movw	r24, r20
    53b8:	26 96       	adiw	r28, 0x06	; 6
    53ba:	0f b6       	in	r0, 0x3f	; 63
    53bc:	f8 94       	cli
    53be:	de bf       	out	0x3e, r29	; 62
    53c0:	0f be       	out	0x3f, r0	; 63
    53c2:	cd bf       	out	0x3d, r28	; 61
    53c4:	cf 91       	pop	r28
    53c6:	df 91       	pop	r29
    53c8:	1f 91       	pop	r17
    53ca:	0f 91       	pop	r16
    53cc:	ff 90       	pop	r15
    53ce:	ef 90       	pop	r14
    53d0:	df 90       	pop	r13
    53d2:	cf 90       	pop	r12
    53d4:	bf 90       	pop	r11
    53d6:	af 90       	pop	r10
    53d8:	9f 90       	pop	r9
    53da:	8f 90       	pop	r8
    53dc:	7f 90       	pop	r7
    53de:	6f 90       	pop	r6
    53e0:	5f 90       	pop	r5
    53e2:	4f 90       	pop	r4
    53e4:	3f 90       	pop	r3
    53e6:	2f 90       	pop	r2
    53e8:	08 95       	ret

000053ea <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    53ea:	cf 93       	push	r28
    53ec:	df 93       	push	r29
    53ee:	ac 01       	movw	r20, r24
    53f0:	db 01       	movw	r26, r22
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    53f2:	00 97       	sbiw	r24, 0x00	; 0
    53f4:	89 f1       	breq	.+98     	; 0x5458 <fat_open_dir+0x6e>
    53f6:	61 15       	cp	r22, r1
    53f8:	71 05       	cpc	r23, r1
    53fa:	71 f1       	breq	.+92     	; 0x5458 <fat_open_dir+0x6e>
    53fc:	90 96       	adiw	r26, 0x20	; 32
    53fe:	8c 91       	ld	r24, X
    5400:	90 97       	sbiw	r26, 0x20	; 32
    5402:	84 ff       	sbrs	r24, 4
    5404:	29 c0       	rjmp	.+82     	; 0x5458 <fat_open_dir+0x6e>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    5406:	80 91 1e 04 	lds	r24, 0x041E
    540a:	90 91 1f 04 	lds	r25, 0x041F
    540e:	89 2b       	or	r24, r25
    5410:	19 f4       	brne	.+6      	; 0x5418 <fat_open_dir+0x2e>
    5412:	ee e1       	ldi	r30, 0x1E	; 30
    5414:	f4 e0       	ldi	r31, 0x04	; 4
    5416:	08 c0       	rjmp	.+16     	; 0x5428 <fat_open_dir+0x3e>
    5418:	80 91 4f 04 	lds	r24, 0x044F
    541c:	90 91 50 04 	lds	r25, 0x0450
    5420:	89 2b       	or	r24, r25
    5422:	d1 f4       	brne	.+52     	; 0x5458 <fat_open_dir+0x6e>
    5424:	ef e4       	ldi	r30, 0x4F	; 79
    5426:	f4 e0       	ldi	r31, 0x04	; 4
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    5428:	9f 01       	movw	r18, r30
    542a:	2e 5f       	subi	r18, 0xFE	; 254
    542c:	3f 4f       	sbci	r19, 0xFF	; 255
    542e:	bd 01       	movw	r22, r26
    5430:	8b e2       	ldi	r24, 0x2B	; 43
    5432:	eb 01       	movw	r28, r22
    5434:	09 90       	ld	r0, Y+
    5436:	be 01       	movw	r22, r28
    5438:	e9 01       	movw	r28, r18
    543a:	09 92       	st	Y+, r0
    543c:	9e 01       	movw	r18, r28
    543e:	81 50       	subi	r24, 0x01	; 1
    5440:	c1 f7       	brne	.-16     	; 0x5432 <fat_open_dir+0x48>
    dd->fs = fs;
    5442:	51 83       	std	Z+1, r21	; 0x01
    5444:	40 83       	st	Z, r20
    dd->entry_cluster = dir_entry->cluster;
    5446:	91 96       	adiw	r26, 0x21	; 33
    5448:	8d 91       	ld	r24, X+
    544a:	9c 91       	ld	r25, X
    544c:	92 97       	sbiw	r26, 0x22	; 34
    544e:	96 a7       	std	Z+46, r25	; 0x2e
    5450:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
    5452:	10 aa       	std	Z+48, r1	; 0x30
    5454:	17 a6       	std	Z+47, r1	; 0x2f
    5456:	02 c0       	rjmp	.+4      	; 0x545c <fat_open_dir+0x72>

    return dd;
    5458:	e0 e0       	ldi	r30, 0x00	; 0
    545a:	f0 e0       	ldi	r31, 0x00	; 0
}
    545c:	cf 01       	movw	r24, r30
    545e:	df 91       	pop	r29
    5460:	cf 91       	pop	r28
    5462:	08 95       	ret

00005464 <fat_open_file>:
 * \param[in] dir_entry The directory entry of the file to open.
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    5464:	cf 93       	push	r28
    5466:	df 93       	push	r29
    5468:	9c 01       	movw	r18, r24
    546a:	fb 01       	movw	r30, r22
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    546c:	00 97       	sbiw	r24, 0x00	; 0
    546e:	31 f0       	breq	.+12     	; 0x547c <fat_open_file+0x18>
    5470:	61 15       	cp	r22, r1
    5472:	71 05       	cpc	r23, r1
    5474:	19 f0       	breq	.+6      	; 0x547c <fat_open_file+0x18>
    5476:	80 a1       	ldd	r24, Z+32	; 0x20
    5478:	84 ff       	sbrs	r24, 4
    547a:	23 c0       	rjmp	.+70     	; 0x54c2 <fat_open_file+0x5e>
    547c:	20 e0       	ldi	r18, 0x00	; 0
    547e:	30 e0       	ldi	r19, 0x00	; 0
    fd->fs = fs;
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;

    return fd;
}
    5480:	c9 01       	movw	r24, r18
    5482:	df 91       	pop	r29
    5484:	cf 91       	pop	r28
    5486:	08 95       	ret
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    5488:	cd ee       	ldi	r28, 0xED	; 237
    548a:	d3 e0       	ldi	r29, 0x03	; 3
    548c:	df 01       	movw	r26, r30
    548e:	8b e2       	ldi	r24, 0x2B	; 43
    5490:	0d 90       	ld	r0, X+
    5492:	09 92       	st	Y+, r0
    5494:	81 50       	subi	r24, 0x01	; 1
    5496:	e1 f7       	brne	.-8      	; 0x5490 <fat_open_file+0x2c>
    fd->fs = fs;
    5498:	30 93 ec 03 	sts	0x03EC, r19
    549c:	20 93 eb 03 	sts	0x03EB, r18
    fd->pos = 0;
    54a0:	10 92 18 04 	sts	0x0418, r1
    54a4:	10 92 19 04 	sts	0x0419, r1
    54a8:	10 92 1a 04 	sts	0x041A, r1
    54ac:	10 92 1b 04 	sts	0x041B, r1
    fd->pos_cluster = dir_entry->cluster;
    54b0:	81 a1       	ldd	r24, Z+33	; 0x21
    54b2:	92 a1       	ldd	r25, Z+34	; 0x22
    54b4:	90 93 1d 04 	sts	0x041D, r25
    54b8:	80 93 1c 04 	sts	0x041C, r24
    54bc:	2b ee       	ldi	r18, 0xEB	; 235
    54be:	33 e0       	ldi	r19, 0x03	; 3
    54c0:	df cf       	rjmp	.-66     	; 0x5480 <fat_open_file+0x1c>
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
    54c2:	80 91 eb 03 	lds	r24, 0x03EB
    54c6:	90 91 ec 03 	lds	r25, 0x03EC
    54ca:	89 2b       	or	r24, r25
    54cc:	b9 f6       	brne	.-82     	; 0x547c <fat_open_file+0x18>
    54ce:	dc cf       	rjmp	.-72     	; 0x5488 <fat_open_file+0x24>

000054d0 <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    54d0:	6f 92       	push	r6
    54d2:	7f 92       	push	r7
    54d4:	8f 92       	push	r8
    54d6:	9f 92       	push	r9
    54d8:	af 92       	push	r10
    54da:	bf 92       	push	r11
    54dc:	cf 92       	push	r12
    54de:	df 92       	push	r13
    54e0:	ef 92       	push	r14
    54e2:	ff 92       	push	r15
    54e4:	0f 93       	push	r16
    54e6:	1f 93       	push	r17
    54e8:	cf 93       	push	r28
    54ea:	df 93       	push	r29
    54ec:	4c 01       	movw	r8, r24
    54ee:	eb 01       	movw	r28, r22
    54f0:	7a 01       	movw	r14, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    54f2:	00 97       	sbiw	r24, 0x00	; 0
    54f4:	09 f4       	brne	.+2      	; 0x54f8 <fat_get_dir_entry_of_path+0x28>
    54f6:	67 c0       	rjmp	.+206    	; 0x55c6 <fat_get_dir_entry_of_path+0xf6>
    54f8:	61 15       	cp	r22, r1
    54fa:	71 05       	cpc	r23, r1
    54fc:	09 f4       	brne	.+2      	; 0x5500 <fat_get_dir_entry_of_path+0x30>
    54fe:	63 c0       	rjmp	.+198    	; 0x55c6 <fat_get_dir_entry_of_path+0xf6>
    5500:	88 81       	ld	r24, Y
    5502:	88 23       	and	r24, r24
    5504:	09 f4       	brne	.+2      	; 0x5508 <fat_get_dir_entry_of_path+0x38>
    5506:	5f c0       	rjmp	.+190    	; 0x55c6 <fat_get_dir_entry_of_path+0xf6>
    5508:	41 15       	cp	r20, r1
    550a:	51 05       	cpc	r21, r1
    550c:	09 f4       	brne	.+2      	; 0x5510 <fat_get_dir_entry_of_path+0x40>
    550e:	5b c0       	rjmp	.+182    	; 0x55c6 <fat_get_dir_entry_of_path+0xf6>
        return 0;

    if(path[0] == '/')
    5510:	8f 32       	cpi	r24, 0x2F	; 47
    5512:	09 f4       	brne	.+2      	; 0x5516 <fat_get_dir_entry_of_path+0x46>
        ++path;
    5514:	21 96       	adiw	r28, 0x01	; 1

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    5516:	8b e2       	ldi	r24, 0x2B	; 43
    5518:	f7 01       	movw	r30, r14
    551a:	11 92       	st	Z+, r1
    551c:	8a 95       	dec	r24
    551e:	e9 f7       	brne	.-6      	; 0x551a <fat_get_dir_entry_of_path+0x4a>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    5520:	80 e1       	ldi	r24, 0x10	; 16
    5522:	f7 01       	movw	r30, r14
    5524:	80 a3       	std	Z+32, r24	; 0x20
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    5526:	37 01       	movw	r6, r14
    5528:	01 c0       	rjmp	.+2      	; 0x552c <fat_get_dir_entry_of_path+0x5c>
    552a:	e5 01       	movw	r28, r10
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    552c:	88 81       	ld	r24, Y
    552e:	88 23       	and	r24, r24
    5530:	09 f4       	brne	.+2      	; 0x5534 <fat_get_dir_entry_of_path+0x64>
    5532:	4b c0       	rjmp	.+150    	; 0x55ca <fat_get_dir_entry_of_path+0xfa>
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    5534:	c4 01       	movw	r24, r8
    5536:	b7 01       	movw	r22, r14
    5538:	0e 94 f5 29 	call	0x53ea	; 0x53ea <fat_open_dir>
    553c:	6c 01       	movw	r12, r24
        if(!dd)
    553e:	00 97       	sbiw	r24, 0x00	; 0
    5540:	09 f4       	brne	.+2      	; 0x5544 <fat_get_dir_entry_of_path+0x74>
    5542:	41 c0       	rjmp	.+130    	; 0x55c6 <fat_get_dir_entry_of_path+0xf6>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    5544:	ce 01       	movw	r24, r28
    5546:	6f e2       	ldi	r22, 0x2F	; 47
    5548:	70 e0       	ldi	r23, 0x00	; 0
    554a:	0e 94 07 2d 	call	0x5a0e	; 0x5a0e <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    554e:	00 97       	sbiw	r24, 0x00	; 0
    5550:	39 f0       	breq	.+14     	; 0x5560 <fat_get_dir_entry_of_path+0x90>
        {
            length_to_sep = sub_path - path;
    5552:	48 2f       	mov	r20, r24
    5554:	4c 1b       	sub	r20, r28
            ++sub_path;
    5556:	5c 01       	movw	r10, r24
    5558:	08 94       	sec
    555a:	a1 1c       	adc	r10, r1
    555c:	b1 1c       	adc	r11, r1
    555e:	2a c0       	rjmp	.+84     	; 0x55b4 <fat_get_dir_entry_of_path+0xe4>
        }
        else
        {
            length_to_sep = strlen(path);
    5560:	fe 01       	movw	r30, r28
    5562:	01 90       	ld	r0, Z+
    5564:	00 20       	and	r0, r0
    5566:	e9 f7       	brne	.-6      	; 0x5562 <fat_get_dir_entry_of_path+0x92>
    5568:	31 97       	sbiw	r30, 0x01	; 1
    556a:	4e 2f       	mov	r20, r30
    556c:	4c 1b       	sub	r20, r28
            sub_path = path + length_to_sep;
    556e:	5e 01       	movw	r10, r28
    5570:	a4 0e       	add	r10, r20
    5572:	b1 1c       	adc	r11, r1
    5574:	1f c0       	rjmp	.+62     	; 0x55b4 <fat_get_dir_entry_of_path+0xe4>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    5576:	f3 01       	movw	r30, r6
    5578:	01 90       	ld	r0, Z+
    557a:	00 20       	and	r0, r0
    557c:	e9 f7       	brne	.-6      	; 0x5578 <fat_get_dir_entry_of_path+0xa8>
    557e:	31 97       	sbiw	r30, 0x01	; 1
    5580:	e6 19       	sub	r30, r6
    5582:	f7 09       	sbc	r31, r7
    5584:	e0 17       	cp	r30, r16
    5586:	f1 07       	cpc	r31, r17
    5588:	b9 f4       	brne	.+46     	; 0x55b8 <fat_get_dir_entry_of_path+0xe8>
    558a:	ce 01       	movw	r24, r28
    558c:	b3 01       	movw	r22, r6
    558e:	a8 01       	movw	r20, r16
    5590:	0e 94 22 2d 	call	0x5a44	; 0x5a44 <strncmp>
    5594:	00 97       	sbiw	r24, 0x00	; 0
    5596:	81 f4       	brne	.+32     	; 0x55b8 <fat_get_dir_entry_of_path+0xe8>
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    5598:	f6 01       	movw	r30, r12
    559a:	11 82       	std	Z+1, r1	; 0x01
    559c:	10 82       	st	Z, r1
                continue;

            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
    559e:	0c 0f       	add	r16, r28
    55a0:	1d 1f       	adc	r17, r29
    55a2:	f8 01       	movw	r30, r16
    55a4:	80 81       	ld	r24, Z
    55a6:	88 23       	and	r24, r24
    55a8:	81 f0       	breq	.+32     	; 0x55ca <fat_get_dir_entry_of_path+0xfa>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    55aa:	f7 01       	movw	r30, r14
    55ac:	80 a1       	ldd	r24, Z+32	; 0x20
    55ae:	84 fd       	sbrc	r24, 4
    55b0:	bc cf       	rjmp	.-136    	; 0x552a <fat_get_dir_entry_of_path+0x5a>
    55b2:	09 c0       	rjmp	.+18     	; 0x55c6 <fat_get_dir_entry_of_path+0xf6>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    55b4:	04 2f       	mov	r16, r20
    55b6:	10 e0       	ldi	r17, 0x00	; 0
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    55b8:	c6 01       	movw	r24, r12
    55ba:	b7 01       	movw	r22, r14
    55bc:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <fat_read_dir>
    55c0:	88 23       	and	r24, r24
    55c2:	c9 f6       	brne	.-78     	; 0x5576 <fat_get_dir_entry_of_path+0xa6>
    55c4:	12 c0       	rjmp	.+36     	; 0x55ea <fat_get_dir_entry_of_path+0x11a>
    55c6:	80 e0       	ldi	r24, 0x00	; 0
    55c8:	01 c0       	rjmp	.+2      	; 0x55cc <fat_get_dir_entry_of_path+0xfc>
    55ca:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
    55cc:	df 91       	pop	r29
    55ce:	cf 91       	pop	r28
    55d0:	1f 91       	pop	r17
    55d2:	0f 91       	pop	r16
    55d4:	ff 90       	pop	r15
    55d6:	ef 90       	pop	r14
    55d8:	df 90       	pop	r13
    55da:	cf 90       	pop	r12
    55dc:	bf 90       	pop	r11
    55de:	af 90       	pop	r10
    55e0:	9f 90       	pop	r9
    55e2:	8f 90       	pop	r8
    55e4:	7f 90       	pop	r7
    55e6:	6f 90       	pop	r6
    55e8:	08 95       	ret
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    55ea:	f6 01       	movw	r30, r12
    55ec:	11 82       	std	Z+1, r1	; 0x01
    55ee:	10 82       	st	Z, r1
    55f0:	9d cf       	rjmp	.-198    	; 0x552c <fat_get_dir_entry_of_path+0x5c>

000055f2 <uart_init>:

void uart_init(uint8_t uart_speed)
{
	//Assume 16MHz
	uint16_t new_ubrr = 207; //Default is 9600bps
	if(uart_speed == 0) new_ubrr = 832; //2400
    55f2:	88 23       	and	r24, r24
    55f4:	29 f1       	breq	.+74     	; 0x5640 <uart_init+0x4e>
	if(uart_speed == 1) new_ubrr = 207; //9600
    55f6:	81 30       	cpi	r24, 0x01	; 1
    55f8:	19 f4       	brne	.+6      	; 0x5600 <uart_init+0xe>
    55fa:	2f ec       	ldi	r18, 0xCF	; 207
    55fc:	30 e0       	ldi	r19, 0x00	; 0
    55fe:	15 c0       	rjmp	.+42     	; 0x562a <uart_init+0x38>
	if(uart_speed == 2) new_ubrr = 34; //57600
    5600:	82 30       	cpi	r24, 0x02	; 2
    5602:	19 f4       	brne	.+6      	; 0x560a <uart_init+0x18>
    5604:	22 e2       	ldi	r18, 0x22	; 34
    5606:	30 e0       	ldi	r19, 0x00	; 0
    5608:	10 c0       	rjmp	.+32     	; 0x562a <uart_init+0x38>
	if(uart_speed == 3) new_ubrr = 16; //115200
    560a:	83 30       	cpi	r24, 0x03	; 3
    560c:	19 f4       	brne	.+6      	; 0x5614 <uart_init+0x22>
    560e:	20 e1       	ldi	r18, 0x10	; 16
    5610:	30 e0       	ldi	r19, 0x00	; 0
    5612:	0b c0       	rjmp	.+22     	; 0x562a <uart_init+0x38>
	//New speeds added 4-7-2010
	//1200bps is so rare, and is not on the ATmega328 datasheet that I skipped it
	//38400bps is also rare, and ubrr of 51 oddly causes errors at 16MHz, so I skipped it as well
	if(uart_speed == 4) new_ubrr = 416; //4800
    5614:	84 30       	cpi	r24, 0x04	; 4
    5616:	19 f4       	brne	.+6      	; 0x561e <uart_init+0x2c>
    5618:	20 ea       	ldi	r18, 0xA0	; 160
    561a:	31 e0       	ldi	r19, 0x01	; 1
    561c:	06 c0       	rjmp	.+12     	; 0x562a <uart_init+0x38>
    561e:	2f ec       	ldi	r18, 0xCF	; 207
    5620:	30 e0       	ldi	r19, 0x00	; 0
	if(uart_speed == 5) new_ubrr = 103; //19200
    5622:	85 30       	cpi	r24, 0x05	; 5
    5624:	11 f4       	brne	.+4      	; 0x562a <uart_init+0x38>
    5626:	27 e6       	ldi	r18, 0x67	; 103
    5628:	30 e0       	ldi	r19, 0x00	; 0
	//if(uart_speed == 6) new_ubrr = 51; //38400

	UCSR0A = (1<<U2X0); //Double the UART transfer rate
    562a:	82 e0       	ldi	r24, 0x02	; 2
    562c:	80 93 c0 00 	sts	0x00C0, r24
	//Slightly more accurate UBRR calculation
	UBRR0L = new_ubrr;
    5630:	20 93 c4 00 	sts	0x00C4, r18
	UBRR0H = new_ubrr >> 8;
    5634:	30 93 c5 00 	sts	0x00C5, r19

#if !USE_SLEEP
    UCSRB = (1 << RXEN) | (1 << TXEN);
#else
    UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    5638:	88 e9       	ldi	r24, 0x98	; 152
    563a:	80 93 c1 00 	sts	0x00C1, r24
#endif

}
    563e:	08 95       	ret
    5640:	20 e4       	ldi	r18, 0x40	; 64
    5642:	33 e0       	ldi	r19, 0x03	; 3
    5644:	f2 cf       	rjmp	.-28     	; 0x562a <uart_init+0x38>

00005646 <uart_putc>:

void uart_putc(uint8_t c)
{
    5646:	1f 93       	push	r17
    5648:	18 2f       	mov	r17, r24
    if(c == '\n')
    564a:	8a 30       	cpi	r24, 0x0A	; 10
    564c:	19 f4       	brne	.+6      	; 0x5654 <uart_putc+0xe>
        uart_putc('\r');
    564e:	8d e0       	ldi	r24, 0x0D	; 13
    5650:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>

    /* wait until transmit buffer is empty */
    while(!(UCSRA & (1 << UDRE)));
    5654:	80 91 c0 00 	lds	r24, 0x00C0
    5658:	85 ff       	sbrs	r24, 5
    565a:	fc cf       	rjmp	.-8      	; 0x5654 <uart_putc+0xe>

    /* send next byte */
    UDR = c;
    565c:	10 93 c6 00 	sts	0x00C6, r17
}
    5660:	1f 91       	pop	r17
    5662:	08 95       	ret

00005664 <uart_putc_hex>:

void uart_putc_hex(uint8_t b)
{
    5664:	1f 93       	push	r17
    5666:	18 2f       	mov	r17, r24
    /* upper nibble */
    if((b >> 4) < 0x0a)
    5668:	82 95       	swap	r24
    566a:	8f 70       	andi	r24, 0x0F	; 15
    566c:	8a 30       	cpi	r24, 0x0A	; 10
    566e:	10 f4       	brcc	.+4      	; 0x5674 <uart_putc_hex+0x10>
        uart_putc((b >> 4) + '0');
    5670:	80 5d       	subi	r24, 0xD0	; 208
    5672:	01 c0       	rjmp	.+2      	; 0x5676 <uart_putc_hex+0x12>
    else
        uart_putc((b >> 4) - 0x0a + 'a');
    5674:	89 5a       	subi	r24, 0xA9	; 169
    5676:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
    567a:	81 2f       	mov	r24, r17
    567c:	90 e0       	ldi	r25, 0x00	; 0
    567e:	8f 70       	andi	r24, 0x0F	; 15
    5680:	90 70       	andi	r25, 0x00	; 0
    5682:	21 2f       	mov	r18, r17
    5684:	2f 70       	andi	r18, 0x0F	; 15
    5686:	0a 97       	sbiw	r24, 0x0a	; 10
    5688:	1c f4       	brge	.+6      	; 0x5690 <uart_putc_hex+0x2c>
        uart_putc((b & 0x0f) + '0');
    568a:	82 2f       	mov	r24, r18
    568c:	80 5d       	subi	r24, 0xD0	; 208
    568e:	02 c0       	rjmp	.+4      	; 0x5694 <uart_putc_hex+0x30>
    else
        uart_putc((b & 0x0f) - 0x0a + 'a');
    5690:	82 2f       	mov	r24, r18
    5692:	89 5a       	subi	r24, 0xA9	; 169
    5694:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
}
    5698:	1f 91       	pop	r17
    569a:	08 95       	ret

0000569c <uart_putw_hex>:

void uart_putw_hex(uint16_t w)
{
    569c:	1f 93       	push	r17
    569e:	18 2f       	mov	r17, r24
    uart_putc_hex((uint8_t) (w >> 8));
    56a0:	89 2f       	mov	r24, r25
    56a2:	0e 94 32 2b 	call	0x5664	; 0x5664 <uart_putc_hex>
    uart_putc_hex((uint8_t) (w & 0xff));
    56a6:	81 2f       	mov	r24, r17
    56a8:	0e 94 32 2b 	call	0x5664	; 0x5664 <uart_putc_hex>
}
    56ac:	1f 91       	pop	r17
    56ae:	08 95       	ret

000056b0 <uart_putdw_hex>:

void uart_putdw_hex(uint32_t dw)
{
    56b0:	ef 92       	push	r14
    56b2:	ff 92       	push	r15
    56b4:	0f 93       	push	r16
    56b6:	1f 93       	push	r17
    56b8:	7b 01       	movw	r14, r22
    56ba:	8c 01       	movw	r16, r24
    uart_putw_hex((uint16_t) (dw >> 16));
    56bc:	c8 01       	movw	r24, r16
    56be:	aa 27       	eor	r26, r26
    56c0:	bb 27       	eor	r27, r27
    56c2:	0e 94 4e 2b 	call	0x569c	; 0x569c <uart_putw_hex>
    uart_putw_hex((uint16_t) (dw & 0xffff));
    56c6:	c7 01       	movw	r24, r14
    56c8:	0e 94 4e 2b 	call	0x569c	; 0x569c <uart_putw_hex>
}
    56cc:	1f 91       	pop	r17
    56ce:	0f 91       	pop	r16
    56d0:	ff 90       	pop	r15
    56d2:	ef 90       	pop	r14
    56d4:	08 95       	ret

000056d6 <uart_putw_dec>:

void uart_putw_dec(uint16_t w)
{
    56d6:	cf 92       	push	r12
    56d8:	df 92       	push	r13
    56da:	ff 92       	push	r15
    56dc:	0f 93       	push	r16
    56de:	1f 93       	push	r17
    56e0:	cf 93       	push	r28
    56e2:	df 93       	push	r29
    56e4:	6c 01       	movw	r12, r24
    56e6:	c0 e1       	ldi	r28, 0x10	; 16
    56e8:	d7 e2       	ldi	r29, 0x27	; 39
    56ea:	40 e0       	ldi	r20, 0x00	; 0
    56ec:	00 e0       	ldi	r16, 0x00	; 0
    56ee:	10 e0       	ldi	r17, 0x00	; 0
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = w / num;
    56f0:	c6 01       	movw	r24, r12
    56f2:	be 01       	movw	r22, r28
    56f4:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__udivmodhi4>
    56f8:	f6 2e       	mov	r15, r22
        if(b > 0 || started || num == 1)
    56fa:	66 23       	and	r22, r22
    56fc:	29 f4       	brne	.+10     	; 0x5708 <uart_putw_dec+0x32>
    56fe:	44 23       	and	r20, r20
    5700:	19 f4       	brne	.+6      	; 0x5708 <uart_putw_dec+0x32>
    5702:	c1 30       	cpi	r28, 0x01	; 1
    5704:	d1 05       	cpc	r29, r1
    5706:	29 f4       	brne	.+10     	; 0x5712 <uart_putw_dec+0x3c>
        {
            uart_putc('0' + b);
    5708:	8f 2d       	mov	r24, r15
    570a:	80 5d       	subi	r24, 0xD0	; 208
    570c:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    5710:	41 e0       	ldi	r20, 0x01	; 1
            started = 1;
        }
        w -= b * num;

        num /= 10;
    5712:	ce 01       	movw	r24, r28
    5714:	6a e0       	ldi	r22, 0x0A	; 10
    5716:	70 e0       	ldi	r23, 0x00	; 0
    5718:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__udivmodhi4>
    571c:	0f 5f       	subi	r16, 0xFF	; 255
    571e:	1f 4f       	sbci	r17, 0xFF	; 255
void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    5720:	05 30       	cpi	r16, 0x05	; 5
    5722:	11 05       	cpc	r17, r1
    5724:	71 f0       	breq	.+28     	; 0x5742 <uart_putw_dec+0x6c>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        w -= b * num;
    5726:	8f 2d       	mov	r24, r15
    5728:	90 e0       	ldi	r25, 0x00	; 0
    572a:	9c 01       	movw	r18, r24
    572c:	2c 9f       	mul	r18, r28
    572e:	c0 01       	movw	r24, r0
    5730:	2d 9f       	mul	r18, r29
    5732:	90 0d       	add	r25, r0
    5734:	3c 9f       	mul	r19, r28
    5736:	90 0d       	add	r25, r0
    5738:	11 24       	eor	r1, r1
    573a:	c8 1a       	sub	r12, r24
    573c:	d9 0a       	sbc	r13, r25
    573e:	eb 01       	movw	r28, r22
    5740:	d7 cf       	rjmp	.-82     	; 0x56f0 <uart_putw_dec+0x1a>

        num /= 10;
    }
}
    5742:	df 91       	pop	r29
    5744:	cf 91       	pop	r28
    5746:	1f 91       	pop	r17
    5748:	0f 91       	pop	r16
    574a:	ff 90       	pop	r15
    574c:	df 90       	pop	r13
    574e:	cf 90       	pop	r12
    5750:	08 95       	ret

00005752 <uart_putdw_dec>:

void uart_putdw_dec(uint32_t dw)
{
    5752:	4f 92       	push	r4
    5754:	5f 92       	push	r5
    5756:	6f 92       	push	r6
    5758:	7f 92       	push	r7
    575a:	8f 92       	push	r8
    575c:	9f 92       	push	r9
    575e:	af 92       	push	r10
    5760:	bf 92       	push	r11
    5762:	cf 92       	push	r12
    5764:	df 92       	push	r13
    5766:	ef 92       	push	r14
    5768:	ff 92       	push	r15
    576a:	0f 93       	push	r16
    576c:	1f 93       	push	r17
    576e:	cf 93       	push	r28
    5770:	df 93       	push	r29
    5772:	5b 01       	movw	r10, r22
    5774:	6c 01       	movw	r12, r24
    5776:	e1 2c       	mov	r14, r1
    5778:	9a ec       	ldi	r25, 0xCA	; 202
    577a:	f9 2e       	mov	r15, r25
    577c:	9a e9       	ldi	r25, 0x9A	; 154
    577e:	09 2f       	mov	r16, r25
    5780:	9b e3       	ldi	r25, 0x3B	; 59
    5782:	19 2f       	mov	r17, r25
    5784:	44 24       	eor	r4, r4
    5786:	c0 e0       	ldi	r28, 0x00	; 0
    5788:	d0 e0       	ldi	r29, 0x00	; 0
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = dw / num;
    578a:	c6 01       	movw	r24, r12
    578c:	b5 01       	movw	r22, r10
    578e:	a8 01       	movw	r20, r16
    5790:	97 01       	movw	r18, r14
    5792:	0e 94 95 2c 	call	0x592a	; 0x592a <__udivmodsi4>
    5796:	92 2e       	mov	r9, r18
        if(b > 0 || started || num == 1)
    5798:	22 23       	and	r18, r18
    579a:	41 f4       	brne	.+16     	; 0x57ac <uart_putdw_dec+0x5a>
    579c:	44 20       	and	r4, r4
    579e:	31 f4       	brne	.+12     	; 0x57ac <uart_putdw_dec+0x5a>
    57a0:	81 e0       	ldi	r24, 0x01	; 1
    57a2:	e8 16       	cp	r14, r24
    57a4:	f1 04       	cpc	r15, r1
    57a6:	01 05       	cpc	r16, r1
    57a8:	11 05       	cpc	r17, r1
    57aa:	31 f4       	brne	.+12     	; 0x57b8 <uart_putdw_dec+0x66>
        {
            uart_putc('0' + b);
    57ac:	89 2d       	mov	r24, r9
    57ae:	80 5d       	subi	r24, 0xD0	; 208
    57b0:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    57b4:	44 24       	eor	r4, r4
    57b6:	43 94       	inc	r4
            started = 1;
        }
        dw -= b * num;

        num /= 10;
    57b8:	c8 01       	movw	r24, r16
    57ba:	b7 01       	movw	r22, r14
    57bc:	2a e0       	ldi	r18, 0x0A	; 10
    57be:	30 e0       	ldi	r19, 0x00	; 0
    57c0:	40 e0       	ldi	r20, 0x00	; 0
    57c2:	50 e0       	ldi	r21, 0x00	; 0
    57c4:	0e 94 95 2c 	call	0x592a	; 0x592a <__udivmodsi4>
    57c8:	82 2e       	mov	r8, r18
    57ca:	73 2e       	mov	r7, r19
    57cc:	64 2e       	mov	r6, r20
    57ce:	55 2e       	mov	r5, r21
    57d0:	21 96       	adiw	r28, 0x01	; 1
void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    57d2:	ca 30       	cpi	r28, 0x0A	; 10
    57d4:	d1 05       	cpc	r29, r1
    57d6:	a9 f0       	breq	.+42     	; 0x5802 <uart_putdw_dec+0xb0>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        dw -= b * num;
    57d8:	69 2d       	mov	r22, r9
    57da:	70 e0       	ldi	r23, 0x00	; 0
    57dc:	80 e0       	ldi	r24, 0x00	; 0
    57de:	90 e0       	ldi	r25, 0x00	; 0
    57e0:	a8 01       	movw	r20, r16
    57e2:	97 01       	movw	r18, r14
    57e4:	0e 94 4f 2c 	call	0x589e	; 0x589e <__mulsi3>
    57e8:	a6 1a       	sub	r10, r22
    57ea:	b7 0a       	sbc	r11, r23
    57ec:	c8 0a       	sbc	r12, r24
    57ee:	d9 0a       	sbc	r13, r25
    57f0:	28 2d       	mov	r18, r8
    57f2:	37 2d       	mov	r19, r7
    57f4:	46 2d       	mov	r20, r6
    57f6:	55 2d       	mov	r21, r5
    57f8:	c9 01       	movw	r24, r18
    57fa:	da 01       	movw	r26, r20
    57fc:	7c 01       	movw	r14, r24
    57fe:	8d 01       	movw	r16, r26
    5800:	c4 cf       	rjmp	.-120    	; 0x578a <uart_putdw_dec+0x38>

        num /= 10;
    }
}
    5802:	df 91       	pop	r29
    5804:	cf 91       	pop	r28
    5806:	1f 91       	pop	r17
    5808:	0f 91       	pop	r16
    580a:	ff 90       	pop	r15
    580c:	ef 90       	pop	r14
    580e:	df 90       	pop	r13
    5810:	cf 90       	pop	r12
    5812:	bf 90       	pop	r11
    5814:	af 90       	pop	r10
    5816:	9f 90       	pop	r9
    5818:	8f 90       	pop	r8
    581a:	7f 90       	pop	r7
    581c:	6f 90       	pop	r6
    581e:	5f 90       	pop	r5
    5820:	4f 90       	pop	r4
    5822:	08 95       	ret

00005824 <uart_puts>:

void uart_puts(const char* str)
{
    5824:	cf 93       	push	r28
    5826:	df 93       	push	r29
    5828:	ec 01       	movw	r28, r24
    582a:	03 c0       	rjmp	.+6      	; 0x5832 <uart_puts+0xe>
    while(*str)
        uart_putc(*str++);
    582c:	21 96       	adiw	r28, 0x01	; 1
    582e:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    }
}

void uart_puts(const char* str)
{
    while(*str)
    5832:	88 81       	ld	r24, Y
    5834:	88 23       	and	r24, r24
    5836:	d1 f7       	brne	.-12     	; 0x582c <uart_puts+0x8>
        uart_putc(*str++);
}
    5838:	df 91       	pop	r29
    583a:	cf 91       	pop	r28
    583c:	08 95       	ret

0000583e <uart_puts_p>:

void uart_puts_p(PGM_P str)
{
    583e:	cf 93       	push	r28
    5840:	df 93       	push	r29
    5842:	ec 01       	movw	r28, r24
    5844:	fe 01       	movw	r30, r28
    while(1)
    {
        uint8_t b = pgm_read_byte_near(str++);
    5846:	21 96       	adiw	r28, 0x01	; 1
    5848:	84 91       	lpm	r24, Z+
        if(!b)
    584a:	88 23       	and	r24, r24
    584c:	19 f0       	breq	.+6      	; 0x5854 <uart_puts_p+0x16>
            break;

        uart_putc(b);
    584e:	0e 94 23 2b 	call	0x5646	; 0x5646 <uart_putc>
    5852:	f8 cf       	rjmp	.-16     	; 0x5844 <uart_puts_p+0x6>
    }
}
    5854:	df 91       	pop	r29
    5856:	cf 91       	pop	r28
    5858:	08 95       	ret

0000585a <uart_getc>:
{
    /* wait until receive buffer is full */
#if USE_SLEEP

	//During append file, we are disabling the RX interrupt, so we need to bring it back
	UCSR0B |= (1<<RXCIE0); //Enable receive interrupts
    585a:	80 91 c1 00 	lds	r24, 0x00C1
    585e:	80 68       	ori	r24, 0x80	; 128
    5860:	80 93 c1 00 	sts	0x00C1, r24

    sei();
    5864:	78 94       	sei
	//#define STAT1	5
	//PORTD &= ~(1<<STAT1); //Turn off LED to save more power - if we turn off the LED before the ISR, the LED never comes on
	//I'd rather have the LED blink
	sleep_mode();
    5866:	83 b7       	in	r24, 0x33	; 51
    5868:	81 60       	ori	r24, 0x01	; 1
    586a:	83 bf       	out	0x33, r24	; 51
    586c:	88 95       	sleep
    586e:	83 b7       	in	r24, 0x33	; 51
    5870:	8e 7f       	andi	r24, 0xFE	; 254
    5872:	83 bf       	out	0x33, r24	; 51
	cli();
    5874:	f8 94       	cli
	
	//Now that we've woken up, we assume that the UART ISR has done its job and loaded UDR into the buffer
	//We need to look at the last used spot in the buffer which is read_spot - 1
	char b;
	if(read_spot == 0)
    5876:	80 91 83 04 	lds	r24, 0x0483
    587a:	90 91 84 04 	lds	r25, 0x0484
    587e:	89 2b       	or	r24, r25
    5880:	19 f4       	brne	.+6      	; 0x5888 <uart_getc+0x2e>
		b = input_buffer[sizeof(input_buffer) - 1];
    5882:	80 91 46 07 	lds	r24, 0x0746
    5886:	07 c0       	rjmp	.+14     	; 0x5896 <uart_getc+0x3c>
	else
		b = input_buffer[read_spot - 1];
    5888:	e0 91 83 04 	lds	r30, 0x0483
    588c:	f0 91 84 04 	lds	r31, 0x0484
    5890:	e6 57       	subi	r30, 0x76	; 118
    5892:	fb 4f       	sbci	r31, 0xFB	; 251
    5894:	80 81       	ld	r24, Z

    if(b == '\r')
    5896:	8d 30       	cpi	r24, 0x0D	; 13
    5898:	09 f4       	brne	.+2      	; 0x589c <uart_getc+0x42>
    589a:	8a e0       	ldi	r24, 0x0A	; 10
        b = '\n';

    return b;
#endif

}
    589c:	08 95       	ret

0000589e <__mulsi3>:
    589e:	62 9f       	mul	r22, r18
    58a0:	d0 01       	movw	r26, r0
    58a2:	73 9f       	mul	r23, r19
    58a4:	f0 01       	movw	r30, r0
    58a6:	82 9f       	mul	r24, r18
    58a8:	e0 0d       	add	r30, r0
    58aa:	f1 1d       	adc	r31, r1
    58ac:	64 9f       	mul	r22, r20
    58ae:	e0 0d       	add	r30, r0
    58b0:	f1 1d       	adc	r31, r1
    58b2:	92 9f       	mul	r25, r18
    58b4:	f0 0d       	add	r31, r0
    58b6:	83 9f       	mul	r24, r19
    58b8:	f0 0d       	add	r31, r0
    58ba:	74 9f       	mul	r23, r20
    58bc:	f0 0d       	add	r31, r0
    58be:	65 9f       	mul	r22, r21
    58c0:	f0 0d       	add	r31, r0
    58c2:	99 27       	eor	r25, r25
    58c4:	72 9f       	mul	r23, r18
    58c6:	b0 0d       	add	r27, r0
    58c8:	e1 1d       	adc	r30, r1
    58ca:	f9 1f       	adc	r31, r25
    58cc:	63 9f       	mul	r22, r19
    58ce:	b0 0d       	add	r27, r0
    58d0:	e1 1d       	adc	r30, r1
    58d2:	f9 1f       	adc	r31, r25
    58d4:	bd 01       	movw	r22, r26
    58d6:	cf 01       	movw	r24, r30
    58d8:	11 24       	eor	r1, r1
    58da:	08 95       	ret

000058dc <__udivmodhi4>:
    58dc:	aa 1b       	sub	r26, r26
    58de:	bb 1b       	sub	r27, r27
    58e0:	51 e1       	ldi	r21, 0x11	; 17
    58e2:	07 c0       	rjmp	.+14     	; 0x58f2 <__udivmodhi4_ep>

000058e4 <__udivmodhi4_loop>:
    58e4:	aa 1f       	adc	r26, r26
    58e6:	bb 1f       	adc	r27, r27
    58e8:	a6 17       	cp	r26, r22
    58ea:	b7 07       	cpc	r27, r23
    58ec:	10 f0       	brcs	.+4      	; 0x58f2 <__udivmodhi4_ep>
    58ee:	a6 1b       	sub	r26, r22
    58f0:	b7 0b       	sbc	r27, r23

000058f2 <__udivmodhi4_ep>:
    58f2:	88 1f       	adc	r24, r24
    58f4:	99 1f       	adc	r25, r25
    58f6:	5a 95       	dec	r21
    58f8:	a9 f7       	brne	.-22     	; 0x58e4 <__udivmodhi4_loop>
    58fa:	80 95       	com	r24
    58fc:	90 95       	com	r25
    58fe:	bc 01       	movw	r22, r24
    5900:	cd 01       	movw	r24, r26
    5902:	08 95       	ret

00005904 <__divmodhi4>:
    5904:	97 fb       	bst	r25, 7
    5906:	09 2e       	mov	r0, r25
    5908:	07 26       	eor	r0, r23
    590a:	0a d0       	rcall	.+20     	; 0x5920 <__divmodhi4_neg1>
    590c:	77 fd       	sbrc	r23, 7
    590e:	04 d0       	rcall	.+8      	; 0x5918 <__divmodhi4_neg2>
    5910:	e5 df       	rcall	.-54     	; 0x58dc <__udivmodhi4>
    5912:	06 d0       	rcall	.+12     	; 0x5920 <__divmodhi4_neg1>
    5914:	00 20       	and	r0, r0
    5916:	1a f4       	brpl	.+6      	; 0x591e <__divmodhi4_exit>

00005918 <__divmodhi4_neg2>:
    5918:	70 95       	com	r23
    591a:	61 95       	neg	r22
    591c:	7f 4f       	sbci	r23, 0xFF	; 255

0000591e <__divmodhi4_exit>:
    591e:	08 95       	ret

00005920 <__divmodhi4_neg1>:
    5920:	f6 f7       	brtc	.-4      	; 0x591e <__divmodhi4_exit>
    5922:	90 95       	com	r25
    5924:	81 95       	neg	r24
    5926:	9f 4f       	sbci	r25, 0xFF	; 255
    5928:	08 95       	ret

0000592a <__udivmodsi4>:
    592a:	a1 e2       	ldi	r26, 0x21	; 33
    592c:	1a 2e       	mov	r1, r26
    592e:	aa 1b       	sub	r26, r26
    5930:	bb 1b       	sub	r27, r27
    5932:	fd 01       	movw	r30, r26
    5934:	0d c0       	rjmp	.+26     	; 0x5950 <__udivmodsi4_ep>

00005936 <__udivmodsi4_loop>:
    5936:	aa 1f       	adc	r26, r26
    5938:	bb 1f       	adc	r27, r27
    593a:	ee 1f       	adc	r30, r30
    593c:	ff 1f       	adc	r31, r31
    593e:	a2 17       	cp	r26, r18
    5940:	b3 07       	cpc	r27, r19
    5942:	e4 07       	cpc	r30, r20
    5944:	f5 07       	cpc	r31, r21
    5946:	20 f0       	brcs	.+8      	; 0x5950 <__udivmodsi4_ep>
    5948:	a2 1b       	sub	r26, r18
    594a:	b3 0b       	sbc	r27, r19
    594c:	e4 0b       	sbc	r30, r20
    594e:	f5 0b       	sbc	r31, r21

00005950 <__udivmodsi4_ep>:
    5950:	66 1f       	adc	r22, r22
    5952:	77 1f       	adc	r23, r23
    5954:	88 1f       	adc	r24, r24
    5956:	99 1f       	adc	r25, r25
    5958:	1a 94       	dec	r1
    595a:	69 f7       	brne	.-38     	; 0x5936 <__udivmodsi4_loop>
    595c:	60 95       	com	r22
    595e:	70 95       	com	r23
    5960:	80 95       	com	r24
    5962:	90 95       	com	r25
    5964:	9b 01       	movw	r18, r22
    5966:	ac 01       	movw	r20, r24
    5968:	bd 01       	movw	r22, r26
    596a:	cf 01       	movw	r24, r30
    596c:	08 95       	ret

0000596e <atoi>:
    596e:	fc 01       	movw	r30, r24
    5970:	88 27       	eor	r24, r24
    5972:	99 27       	eor	r25, r25
    5974:	e8 94       	clt
    5976:	21 91       	ld	r18, Z+
    5978:	20 32       	cpi	r18, 0x20	; 32
    597a:	e9 f3       	breq	.-6      	; 0x5976 <atoi+0x8>
    597c:	29 30       	cpi	r18, 0x09	; 9
    597e:	10 f0       	brcs	.+4      	; 0x5984 <atoi+0x16>
    5980:	2e 30       	cpi	r18, 0x0E	; 14
    5982:	c8 f3       	brcs	.-14     	; 0x5976 <atoi+0x8>
    5984:	2b 32       	cpi	r18, 0x2B	; 43
    5986:	41 f0       	breq	.+16     	; 0x5998 <atoi+0x2a>
    5988:	2d 32       	cpi	r18, 0x2D	; 45
    598a:	39 f4       	brne	.+14     	; 0x599a <atoi+0x2c>
    598c:	68 94       	set
    598e:	04 c0       	rjmp	.+8      	; 0x5998 <atoi+0x2a>
    5990:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <__mulhi_const_10>
    5994:	82 0f       	add	r24, r18
    5996:	91 1d       	adc	r25, r1
    5998:	21 91       	ld	r18, Z+
    599a:	20 53       	subi	r18, 0x30	; 48
    599c:	2a 30       	cpi	r18, 0x0A	; 10
    599e:	c0 f3       	brcs	.-16     	; 0x5990 <atoi+0x22>
    59a0:	1e f4       	brtc	.+6      	; 0x59a8 <atoi+0x3a>
    59a2:	90 95       	com	r25
    59a4:	81 95       	neg	r24
    59a6:	9f 4f       	sbci	r25, 0xFF	; 255
    59a8:	08 95       	ret

000059aa <strcmp_P>:
    59aa:	fb 01       	movw	r30, r22
    59ac:	dc 01       	movw	r26, r24
    59ae:	8d 91       	ld	r24, X+
    59b0:	05 90       	lpm	r0, Z+
    59b2:	80 19       	sub	r24, r0
    59b4:	01 10       	cpse	r0, r1
    59b6:	d9 f3       	breq	.-10     	; 0x59ae <strcmp_P+0x4>
    59b8:	99 0b       	sbc	r25, r25
    59ba:	08 95       	ret

000059bc <strncmp_P>:
    59bc:	fb 01       	movw	r30, r22
    59be:	dc 01       	movw	r26, r24
    59c0:	41 50       	subi	r20, 0x01	; 1
    59c2:	50 40       	sbci	r21, 0x00	; 0
    59c4:	30 f0       	brcs	.+12     	; 0x59d2 <strncmp_P+0x16>
    59c6:	8d 91       	ld	r24, X+
    59c8:	05 90       	lpm	r0, Z+
    59ca:	80 19       	sub	r24, r0
    59cc:	19 f4       	brne	.+6      	; 0x59d4 <strncmp_P+0x18>
    59ce:	00 20       	and	r0, r0
    59d0:	b9 f7       	brne	.-18     	; 0x59c0 <strncmp_P+0x4>
    59d2:	88 1b       	sub	r24, r24
    59d4:	99 0b       	sbc	r25, r25
    59d6:	08 95       	ret

000059d8 <memcpy>:
    59d8:	fb 01       	movw	r30, r22
    59da:	dc 01       	movw	r26, r24
    59dc:	02 c0       	rjmp	.+4      	; 0x59e2 <memcpy+0xa>
    59de:	01 90       	ld	r0, Z+
    59e0:	0d 92       	st	X+, r0
    59e2:	41 50       	subi	r20, 0x01	; 1
    59e4:	50 40       	sbci	r21, 0x00	; 0
    59e6:	d8 f7       	brcc	.-10     	; 0x59de <memcpy+0x6>
    59e8:	08 95       	ret

000059ea <memset>:
    59ea:	dc 01       	movw	r26, r24
    59ec:	01 c0       	rjmp	.+2      	; 0x59f0 <memset+0x6>
    59ee:	6d 93       	st	X+, r22
    59f0:	41 50       	subi	r20, 0x01	; 1
    59f2:	50 40       	sbci	r21, 0x00	; 0
    59f4:	e0 f7       	brcc	.-8      	; 0x59ee <memset+0x4>
    59f6:	08 95       	ret

000059f8 <strcat>:
    59f8:	fb 01       	movw	r30, r22
    59fa:	dc 01       	movw	r26, r24
    59fc:	0d 90       	ld	r0, X+
    59fe:	00 20       	and	r0, r0
    5a00:	e9 f7       	brne	.-6      	; 0x59fc <strcat+0x4>
    5a02:	11 97       	sbiw	r26, 0x01	; 1
    5a04:	01 90       	ld	r0, Z+
    5a06:	0d 92       	st	X+, r0
    5a08:	00 20       	and	r0, r0
    5a0a:	e1 f7       	brne	.-8      	; 0x5a04 <strcat+0xc>
    5a0c:	08 95       	ret

00005a0e <strchr>:
    5a0e:	fc 01       	movw	r30, r24
    5a10:	81 91       	ld	r24, Z+
    5a12:	86 17       	cp	r24, r22
    5a14:	21 f0       	breq	.+8      	; 0x5a1e <strchr+0x10>
    5a16:	88 23       	and	r24, r24
    5a18:	d9 f7       	brne	.-10     	; 0x5a10 <strchr+0x2>
    5a1a:	99 27       	eor	r25, r25
    5a1c:	08 95       	ret
    5a1e:	31 97       	sbiw	r30, 0x01	; 1
    5a20:	cf 01       	movw	r24, r30
    5a22:	08 95       	ret

00005a24 <strcmp>:
    5a24:	fb 01       	movw	r30, r22
    5a26:	dc 01       	movw	r26, r24
    5a28:	8d 91       	ld	r24, X+
    5a2a:	01 90       	ld	r0, Z+
    5a2c:	80 19       	sub	r24, r0
    5a2e:	01 10       	cpse	r0, r1
    5a30:	d9 f3       	breq	.-10     	; 0x5a28 <strcmp+0x4>
    5a32:	99 0b       	sbc	r25, r25
    5a34:	08 95       	ret

00005a36 <strcpy>:
    5a36:	fb 01       	movw	r30, r22
    5a38:	dc 01       	movw	r26, r24
    5a3a:	01 90       	ld	r0, Z+
    5a3c:	0d 92       	st	X+, r0
    5a3e:	00 20       	and	r0, r0
    5a40:	e1 f7       	brne	.-8      	; 0x5a3a <strcpy+0x4>
    5a42:	08 95       	ret

00005a44 <strncmp>:
    5a44:	fb 01       	movw	r30, r22
    5a46:	dc 01       	movw	r26, r24
    5a48:	41 50       	subi	r20, 0x01	; 1
    5a4a:	50 40       	sbci	r21, 0x00	; 0
    5a4c:	30 f0       	brcs	.+12     	; 0x5a5a <strncmp+0x16>
    5a4e:	8d 91       	ld	r24, X+
    5a50:	01 90       	ld	r0, Z+
    5a52:	80 19       	sub	r24, r0
    5a54:	19 f4       	brne	.+6      	; 0x5a5c <strncmp+0x18>
    5a56:	00 20       	and	r0, r0
    5a58:	b9 f7       	brne	.-18     	; 0x5a48 <strncmp+0x4>
    5a5a:	88 1b       	sub	r24, r24
    5a5c:	99 0b       	sbc	r25, r25
    5a5e:	08 95       	ret

00005a60 <strncpy>:
    5a60:	fb 01       	movw	r30, r22
    5a62:	dc 01       	movw	r26, r24
    5a64:	41 50       	subi	r20, 0x01	; 1
    5a66:	50 40       	sbci	r21, 0x00	; 0
    5a68:	48 f0       	brcs	.+18     	; 0x5a7c <strncpy+0x1c>
    5a6a:	01 90       	ld	r0, Z+
    5a6c:	0d 92       	st	X+, r0
    5a6e:	00 20       	and	r0, r0
    5a70:	c9 f7       	brne	.-14     	; 0x5a64 <strncpy+0x4>
    5a72:	01 c0       	rjmp	.+2      	; 0x5a76 <strncpy+0x16>
    5a74:	1d 92       	st	X+, r1
    5a76:	41 50       	subi	r20, 0x01	; 1
    5a78:	50 40       	sbci	r21, 0x00	; 0
    5a7a:	e0 f7       	brcc	.-8      	; 0x5a74 <strncpy+0x14>
    5a7c:	08 95       	ret

00005a7e <strrchr>:
    5a7e:	fc 01       	movw	r30, r24
    5a80:	81 e0       	ldi	r24, 0x01	; 1
    5a82:	90 e0       	ldi	r25, 0x00	; 0
    5a84:	01 90       	ld	r0, Z+
    5a86:	06 16       	cp	r0, r22
    5a88:	09 f4       	brne	.+2      	; 0x5a8c <strrchr+0xe>
    5a8a:	cf 01       	movw	r24, r30
    5a8c:	00 20       	and	r0, r0
    5a8e:	d1 f7       	brne	.-12     	; 0x5a84 <strrchr+0x6>
    5a90:	01 97       	sbiw	r24, 0x01	; 1
    5a92:	08 95       	ret

00005a94 <__mulhi_const_10>:
    5a94:	7a e0       	ldi	r23, 0x0A	; 10
    5a96:	97 9f       	mul	r25, r23
    5a98:	90 2d       	mov	r25, r0
    5a9a:	87 9f       	mul	r24, r23
    5a9c:	80 2d       	mov	r24, r0
    5a9e:	91 0d       	add	r25, r1
    5aa0:	11 24       	eor	r1, r1
    5aa2:	08 95       	ret

00005aa4 <sprintf>:
    5aa4:	ae e0       	ldi	r26, 0x0E	; 14
    5aa6:	b0 e0       	ldi	r27, 0x00	; 0
    5aa8:	e8 e5       	ldi	r30, 0x58	; 88
    5aaa:	fd e2       	ldi	r31, 0x2D	; 45
    5aac:	0c 94 01 30 	jmp	0x6002	; 0x6002 <__prologue_saves__+0x1c>
    5ab0:	0d 89       	ldd	r16, Y+21	; 0x15
    5ab2:	1e 89       	ldd	r17, Y+22	; 0x16
    5ab4:	86 e0       	ldi	r24, 0x06	; 6
    5ab6:	8c 83       	std	Y+4, r24	; 0x04
    5ab8:	1a 83       	std	Y+2, r17	; 0x02
    5aba:	09 83       	std	Y+1, r16	; 0x01
    5abc:	8f ef       	ldi	r24, 0xFF	; 255
    5abe:	9f e7       	ldi	r25, 0x7F	; 127
    5ac0:	9e 83       	std	Y+6, r25	; 0x06
    5ac2:	8d 83       	std	Y+5, r24	; 0x05
    5ac4:	9e 01       	movw	r18, r28
    5ac6:	27 5e       	subi	r18, 0xE7	; 231
    5ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    5aca:	ce 01       	movw	r24, r28
    5acc:	01 96       	adiw	r24, 0x01	; 1
    5ace:	6f 89       	ldd	r22, Y+23	; 0x17
    5ad0:	78 8d       	ldd	r23, Y+24	; 0x18
    5ad2:	a9 01       	movw	r20, r18
    5ad4:	0e 94 76 2d 	call	0x5aec	; 0x5aec <vfprintf>
    5ad8:	2f 81       	ldd	r18, Y+7	; 0x07
    5ada:	38 85       	ldd	r19, Y+8	; 0x08
    5adc:	02 0f       	add	r16, r18
    5ade:	13 1f       	adc	r17, r19
    5ae0:	f8 01       	movw	r30, r16
    5ae2:	10 82       	st	Z, r1
    5ae4:	2e 96       	adiw	r28, 0x0e	; 14
    5ae6:	e4 e0       	ldi	r30, 0x04	; 4
    5ae8:	0c 94 1d 30 	jmp	0x603a	; 0x603a <__epilogue_restores__+0x1c>

00005aec <vfprintf>:
    5aec:	ab e0       	ldi	r26, 0x0B	; 11
    5aee:	b0 e0       	ldi	r27, 0x00	; 0
    5af0:	ec e7       	ldi	r30, 0x7C	; 124
    5af2:	fd e2       	ldi	r31, 0x2D	; 45
    5af4:	0c 94 f3 2f 	jmp	0x5fe6	; 0x5fe6 <__prologue_saves__>
    5af8:	3c 01       	movw	r6, r24
    5afa:	2b 01       	movw	r4, r22
    5afc:	5a 01       	movw	r10, r20
    5afe:	fc 01       	movw	r30, r24
    5b00:	17 82       	std	Z+7, r1	; 0x07
    5b02:	16 82       	std	Z+6, r1	; 0x06
    5b04:	83 81       	ldd	r24, Z+3	; 0x03
    5b06:	81 fd       	sbrc	r24, 1
    5b08:	03 c0       	rjmp	.+6      	; 0x5b10 <vfprintf+0x24>
    5b0a:	6f ef       	ldi	r22, 0xFF	; 255
    5b0c:	7f ef       	ldi	r23, 0xFF	; 255
    5b0e:	c6 c1       	rjmp	.+908    	; 0x5e9c <vfprintf+0x3b0>
    5b10:	9a e0       	ldi	r25, 0x0A	; 10
    5b12:	89 2e       	mov	r8, r25
    5b14:	1e 01       	movw	r2, r28
    5b16:	08 94       	sec
    5b18:	21 1c       	adc	r2, r1
    5b1a:	31 1c       	adc	r3, r1
    5b1c:	f3 01       	movw	r30, r6
    5b1e:	23 81       	ldd	r18, Z+3	; 0x03
    5b20:	f2 01       	movw	r30, r4
    5b22:	23 fd       	sbrc	r18, 3
    5b24:	85 91       	lpm	r24, Z+
    5b26:	23 ff       	sbrs	r18, 3
    5b28:	81 91       	ld	r24, Z+
    5b2a:	2f 01       	movw	r4, r30
    5b2c:	88 23       	and	r24, r24
    5b2e:	09 f4       	brne	.+2      	; 0x5b32 <vfprintf+0x46>
    5b30:	b2 c1       	rjmp	.+868    	; 0x5e96 <vfprintf+0x3aa>
    5b32:	85 32       	cpi	r24, 0x25	; 37
    5b34:	39 f4       	brne	.+14     	; 0x5b44 <vfprintf+0x58>
    5b36:	23 fd       	sbrc	r18, 3
    5b38:	85 91       	lpm	r24, Z+
    5b3a:	23 ff       	sbrs	r18, 3
    5b3c:	81 91       	ld	r24, Z+
    5b3e:	2f 01       	movw	r4, r30
    5b40:	85 32       	cpi	r24, 0x25	; 37
    5b42:	29 f4       	brne	.+10     	; 0x5b4e <vfprintf+0x62>
    5b44:	90 e0       	ldi	r25, 0x00	; 0
    5b46:	b3 01       	movw	r22, r6
    5b48:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <fputc>
    5b4c:	e7 cf       	rjmp	.-50     	; 0x5b1c <vfprintf+0x30>
    5b4e:	98 2f       	mov	r25, r24
    5b50:	ff 24       	eor	r15, r15
    5b52:	ee 24       	eor	r14, r14
    5b54:	99 24       	eor	r9, r9
    5b56:	ff e1       	ldi	r31, 0x1F	; 31
    5b58:	ff 15       	cp	r31, r15
    5b5a:	d0 f0       	brcs	.+52     	; 0x5b90 <vfprintf+0xa4>
    5b5c:	9b 32       	cpi	r25, 0x2B	; 43
    5b5e:	69 f0       	breq	.+26     	; 0x5b7a <vfprintf+0x8e>
    5b60:	9c 32       	cpi	r25, 0x2C	; 44
    5b62:	28 f4       	brcc	.+10     	; 0x5b6e <vfprintf+0x82>
    5b64:	90 32       	cpi	r25, 0x20	; 32
    5b66:	59 f0       	breq	.+22     	; 0x5b7e <vfprintf+0x92>
    5b68:	93 32       	cpi	r25, 0x23	; 35
    5b6a:	91 f4       	brne	.+36     	; 0x5b90 <vfprintf+0xa4>
    5b6c:	0e c0       	rjmp	.+28     	; 0x5b8a <vfprintf+0x9e>
    5b6e:	9d 32       	cpi	r25, 0x2D	; 45
    5b70:	49 f0       	breq	.+18     	; 0x5b84 <vfprintf+0x98>
    5b72:	90 33       	cpi	r25, 0x30	; 48
    5b74:	69 f4       	brne	.+26     	; 0x5b90 <vfprintf+0xa4>
    5b76:	41 e0       	ldi	r20, 0x01	; 1
    5b78:	24 c0       	rjmp	.+72     	; 0x5bc2 <vfprintf+0xd6>
    5b7a:	52 e0       	ldi	r21, 0x02	; 2
    5b7c:	f5 2a       	or	r15, r21
    5b7e:	84 e0       	ldi	r24, 0x04	; 4
    5b80:	f8 2a       	or	r15, r24
    5b82:	28 c0       	rjmp	.+80     	; 0x5bd4 <vfprintf+0xe8>
    5b84:	98 e0       	ldi	r25, 0x08	; 8
    5b86:	f9 2a       	or	r15, r25
    5b88:	25 c0       	rjmp	.+74     	; 0x5bd4 <vfprintf+0xe8>
    5b8a:	e0 e1       	ldi	r30, 0x10	; 16
    5b8c:	fe 2a       	or	r15, r30
    5b8e:	22 c0       	rjmp	.+68     	; 0x5bd4 <vfprintf+0xe8>
    5b90:	f7 fc       	sbrc	r15, 7
    5b92:	29 c0       	rjmp	.+82     	; 0x5be6 <vfprintf+0xfa>
    5b94:	89 2f       	mov	r24, r25
    5b96:	80 53       	subi	r24, 0x30	; 48
    5b98:	8a 30       	cpi	r24, 0x0A	; 10
    5b9a:	70 f4       	brcc	.+28     	; 0x5bb8 <vfprintf+0xcc>
    5b9c:	f6 fe       	sbrs	r15, 6
    5b9e:	05 c0       	rjmp	.+10     	; 0x5baa <vfprintf+0xbe>
    5ba0:	98 9c       	mul	r9, r8
    5ba2:	90 2c       	mov	r9, r0
    5ba4:	11 24       	eor	r1, r1
    5ba6:	98 0e       	add	r9, r24
    5ba8:	15 c0       	rjmp	.+42     	; 0x5bd4 <vfprintf+0xe8>
    5baa:	e8 9c       	mul	r14, r8
    5bac:	e0 2c       	mov	r14, r0
    5bae:	11 24       	eor	r1, r1
    5bb0:	e8 0e       	add	r14, r24
    5bb2:	f0 e2       	ldi	r31, 0x20	; 32
    5bb4:	ff 2a       	or	r15, r31
    5bb6:	0e c0       	rjmp	.+28     	; 0x5bd4 <vfprintf+0xe8>
    5bb8:	9e 32       	cpi	r25, 0x2E	; 46
    5bba:	29 f4       	brne	.+10     	; 0x5bc6 <vfprintf+0xda>
    5bbc:	f6 fc       	sbrc	r15, 6
    5bbe:	6b c1       	rjmp	.+726    	; 0x5e96 <vfprintf+0x3aa>
    5bc0:	40 e4       	ldi	r20, 0x40	; 64
    5bc2:	f4 2a       	or	r15, r20
    5bc4:	07 c0       	rjmp	.+14     	; 0x5bd4 <vfprintf+0xe8>
    5bc6:	9c 36       	cpi	r25, 0x6C	; 108
    5bc8:	19 f4       	brne	.+6      	; 0x5bd0 <vfprintf+0xe4>
    5bca:	50 e8       	ldi	r21, 0x80	; 128
    5bcc:	f5 2a       	or	r15, r21
    5bce:	02 c0       	rjmp	.+4      	; 0x5bd4 <vfprintf+0xe8>
    5bd0:	98 36       	cpi	r25, 0x68	; 104
    5bd2:	49 f4       	brne	.+18     	; 0x5be6 <vfprintf+0xfa>
    5bd4:	f2 01       	movw	r30, r4
    5bd6:	23 fd       	sbrc	r18, 3
    5bd8:	95 91       	lpm	r25, Z+
    5bda:	23 ff       	sbrs	r18, 3
    5bdc:	91 91       	ld	r25, Z+
    5bde:	2f 01       	movw	r4, r30
    5be0:	99 23       	and	r25, r25
    5be2:	09 f0       	breq	.+2      	; 0x5be6 <vfprintf+0xfa>
    5be4:	b8 cf       	rjmp	.-144    	; 0x5b56 <vfprintf+0x6a>
    5be6:	89 2f       	mov	r24, r25
    5be8:	85 54       	subi	r24, 0x45	; 69
    5bea:	83 30       	cpi	r24, 0x03	; 3
    5bec:	18 f0       	brcs	.+6      	; 0x5bf4 <vfprintf+0x108>
    5bee:	80 52       	subi	r24, 0x20	; 32
    5bf0:	83 30       	cpi	r24, 0x03	; 3
    5bf2:	38 f4       	brcc	.+14     	; 0x5c02 <vfprintf+0x116>
    5bf4:	44 e0       	ldi	r20, 0x04	; 4
    5bf6:	50 e0       	ldi	r21, 0x00	; 0
    5bf8:	a4 0e       	add	r10, r20
    5bfa:	b5 1e       	adc	r11, r21
    5bfc:	5f e3       	ldi	r21, 0x3F	; 63
    5bfe:	59 83       	std	Y+1, r21	; 0x01
    5c00:	0f c0       	rjmp	.+30     	; 0x5c20 <vfprintf+0x134>
    5c02:	93 36       	cpi	r25, 0x63	; 99
    5c04:	31 f0       	breq	.+12     	; 0x5c12 <vfprintf+0x126>
    5c06:	93 37       	cpi	r25, 0x73	; 115
    5c08:	79 f0       	breq	.+30     	; 0x5c28 <vfprintf+0x13c>
    5c0a:	93 35       	cpi	r25, 0x53	; 83
    5c0c:	09 f0       	breq	.+2      	; 0x5c10 <vfprintf+0x124>
    5c0e:	56 c0       	rjmp	.+172    	; 0x5cbc <vfprintf+0x1d0>
    5c10:	20 c0       	rjmp	.+64     	; 0x5c52 <vfprintf+0x166>
    5c12:	f5 01       	movw	r30, r10
    5c14:	80 81       	ld	r24, Z
    5c16:	89 83       	std	Y+1, r24	; 0x01
    5c18:	42 e0       	ldi	r20, 0x02	; 2
    5c1a:	50 e0       	ldi	r21, 0x00	; 0
    5c1c:	a4 0e       	add	r10, r20
    5c1e:	b5 1e       	adc	r11, r21
    5c20:	61 01       	movw	r12, r2
    5c22:	01 e0       	ldi	r16, 0x01	; 1
    5c24:	10 e0       	ldi	r17, 0x00	; 0
    5c26:	12 c0       	rjmp	.+36     	; 0x5c4c <vfprintf+0x160>
    5c28:	f5 01       	movw	r30, r10
    5c2a:	c0 80       	ld	r12, Z
    5c2c:	d1 80       	ldd	r13, Z+1	; 0x01
    5c2e:	f6 fc       	sbrc	r15, 6
    5c30:	03 c0       	rjmp	.+6      	; 0x5c38 <vfprintf+0x14c>
    5c32:	6f ef       	ldi	r22, 0xFF	; 255
    5c34:	7f ef       	ldi	r23, 0xFF	; 255
    5c36:	02 c0       	rjmp	.+4      	; 0x5c3c <vfprintf+0x150>
    5c38:	69 2d       	mov	r22, r9
    5c3a:	70 e0       	ldi	r23, 0x00	; 0
    5c3c:	42 e0       	ldi	r20, 0x02	; 2
    5c3e:	50 e0       	ldi	r21, 0x00	; 0
    5c40:	a4 0e       	add	r10, r20
    5c42:	b5 1e       	adc	r11, r21
    5c44:	c6 01       	movw	r24, r12
    5c46:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <strnlen>
    5c4a:	8c 01       	movw	r16, r24
    5c4c:	5f e7       	ldi	r21, 0x7F	; 127
    5c4e:	f5 22       	and	r15, r21
    5c50:	14 c0       	rjmp	.+40     	; 0x5c7a <vfprintf+0x18e>
    5c52:	f5 01       	movw	r30, r10
    5c54:	c0 80       	ld	r12, Z
    5c56:	d1 80       	ldd	r13, Z+1	; 0x01
    5c58:	f6 fc       	sbrc	r15, 6
    5c5a:	03 c0       	rjmp	.+6      	; 0x5c62 <vfprintf+0x176>
    5c5c:	6f ef       	ldi	r22, 0xFF	; 255
    5c5e:	7f ef       	ldi	r23, 0xFF	; 255
    5c60:	02 c0       	rjmp	.+4      	; 0x5c66 <vfprintf+0x17a>
    5c62:	69 2d       	mov	r22, r9
    5c64:	70 e0       	ldi	r23, 0x00	; 0
    5c66:	42 e0       	ldi	r20, 0x02	; 2
    5c68:	50 e0       	ldi	r21, 0x00	; 0
    5c6a:	a4 0e       	add	r10, r20
    5c6c:	b5 1e       	adc	r11, r21
    5c6e:	c6 01       	movw	r24, r12
    5c70:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <strnlen_P>
    5c74:	8c 01       	movw	r16, r24
    5c76:	50 e8       	ldi	r21, 0x80	; 128
    5c78:	f5 2a       	or	r15, r21
    5c7a:	f3 fe       	sbrs	r15, 3
    5c7c:	07 c0       	rjmp	.+14     	; 0x5c8c <vfprintf+0x1a0>
    5c7e:	1a c0       	rjmp	.+52     	; 0x5cb4 <vfprintf+0x1c8>
    5c80:	80 e2       	ldi	r24, 0x20	; 32
    5c82:	90 e0       	ldi	r25, 0x00	; 0
    5c84:	b3 01       	movw	r22, r6
    5c86:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <fputc>
    5c8a:	ea 94       	dec	r14
    5c8c:	8e 2d       	mov	r24, r14
    5c8e:	90 e0       	ldi	r25, 0x00	; 0
    5c90:	08 17       	cp	r16, r24
    5c92:	19 07       	cpc	r17, r25
    5c94:	a8 f3       	brcs	.-22     	; 0x5c80 <vfprintf+0x194>
    5c96:	0e c0       	rjmp	.+28     	; 0x5cb4 <vfprintf+0x1c8>
    5c98:	f6 01       	movw	r30, r12
    5c9a:	f7 fc       	sbrc	r15, 7
    5c9c:	85 91       	lpm	r24, Z+
    5c9e:	f7 fe       	sbrs	r15, 7
    5ca0:	81 91       	ld	r24, Z+
    5ca2:	6f 01       	movw	r12, r30
    5ca4:	90 e0       	ldi	r25, 0x00	; 0
    5ca6:	b3 01       	movw	r22, r6
    5ca8:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <fputc>
    5cac:	e1 10       	cpse	r14, r1
    5cae:	ea 94       	dec	r14
    5cb0:	01 50       	subi	r16, 0x01	; 1
    5cb2:	10 40       	sbci	r17, 0x00	; 0
    5cb4:	01 15       	cp	r16, r1
    5cb6:	11 05       	cpc	r17, r1
    5cb8:	79 f7       	brne	.-34     	; 0x5c98 <vfprintf+0x1ac>
    5cba:	ea c0       	rjmp	.+468    	; 0x5e90 <vfprintf+0x3a4>
    5cbc:	94 36       	cpi	r25, 0x64	; 100
    5cbe:	11 f0       	breq	.+4      	; 0x5cc4 <vfprintf+0x1d8>
    5cc0:	99 36       	cpi	r25, 0x69	; 105
    5cc2:	69 f5       	brne	.+90     	; 0x5d1e <vfprintf+0x232>
    5cc4:	f7 fe       	sbrs	r15, 7
    5cc6:	08 c0       	rjmp	.+16     	; 0x5cd8 <vfprintf+0x1ec>
    5cc8:	f5 01       	movw	r30, r10
    5cca:	20 81       	ld	r18, Z
    5ccc:	31 81       	ldd	r19, Z+1	; 0x01
    5cce:	42 81       	ldd	r20, Z+2	; 0x02
    5cd0:	53 81       	ldd	r21, Z+3	; 0x03
    5cd2:	84 e0       	ldi	r24, 0x04	; 4
    5cd4:	90 e0       	ldi	r25, 0x00	; 0
    5cd6:	0a c0       	rjmp	.+20     	; 0x5cec <vfprintf+0x200>
    5cd8:	f5 01       	movw	r30, r10
    5cda:	80 81       	ld	r24, Z
    5cdc:	91 81       	ldd	r25, Z+1	; 0x01
    5cde:	9c 01       	movw	r18, r24
    5ce0:	44 27       	eor	r20, r20
    5ce2:	37 fd       	sbrc	r19, 7
    5ce4:	40 95       	com	r20
    5ce6:	54 2f       	mov	r21, r20
    5ce8:	82 e0       	ldi	r24, 0x02	; 2
    5cea:	90 e0       	ldi	r25, 0x00	; 0
    5cec:	a8 0e       	add	r10, r24
    5cee:	b9 1e       	adc	r11, r25
    5cf0:	9f e6       	ldi	r25, 0x6F	; 111
    5cf2:	f9 22       	and	r15, r25
    5cf4:	57 ff       	sbrs	r21, 7
    5cf6:	09 c0       	rjmp	.+18     	; 0x5d0a <vfprintf+0x21e>
    5cf8:	50 95       	com	r21
    5cfa:	40 95       	com	r20
    5cfc:	30 95       	com	r19
    5cfe:	21 95       	neg	r18
    5d00:	3f 4f       	sbci	r19, 0xFF	; 255
    5d02:	4f 4f       	sbci	r20, 0xFF	; 255
    5d04:	5f 4f       	sbci	r21, 0xFF	; 255
    5d06:	e0 e8       	ldi	r30, 0x80	; 128
    5d08:	fe 2a       	or	r15, r30
    5d0a:	ca 01       	movw	r24, r20
    5d0c:	b9 01       	movw	r22, r18
    5d0e:	a1 01       	movw	r20, r2
    5d10:	2a e0       	ldi	r18, 0x0A	; 10
    5d12:	30 e0       	ldi	r19, 0x00	; 0
    5d14:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <__ultoa_invert>
    5d18:	d8 2e       	mov	r13, r24
    5d1a:	d2 18       	sub	r13, r2
    5d1c:	40 c0       	rjmp	.+128    	; 0x5d9e <vfprintf+0x2b2>
    5d1e:	95 37       	cpi	r25, 0x75	; 117
    5d20:	29 f4       	brne	.+10     	; 0x5d2c <vfprintf+0x240>
    5d22:	1f 2d       	mov	r17, r15
    5d24:	1f 7e       	andi	r17, 0xEF	; 239
    5d26:	2a e0       	ldi	r18, 0x0A	; 10
    5d28:	30 e0       	ldi	r19, 0x00	; 0
    5d2a:	1d c0       	rjmp	.+58     	; 0x5d66 <vfprintf+0x27a>
    5d2c:	1f 2d       	mov	r17, r15
    5d2e:	19 7f       	andi	r17, 0xF9	; 249
    5d30:	9f 36       	cpi	r25, 0x6F	; 111
    5d32:	61 f0       	breq	.+24     	; 0x5d4c <vfprintf+0x260>
    5d34:	90 37       	cpi	r25, 0x70	; 112
    5d36:	20 f4       	brcc	.+8      	; 0x5d40 <vfprintf+0x254>
    5d38:	98 35       	cpi	r25, 0x58	; 88
    5d3a:	09 f0       	breq	.+2      	; 0x5d3e <vfprintf+0x252>
    5d3c:	ac c0       	rjmp	.+344    	; 0x5e96 <vfprintf+0x3aa>
    5d3e:	0f c0       	rjmp	.+30     	; 0x5d5e <vfprintf+0x272>
    5d40:	90 37       	cpi	r25, 0x70	; 112
    5d42:	39 f0       	breq	.+14     	; 0x5d52 <vfprintf+0x266>
    5d44:	98 37       	cpi	r25, 0x78	; 120
    5d46:	09 f0       	breq	.+2      	; 0x5d4a <vfprintf+0x25e>
    5d48:	a6 c0       	rjmp	.+332    	; 0x5e96 <vfprintf+0x3aa>
    5d4a:	04 c0       	rjmp	.+8      	; 0x5d54 <vfprintf+0x268>
    5d4c:	28 e0       	ldi	r18, 0x08	; 8
    5d4e:	30 e0       	ldi	r19, 0x00	; 0
    5d50:	0a c0       	rjmp	.+20     	; 0x5d66 <vfprintf+0x27a>
    5d52:	10 61       	ori	r17, 0x10	; 16
    5d54:	14 fd       	sbrc	r17, 4
    5d56:	14 60       	ori	r17, 0x04	; 4
    5d58:	20 e1       	ldi	r18, 0x10	; 16
    5d5a:	30 e0       	ldi	r19, 0x00	; 0
    5d5c:	04 c0       	rjmp	.+8      	; 0x5d66 <vfprintf+0x27a>
    5d5e:	14 fd       	sbrc	r17, 4
    5d60:	16 60       	ori	r17, 0x06	; 6
    5d62:	20 e1       	ldi	r18, 0x10	; 16
    5d64:	32 e0       	ldi	r19, 0x02	; 2
    5d66:	17 ff       	sbrs	r17, 7
    5d68:	08 c0       	rjmp	.+16     	; 0x5d7a <vfprintf+0x28e>
    5d6a:	f5 01       	movw	r30, r10
    5d6c:	60 81       	ld	r22, Z
    5d6e:	71 81       	ldd	r23, Z+1	; 0x01
    5d70:	82 81       	ldd	r24, Z+2	; 0x02
    5d72:	93 81       	ldd	r25, Z+3	; 0x03
    5d74:	44 e0       	ldi	r20, 0x04	; 4
    5d76:	50 e0       	ldi	r21, 0x00	; 0
    5d78:	08 c0       	rjmp	.+16     	; 0x5d8a <vfprintf+0x29e>
    5d7a:	f5 01       	movw	r30, r10
    5d7c:	80 81       	ld	r24, Z
    5d7e:	91 81       	ldd	r25, Z+1	; 0x01
    5d80:	bc 01       	movw	r22, r24
    5d82:	80 e0       	ldi	r24, 0x00	; 0
    5d84:	90 e0       	ldi	r25, 0x00	; 0
    5d86:	42 e0       	ldi	r20, 0x02	; 2
    5d88:	50 e0       	ldi	r21, 0x00	; 0
    5d8a:	a4 0e       	add	r10, r20
    5d8c:	b5 1e       	adc	r11, r21
    5d8e:	a1 01       	movw	r20, r2
    5d90:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <__ultoa_invert>
    5d94:	d8 2e       	mov	r13, r24
    5d96:	d2 18       	sub	r13, r2
    5d98:	8f e7       	ldi	r24, 0x7F	; 127
    5d9a:	f8 2e       	mov	r15, r24
    5d9c:	f1 22       	and	r15, r17
    5d9e:	f6 fe       	sbrs	r15, 6
    5da0:	0b c0       	rjmp	.+22     	; 0x5db8 <vfprintf+0x2cc>
    5da2:	5e ef       	ldi	r21, 0xFE	; 254
    5da4:	f5 22       	and	r15, r21
    5da6:	d9 14       	cp	r13, r9
    5da8:	38 f4       	brcc	.+14     	; 0x5db8 <vfprintf+0x2cc>
    5daa:	f4 fe       	sbrs	r15, 4
    5dac:	07 c0       	rjmp	.+14     	; 0x5dbc <vfprintf+0x2d0>
    5dae:	f2 fc       	sbrc	r15, 2
    5db0:	05 c0       	rjmp	.+10     	; 0x5dbc <vfprintf+0x2d0>
    5db2:	8f ee       	ldi	r24, 0xEF	; 239
    5db4:	f8 22       	and	r15, r24
    5db6:	02 c0       	rjmp	.+4      	; 0x5dbc <vfprintf+0x2d0>
    5db8:	1d 2d       	mov	r17, r13
    5dba:	01 c0       	rjmp	.+2      	; 0x5dbe <vfprintf+0x2d2>
    5dbc:	19 2d       	mov	r17, r9
    5dbe:	f4 fe       	sbrs	r15, 4
    5dc0:	0d c0       	rjmp	.+26     	; 0x5ddc <vfprintf+0x2f0>
    5dc2:	fe 01       	movw	r30, r28
    5dc4:	ed 0d       	add	r30, r13
    5dc6:	f1 1d       	adc	r31, r1
    5dc8:	80 81       	ld	r24, Z
    5dca:	80 33       	cpi	r24, 0x30	; 48
    5dcc:	19 f4       	brne	.+6      	; 0x5dd4 <vfprintf+0x2e8>
    5dce:	99 ee       	ldi	r25, 0xE9	; 233
    5dd0:	f9 22       	and	r15, r25
    5dd2:	08 c0       	rjmp	.+16     	; 0x5de4 <vfprintf+0x2f8>
    5dd4:	1f 5f       	subi	r17, 0xFF	; 255
    5dd6:	f2 fe       	sbrs	r15, 2
    5dd8:	05 c0       	rjmp	.+10     	; 0x5de4 <vfprintf+0x2f8>
    5dda:	03 c0       	rjmp	.+6      	; 0x5de2 <vfprintf+0x2f6>
    5ddc:	8f 2d       	mov	r24, r15
    5dde:	86 78       	andi	r24, 0x86	; 134
    5de0:	09 f0       	breq	.+2      	; 0x5de4 <vfprintf+0x2f8>
    5de2:	1f 5f       	subi	r17, 0xFF	; 255
    5de4:	0f 2d       	mov	r16, r15
    5de6:	f3 fc       	sbrc	r15, 3
    5de8:	14 c0       	rjmp	.+40     	; 0x5e12 <vfprintf+0x326>
    5dea:	f0 fe       	sbrs	r15, 0
    5dec:	0f c0       	rjmp	.+30     	; 0x5e0c <vfprintf+0x320>
    5dee:	1e 15       	cp	r17, r14
    5df0:	10 f0       	brcs	.+4      	; 0x5df6 <vfprintf+0x30a>
    5df2:	9d 2c       	mov	r9, r13
    5df4:	0b c0       	rjmp	.+22     	; 0x5e0c <vfprintf+0x320>
    5df6:	9d 2c       	mov	r9, r13
    5df8:	9e 0c       	add	r9, r14
    5dfa:	91 1a       	sub	r9, r17
    5dfc:	1e 2d       	mov	r17, r14
    5dfe:	06 c0       	rjmp	.+12     	; 0x5e0c <vfprintf+0x320>
    5e00:	80 e2       	ldi	r24, 0x20	; 32
    5e02:	90 e0       	ldi	r25, 0x00	; 0
    5e04:	b3 01       	movw	r22, r6
    5e06:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <fputc>
    5e0a:	1f 5f       	subi	r17, 0xFF	; 255
    5e0c:	1e 15       	cp	r17, r14
    5e0e:	c0 f3       	brcs	.-16     	; 0x5e00 <vfprintf+0x314>
    5e10:	04 c0       	rjmp	.+8      	; 0x5e1a <vfprintf+0x32e>
    5e12:	1e 15       	cp	r17, r14
    5e14:	10 f4       	brcc	.+4      	; 0x5e1a <vfprintf+0x32e>
    5e16:	e1 1a       	sub	r14, r17
    5e18:	01 c0       	rjmp	.+2      	; 0x5e1c <vfprintf+0x330>
    5e1a:	ee 24       	eor	r14, r14
    5e1c:	04 ff       	sbrs	r16, 4
    5e1e:	0f c0       	rjmp	.+30     	; 0x5e3e <vfprintf+0x352>
    5e20:	80 e3       	ldi	r24, 0x30	; 48
    5e22:	90 e0       	ldi	r25, 0x00	; 0
    5e24:	b3 01       	movw	r22, r6
    5e26:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <fputc>
    5e2a:	02 ff       	sbrs	r16, 2
    5e2c:	1d c0       	rjmp	.+58     	; 0x5e68 <vfprintf+0x37c>
    5e2e:	01 fd       	sbrc	r16, 1
    5e30:	03 c0       	rjmp	.+6      	; 0x5e38 <vfprintf+0x34c>
    5e32:	88 e7       	ldi	r24, 0x78	; 120
    5e34:	90 e0       	ldi	r25, 0x00	; 0
    5e36:	0e c0       	rjmp	.+28     	; 0x5e54 <vfprintf+0x368>
    5e38:	88 e5       	ldi	r24, 0x58	; 88
    5e3a:	90 e0       	ldi	r25, 0x00	; 0
    5e3c:	0b c0       	rjmp	.+22     	; 0x5e54 <vfprintf+0x368>
    5e3e:	80 2f       	mov	r24, r16
    5e40:	86 78       	andi	r24, 0x86	; 134
    5e42:	91 f0       	breq	.+36     	; 0x5e68 <vfprintf+0x37c>
    5e44:	01 ff       	sbrs	r16, 1
    5e46:	02 c0       	rjmp	.+4      	; 0x5e4c <vfprintf+0x360>
    5e48:	8b e2       	ldi	r24, 0x2B	; 43
    5e4a:	01 c0       	rjmp	.+2      	; 0x5e4e <vfprintf+0x362>
    5e4c:	80 e2       	ldi	r24, 0x20	; 32
    5e4e:	f7 fc       	sbrc	r15, 7
    5e50:	8d e2       	ldi	r24, 0x2D	; 45
    5e52:	90 e0       	ldi	r25, 0x00	; 0
    5e54:	b3 01       	movw	r22, r6
    5e56:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <fputc>
    5e5a:	06 c0       	rjmp	.+12     	; 0x5e68 <vfprintf+0x37c>
    5e5c:	80 e3       	ldi	r24, 0x30	; 48
    5e5e:	90 e0       	ldi	r25, 0x00	; 0
    5e60:	b3 01       	movw	r22, r6
    5e62:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <fputc>
    5e66:	9a 94       	dec	r9
    5e68:	d9 14       	cp	r13, r9
    5e6a:	c0 f3       	brcs	.-16     	; 0x5e5c <vfprintf+0x370>
    5e6c:	da 94       	dec	r13
    5e6e:	f1 01       	movw	r30, r2
    5e70:	ed 0d       	add	r30, r13
    5e72:	f1 1d       	adc	r31, r1
    5e74:	80 81       	ld	r24, Z
    5e76:	90 e0       	ldi	r25, 0x00	; 0
    5e78:	b3 01       	movw	r22, r6
    5e7a:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <fputc>
    5e7e:	dd 20       	and	r13, r13
    5e80:	a9 f7       	brne	.-22     	; 0x5e6c <vfprintf+0x380>
    5e82:	06 c0       	rjmp	.+12     	; 0x5e90 <vfprintf+0x3a4>
    5e84:	80 e2       	ldi	r24, 0x20	; 32
    5e86:	90 e0       	ldi	r25, 0x00	; 0
    5e88:	b3 01       	movw	r22, r6
    5e8a:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <fputc>
    5e8e:	ea 94       	dec	r14
    5e90:	ee 20       	and	r14, r14
    5e92:	c1 f7       	brne	.-16     	; 0x5e84 <vfprintf+0x398>
    5e94:	43 ce       	rjmp	.-890    	; 0x5b1c <vfprintf+0x30>
    5e96:	f3 01       	movw	r30, r6
    5e98:	66 81       	ldd	r22, Z+6	; 0x06
    5e9a:	77 81       	ldd	r23, Z+7	; 0x07
    5e9c:	cb 01       	movw	r24, r22
    5e9e:	2b 96       	adiw	r28, 0x0b	; 11
    5ea0:	e2 e1       	ldi	r30, 0x12	; 18
    5ea2:	0c 94 0f 30 	jmp	0x601e	; 0x601e <__epilogue_restores__>

00005ea6 <strnlen_P>:
    5ea6:	fc 01       	movw	r30, r24
    5ea8:	05 90       	lpm	r0, Z+
    5eaa:	61 50       	subi	r22, 0x01	; 1
    5eac:	70 40       	sbci	r23, 0x00	; 0
    5eae:	01 10       	cpse	r0, r1
    5eb0:	d8 f7       	brcc	.-10     	; 0x5ea8 <strnlen_P+0x2>
    5eb2:	80 95       	com	r24
    5eb4:	90 95       	com	r25
    5eb6:	8e 0f       	add	r24, r30
    5eb8:	9f 1f       	adc	r25, r31
    5eba:	08 95       	ret

00005ebc <strnlen>:
    5ebc:	fc 01       	movw	r30, r24
    5ebe:	61 50       	subi	r22, 0x01	; 1
    5ec0:	70 40       	sbci	r23, 0x00	; 0
    5ec2:	01 90       	ld	r0, Z+
    5ec4:	01 10       	cpse	r0, r1
    5ec6:	d8 f7       	brcc	.-10     	; 0x5ebe <strnlen+0x2>
    5ec8:	80 95       	com	r24
    5eca:	90 95       	com	r25
    5ecc:	8e 0f       	add	r24, r30
    5ece:	9f 1f       	adc	r25, r31
    5ed0:	08 95       	ret

00005ed2 <fputc>:
    5ed2:	0f 93       	push	r16
    5ed4:	1f 93       	push	r17
    5ed6:	cf 93       	push	r28
    5ed8:	df 93       	push	r29
    5eda:	8c 01       	movw	r16, r24
    5edc:	eb 01       	movw	r28, r22
    5ede:	8b 81       	ldd	r24, Y+3	; 0x03
    5ee0:	81 ff       	sbrs	r24, 1
    5ee2:	1b c0       	rjmp	.+54     	; 0x5f1a <fputc+0x48>
    5ee4:	82 ff       	sbrs	r24, 2
    5ee6:	0d c0       	rjmp	.+26     	; 0x5f02 <fputc+0x30>
    5ee8:	2e 81       	ldd	r18, Y+6	; 0x06
    5eea:	3f 81       	ldd	r19, Y+7	; 0x07
    5eec:	8c 81       	ldd	r24, Y+4	; 0x04
    5eee:	9d 81       	ldd	r25, Y+5	; 0x05
    5ef0:	28 17       	cp	r18, r24
    5ef2:	39 07       	cpc	r19, r25
    5ef4:	64 f4       	brge	.+24     	; 0x5f0e <fputc+0x3c>
    5ef6:	e8 81       	ld	r30, Y
    5ef8:	f9 81       	ldd	r31, Y+1	; 0x01
    5efa:	01 93       	st	Z+, r16
    5efc:	f9 83       	std	Y+1, r31	; 0x01
    5efe:	e8 83       	st	Y, r30
    5f00:	06 c0       	rjmp	.+12     	; 0x5f0e <fputc+0x3c>
    5f02:	e8 85       	ldd	r30, Y+8	; 0x08
    5f04:	f9 85       	ldd	r31, Y+9	; 0x09
    5f06:	80 2f       	mov	r24, r16
    5f08:	09 95       	icall
    5f0a:	89 2b       	or	r24, r25
    5f0c:	31 f4       	brne	.+12     	; 0x5f1a <fputc+0x48>
    5f0e:	8e 81       	ldd	r24, Y+6	; 0x06
    5f10:	9f 81       	ldd	r25, Y+7	; 0x07
    5f12:	01 96       	adiw	r24, 0x01	; 1
    5f14:	9f 83       	std	Y+7, r25	; 0x07
    5f16:	8e 83       	std	Y+6, r24	; 0x06
    5f18:	02 c0       	rjmp	.+4      	; 0x5f1e <fputc+0x4c>
    5f1a:	0f ef       	ldi	r16, 0xFF	; 255
    5f1c:	1f ef       	ldi	r17, 0xFF	; 255
    5f1e:	c8 01       	movw	r24, r16
    5f20:	df 91       	pop	r29
    5f22:	cf 91       	pop	r28
    5f24:	1f 91       	pop	r17
    5f26:	0f 91       	pop	r16
    5f28:	08 95       	ret

00005f2a <__ultoa_invert>:
    5f2a:	fa 01       	movw	r30, r20
    5f2c:	aa 27       	eor	r26, r26
    5f2e:	28 30       	cpi	r18, 0x08	; 8
    5f30:	51 f1       	breq	.+84     	; 0x5f86 <__ultoa_invert+0x5c>
    5f32:	20 31       	cpi	r18, 0x10	; 16
    5f34:	81 f1       	breq	.+96     	; 0x5f96 <__ultoa_invert+0x6c>
    5f36:	e8 94       	clt
    5f38:	6f 93       	push	r22
    5f3a:	6e 7f       	andi	r22, 0xFE	; 254
    5f3c:	6e 5f       	subi	r22, 0xFE	; 254
    5f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    5f40:	8f 4f       	sbci	r24, 0xFF	; 255
    5f42:	9f 4f       	sbci	r25, 0xFF	; 255
    5f44:	af 4f       	sbci	r26, 0xFF	; 255
    5f46:	b1 e0       	ldi	r27, 0x01	; 1
    5f48:	3e d0       	rcall	.+124    	; 0x5fc6 <__ultoa_invert+0x9c>
    5f4a:	b4 e0       	ldi	r27, 0x04	; 4
    5f4c:	3c d0       	rcall	.+120    	; 0x5fc6 <__ultoa_invert+0x9c>
    5f4e:	67 0f       	add	r22, r23
    5f50:	78 1f       	adc	r23, r24
    5f52:	89 1f       	adc	r24, r25
    5f54:	9a 1f       	adc	r25, r26
    5f56:	a1 1d       	adc	r26, r1
    5f58:	68 0f       	add	r22, r24
    5f5a:	79 1f       	adc	r23, r25
    5f5c:	8a 1f       	adc	r24, r26
    5f5e:	91 1d       	adc	r25, r1
    5f60:	a1 1d       	adc	r26, r1
    5f62:	6a 0f       	add	r22, r26
    5f64:	71 1d       	adc	r23, r1
    5f66:	81 1d       	adc	r24, r1
    5f68:	91 1d       	adc	r25, r1
    5f6a:	a1 1d       	adc	r26, r1
    5f6c:	20 d0       	rcall	.+64     	; 0x5fae <__ultoa_invert+0x84>
    5f6e:	09 f4       	brne	.+2      	; 0x5f72 <__ultoa_invert+0x48>
    5f70:	68 94       	set
    5f72:	3f 91       	pop	r19
    5f74:	2a e0       	ldi	r18, 0x0A	; 10
    5f76:	26 9f       	mul	r18, r22
    5f78:	11 24       	eor	r1, r1
    5f7a:	30 19       	sub	r19, r0
    5f7c:	30 5d       	subi	r19, 0xD0	; 208
    5f7e:	31 93       	st	Z+, r19
    5f80:	de f6       	brtc	.-74     	; 0x5f38 <__ultoa_invert+0xe>
    5f82:	cf 01       	movw	r24, r30
    5f84:	08 95       	ret
    5f86:	46 2f       	mov	r20, r22
    5f88:	47 70       	andi	r20, 0x07	; 7
    5f8a:	40 5d       	subi	r20, 0xD0	; 208
    5f8c:	41 93       	st	Z+, r20
    5f8e:	b3 e0       	ldi	r27, 0x03	; 3
    5f90:	0f d0       	rcall	.+30     	; 0x5fb0 <__ultoa_invert+0x86>
    5f92:	c9 f7       	brne	.-14     	; 0x5f86 <__ultoa_invert+0x5c>
    5f94:	f6 cf       	rjmp	.-20     	; 0x5f82 <__ultoa_invert+0x58>
    5f96:	46 2f       	mov	r20, r22
    5f98:	4f 70       	andi	r20, 0x0F	; 15
    5f9a:	40 5d       	subi	r20, 0xD0	; 208
    5f9c:	4a 33       	cpi	r20, 0x3A	; 58
    5f9e:	18 f0       	brcs	.+6      	; 0x5fa6 <__ultoa_invert+0x7c>
    5fa0:	49 5d       	subi	r20, 0xD9	; 217
    5fa2:	31 fd       	sbrc	r19, 1
    5fa4:	40 52       	subi	r20, 0x20	; 32
    5fa6:	41 93       	st	Z+, r20
    5fa8:	02 d0       	rcall	.+4      	; 0x5fae <__ultoa_invert+0x84>
    5faa:	a9 f7       	brne	.-22     	; 0x5f96 <__ultoa_invert+0x6c>
    5fac:	ea cf       	rjmp	.-44     	; 0x5f82 <__ultoa_invert+0x58>
    5fae:	b4 e0       	ldi	r27, 0x04	; 4
    5fb0:	a6 95       	lsr	r26
    5fb2:	97 95       	ror	r25
    5fb4:	87 95       	ror	r24
    5fb6:	77 95       	ror	r23
    5fb8:	67 95       	ror	r22
    5fba:	ba 95       	dec	r27
    5fbc:	c9 f7       	brne	.-14     	; 0x5fb0 <__ultoa_invert+0x86>
    5fbe:	00 97       	sbiw	r24, 0x00	; 0
    5fc0:	61 05       	cpc	r22, r1
    5fc2:	71 05       	cpc	r23, r1
    5fc4:	08 95       	ret
    5fc6:	9b 01       	movw	r18, r22
    5fc8:	ac 01       	movw	r20, r24
    5fca:	0a 2e       	mov	r0, r26
    5fcc:	06 94       	lsr	r0
    5fce:	57 95       	ror	r21
    5fd0:	47 95       	ror	r20
    5fd2:	37 95       	ror	r19
    5fd4:	27 95       	ror	r18
    5fd6:	ba 95       	dec	r27
    5fd8:	c9 f7       	brne	.-14     	; 0x5fcc <__ultoa_invert+0xa2>
    5fda:	62 0f       	add	r22, r18
    5fdc:	73 1f       	adc	r23, r19
    5fde:	84 1f       	adc	r24, r20
    5fe0:	95 1f       	adc	r25, r21
    5fe2:	a0 1d       	adc	r26, r0
    5fe4:	08 95       	ret

00005fe6 <__prologue_saves__>:
    5fe6:	2f 92       	push	r2
    5fe8:	3f 92       	push	r3
    5fea:	4f 92       	push	r4
    5fec:	5f 92       	push	r5
    5fee:	6f 92       	push	r6
    5ff0:	7f 92       	push	r7
    5ff2:	8f 92       	push	r8
    5ff4:	9f 92       	push	r9
    5ff6:	af 92       	push	r10
    5ff8:	bf 92       	push	r11
    5ffa:	cf 92       	push	r12
    5ffc:	df 92       	push	r13
    5ffe:	ef 92       	push	r14
    6000:	ff 92       	push	r15
    6002:	0f 93       	push	r16
    6004:	1f 93       	push	r17
    6006:	cf 93       	push	r28
    6008:	df 93       	push	r29
    600a:	cd b7       	in	r28, 0x3d	; 61
    600c:	de b7       	in	r29, 0x3e	; 62
    600e:	ca 1b       	sub	r28, r26
    6010:	db 0b       	sbc	r29, r27
    6012:	0f b6       	in	r0, 0x3f	; 63
    6014:	f8 94       	cli
    6016:	de bf       	out	0x3e, r29	; 62
    6018:	0f be       	out	0x3f, r0	; 63
    601a:	cd bf       	out	0x3d, r28	; 61
    601c:	09 94       	ijmp

0000601e <__epilogue_restores__>:
    601e:	2a 88       	ldd	r2, Y+18	; 0x12
    6020:	39 88       	ldd	r3, Y+17	; 0x11
    6022:	48 88       	ldd	r4, Y+16	; 0x10
    6024:	5f 84       	ldd	r5, Y+15	; 0x0f
    6026:	6e 84       	ldd	r6, Y+14	; 0x0e
    6028:	7d 84       	ldd	r7, Y+13	; 0x0d
    602a:	8c 84       	ldd	r8, Y+12	; 0x0c
    602c:	9b 84       	ldd	r9, Y+11	; 0x0b
    602e:	aa 84       	ldd	r10, Y+10	; 0x0a
    6030:	b9 84       	ldd	r11, Y+9	; 0x09
    6032:	c8 84       	ldd	r12, Y+8	; 0x08
    6034:	df 80       	ldd	r13, Y+7	; 0x07
    6036:	ee 80       	ldd	r14, Y+6	; 0x06
    6038:	fd 80       	ldd	r15, Y+5	; 0x05
    603a:	0c 81       	ldd	r16, Y+4	; 0x04
    603c:	1b 81       	ldd	r17, Y+3	; 0x03
    603e:	aa 81       	ldd	r26, Y+2	; 0x02
    6040:	b9 81       	ldd	r27, Y+1	; 0x01
    6042:	ce 0f       	add	r28, r30
    6044:	d1 1d       	adc	r29, r1
    6046:	0f b6       	in	r0, 0x3f	; 63
    6048:	f8 94       	cli
    604a:	de bf       	out	0x3e, r29	; 62
    604c:	0f be       	out	0x3f, r0	; 63
    604e:	cd bf       	out	0x3d, r28	; 61
    6050:	ed 01       	movw	r28, r26
    6052:	08 95       	ret

00006054 <_exit>:
    6054:	f8 94       	cli

00006056 <__stop_program>:
    6056:	ff cf       	rjmp	.-2      	; 0x6056 <__stop_program>
